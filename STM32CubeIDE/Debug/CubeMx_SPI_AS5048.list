
CubeMx_SPI_AS5048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08006158  08006158  00016158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800668c  0800668c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001e0  08006878  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08006878  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e6  00000000  00000000  0002ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006db0  00000000  00000000  00032697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  00039448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d0  00000000  00000000  00039eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d23  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb83  00000000  00000000  000545ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0c6  00000000  00000000  0006312e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ef1f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c98  00000000  00000000  000ef244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006140 	.word	0x08006140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006140 	.word	0x08006140

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN8IcHausMuC1Eh>:
#include "IcHausMu.hpp"


// ############################### Constructors ###############################

IcHausMu::IcHausMu(const unsigned char hwRev)
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	4e14      	ldr	r6, [pc, #80]	; (8000fb4 <_ZN8IcHausMuC1Eh+0x58>)
 8000f64:	277f      	movs	r7, #127	; 0x7f
 8000f66:	463a      	mov	r2, r7
 8000f68:	4631      	mov	r1, r6
 8000f6a:	3001      	adds	r0, #1
 8000f6c:	f002 fae0 	bl	8003530 <memcpy>
 8000f70:	463a      	mov	r2, r7
 8000f72:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8000f76:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8000f7a:	f002 fad9 	bl	8003530 <memcpy>
//  : _address(0x00) // can be used to initialize as list method
{
    debugVal = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	7023      	strb	r3, [r4, #0]
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 8000f82:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 8000f86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    _address = 0x00;
 8000f8a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
    _hardRev = hwRev;
 8000f8e:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    _csFct_ptr = NULL;
 8000f92:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    _streamFct_ptr = NULL;
 8000f96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    _initStatus = RET_W_UNINIT;
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
    _sdadOutMsb = 0;
 8000fa0:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
    _sdadOutLsb = 0;
 8000fa4:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
    _sdadOutSize = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
}
 8000fae:	4620      	mov	r0, r4
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08006158 	.word	0x08006158

08000fb8 <_ZN8IcHausMu16csFunctionAttachEPFvbE>:
// ############################### Public Methods ###############################

// ---------------- low level functions ----------------

void IcHausMu::csFunctionAttach(void (*fct_ptr)(const bool)) {
    _csFct_ptr = fct_ptr;
 8000fb8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
}
 8000fbc:	4770      	bx	lr

08000fbe <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>:

void IcHausMu::streamFunctionAttach(void (*fct_ptr)(unsigned char* const, unsigned char*, const unsigned int)) {
    _streamFct_ptr = fct_ptr;
 8000fbe:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
}
 8000fc2:	4770      	bx	lr

08000fc4 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>:
}

unsigned char IcHausMu::icMuRegSize(const icMuRegister_t reg) {
    unsigned char tmpVal = 0;

    tmpVal = _icMuRegisterMask[reg];                    // this tab contains masks and register unions size (x), identified by 0x8x (x!=0, mask must be contiguous by definition)
 8000fc4:	4408      	add	r0, r1
 8000fc6:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    if (0x80<tmpVal && 0x90>tmpVal) {tmpVal &= 0x0F;}   // the union size is returned.
 8000fca:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b0e      	cmp	r3, #14
 8000fd2:	d802      	bhi.n	8000fda <_ZN8IcHausMu11icMuRegSizeE12icMuRegister+0x16>
 8000fd4:	f000 000f 	and.w	r0, r0, #15
 8000fd8:	4770      	bx	lr
    else {tmpVal = 1;}                                  // single register, size = 1
 8000fda:	2001      	movs	r0, #1
    return tmpVal;
}
 8000fdc:	4770      	bx	lr

08000fde <_ZN8IcHausMu16getLastByteValueEv>:

unsigned char IcHausMu::getLastByteValue(void) {
    return _tmpBuff64.bytes_le.lsb;
}
 8000fde:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN8IcHausMu14_readRegStatusEv>:
    return retVal;
}

// ############################### Private Methods ###############################

fctStatus IcHausMu::_readRegStatus(void) {
 8000fe4:	b500      	push	{lr}
 8000fe6:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {STATUS_DATA, 0x00};
 8000fe8:	23ad      	movs	r3, #173	; 0xad
 8000fea:	f8ad 3004 	strh.w	r3, [sp, #4]

    // Do the transfert and get the STATUS register
    _streamFct_ptr((unsigned char*)&internalBuffer, (unsigned char*)&internalBuffer, 2);
 8000fee:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	a901      	add	r1, sp, #4
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4798      	blx	r3

    if (STATUS_DATA == internalBuffer[0]) {
 8000ffa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ffe:	2bad      	cmp	r3, #173	; 0xad
 8001000:	d003      	beq.n	800100a <_ZN8IcHausMu14_readRegStatusEv+0x26>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
       else if (0x00 == internalBuffer[1]) {retVal = RET_E_NOK;}
       else { /* data is valid. retVal=RET_OK */ }
    }
    else {
        retVal = RET_E_OPCODE;
 8001002:	2005      	movs	r0, #5
    }
    return retVal;
}
 8001004:	b003      	add	sp, #12
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 800100a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800100e:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8001012:	2a00      	cmp	r2, #0
 8001014:	db08      	blt.n	8001028 <_ZN8IcHausMu14_readRegStatusEv+0x44>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 8001016:	2b07      	cmp	r3, #7
 8001018:	d808      	bhi.n	800102c <_ZN8IcHausMu14_readRegStatusEv+0x48>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 800101a:	2b03      	cmp	r3, #3
 800101c:	d808      	bhi.n	8001030 <_ZN8IcHausMu14_readRegStatusEv+0x4c>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 800101e:	2b01      	cmp	r3, #1
 8001020:	d808      	bhi.n	8001034 <_ZN8IcHausMu14_readRegStatusEv+0x50>
       else if (0x00 == internalBuffer[1]) {retVal = RET_E_NOK;}
 8001022:	b14b      	cbz	r3, 8001038 <_ZN8IcHausMu14_readRegStatusEv+0x54>
    fctStatus retVal = RET_OK;
 8001024:	2000      	movs	r0, #0
 8001026:	e7ed      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 8001028:	2001      	movs	r0, #1
 800102a:	e7eb      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 800102c:	2004      	movs	r0, #4
 800102e:	e7e9      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 8001030:	2003      	movs	r0, #3
 8001032:	e7e7      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 8001034:	2002      	movs	r0, #2
 8001036:	e7e5      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>
       else if (0x00 == internalBuffer[1]) {retVal = RET_E_NOK;}
 8001038:	2001      	movs	r0, #1
 800103a:	e7e3      	b.n	8001004 <_ZN8IcHausMu14_readRegStatusEv+0x20>

0800103c <_ZN8IcHausMu13_readRegisterEhjPh>:

fctStatus IcHausMu::_readRegister(const unsigned char registerToRead, const unsigned int bytesToRead, unsigned char* buffPtr) {
 800103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001040:	b082      	sub	sp, #8
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 8001042:	2500      	movs	r5, #0
 8001044:	f8ad 5004 	strh.w	r5, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 8001048:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 800104c:	bb85      	cbnz	r5, 80010b0 <_ZN8IcHausMu13_readRegisterEhjPh+0x74>
 800104e:	4604      	mov	r4, r0
 8001050:	4688      	mov	r8, r1
 8001052:	4617      	mov	r7, r2
 8001054:	461e      	mov	r6, r3
 8001056:	b35b      	cbz	r3, 80010b0 <_ZN8IcHausMu13_readRegisterEhjPh+0x74>
        // select the device
        _csFct_ptr(true);
 8001058:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800105c:	2001      	movs	r0, #1
 800105e:	4798      	blx	r3

        // send the read command with the register address to read:
        internalBuffer[0] = READ_REG;
 8001060:	2397      	movs	r3, #151	; 0x97
 8001062:	f88d 3004 	strb.w	r3, [sp, #4]
        internalBuffer[1] = registerToRead;
 8001066:	f88d 8005 	strb.w	r8, [sp, #5]
        _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 800106a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800106e:	2202      	movs	r2, #2
 8001070:	a901      	add	r1, sp, #4
 8001072:	4608      	mov	r0, r1
 8001074:	4798      	blx	r3
        // Check if the register read command has been sent as expected
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 8001076:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800107a:	2b97      	cmp	r3, #151	; 0x97
 800107c:	d01c      	beq.n	80010b8 <_ZN8IcHausMu13_readRegisterEhjPh+0x7c>
            retVal = RET_E_OPCODE;
 800107e:	2505      	movs	r5, #5
        }

        // unselect the device
        _csFct_ptr(false);
 8001080:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001084:	2000      	movs	r0, #0
 8001086:	4798      	blx	r3

        if (RET_OK == retVal) {
 8001088:	b995      	cbnz	r5, 80010b0 <_ZN8IcHausMu13_readRegisterEhjPh+0x74>
            // select the device
            _csFct_ptr(true);
 800108a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800108e:	2001      	movs	r0, #1
 8001090:	4798      	blx	r3

            retVal = _readRegStatus();    // same function is used to read status and data
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff ffa6 	bl	8000fe4 <_ZN8IcHausMu14_readRegStatusEv>
            if (RET_OK == retVal) {
 8001098:	4605      	mov	r5, r0
 800109a:	b928      	cbnz	r0, 80010a8 <_ZN8IcHausMu13_readRegisterEhjPh+0x6c>
                _streamFct_ptr(buffPtr, buffPtr, bytesToRead);
 800109c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80010a0:	463a      	mov	r2, r7
 80010a2:	4631      	mov	r1, r6
 80010a4:	4630      	mov	r0, r6
 80010a6:	4798      	blx	r3
            }

            // unselect the device
            _csFct_ptr(false);
 80010a8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80010ac:	2000      	movs	r0, #0
 80010ae:	4798      	blx	r3
        retVal = _initStatus;
    }

    // return the function status:
    return retVal;
}
 80010b0:	4628      	mov	r0, r5
 80010b2:	b002      	add	sp, #8
 80010b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 80010b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010bc:	4543      	cmp	r3, r8
 80010be:	d0df      	beq.n	8001080 <_ZN8IcHausMu13_readRegisterEhjPh+0x44>
            retVal = RET_E_OPCODE;
 80010c0:	2505      	movs	r5, #5
 80010c2:	e7dd      	b.n	8001080 <_ZN8IcHausMu13_readRegisterEhjPh+0x44>

080010c4 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::readIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 80010c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c8:	4606      	mov	r6, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4617      	mov	r7, r2
    regSize = icMuRegSize(reg);
 80010ce:	f7ff ff79 	bl	8000fc4 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 80010d2:	4605      	mov	r5, r0
    if (1 < regSize) {
 80010d4:	2801      	cmp	r0, #1
 80010d6:	d901      	bls.n	80010dc <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x18>
        tmpRegAddr = reg+1;
 80010d8:	3401      	adds	r4, #1
 80010da:	b2e4      	uxtb	r4, r4
    retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 80010dc:	46a0      	mov	r8, r4
 80010de:	1931      	adds	r1, r6, r4
 80010e0:	463b      	mov	r3, r7
 80010e2:	462a      	mov	r2, r5
 80010e4:	7849      	ldrb	r1, [r1, #1]
 80010e6:	4630      	mov	r0, r6
 80010e8:	f7ff ffa8 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
    if (1 < regSize) {
 80010ec:	2d01      	cmp	r5, #1
 80010ee:	d908      	bls.n	8001102 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x3e>
        regSize--;
 80010f0:	3d01      	subs	r5, #1
 80010f2:	b2ed      	uxtb	r5, r5
        *(buffPtr->tab+regSize) &= _icMuRegisterMask[tmpRegAddr+regSize];
 80010f4:	442c      	add	r4, r5
 80010f6:	4434      	add	r4, r6
 80010f8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80010fc:	5d7a      	ldrb	r2, [r7, r5]
 80010fe:	4013      	ands	r3, r2
 8001100:	557b      	strb	r3, [r7, r5]
    *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 8001102:	4446      	add	r6, r8
 8001104:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
 8001108:	783a      	ldrb	r2, [r7, #0]
 800110a:	4013      	ands	r3, r2
 800110c:	703b      	strb	r3, [r7, #0]
}
 800110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001112 <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>:
fctStatus IcHausMu::readIcMuRegister(const icMuRegister_t reg) {
 8001112:	b508      	push	{r3, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 800111a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    retVal = readIcMuRegister_leu(reg, &_tmpBuff64);
 800111e:	f500 7280 	add.w	r2, r0, #256	; 0x100
 8001122:	f7ff ffcf 	bl	80010c4 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 8001126:	bd08      	pop	{r3, pc}

08001128 <_ZN8IcHausMu4initEv>:
fctStatus IcHausMu::init(void) {
 8001128:	b510      	push	{r4, lr}
 800112a:	4604      	mov	r4, r0
    if (NULL!=_csFct_ptr && NULL!=_streamFct_ptr) {
 800112c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001130:	b133      	cbz	r3, 8001140 <_ZN8IcHausMu4initEv+0x18>
 8001132:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8001136:	b11b      	cbz	r3, 8001140 <_ZN8IcHausMu4initEv+0x18>
        _initStatus = RET_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
 800113e:	e002      	b.n	8001146 <_ZN8IcHausMu4initEv+0x1e>
        _initStatus = RET_E_NULLPTR;
 8001140:	2309      	movs	r3, #9
 8001142:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
    if (RET_OK == _initStatus) {
 8001146:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 800114a:	b17b      	cbz	r3, 800116c <_ZN8IcHausMu4initEv+0x44>
    if (RET_OK == _initStatus) {
 800114c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8001150:	b94b      	cbnz	r3, 8001166 <_ZN8IcHausMu4initEv+0x3e>
        if(getLastByteValue() != _hardRev) {    // compare the value read.
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff ff43 	bl	8000fde <_ZN8IcHausMu16getLastByteValueEv>
 8001158:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 800115c:	4298      	cmp	r0, r3
 800115e:	d002      	beq.n	8001166 <_ZN8IcHausMu4initEv+0x3e>
            _initStatus = RET_E_DATA;
 8001160:	2307      	movs	r3, #7
 8001162:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
}
 8001166:	f894 010d 	ldrb.w	r0, [r4, #269]	; 0x10d
 800116a:	bd10      	pop	{r4, pc}
        _initStatus = readIcMuRegister(HARD_REV);
 800116c:	211c      	movs	r1, #28
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ffcf 	bl	8001112 <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>
 8001174:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
 8001178:	e7e8      	b.n	800114c <_ZN8IcHausMu4initEv+0x24>

0800117a <_ZN8IcHausMu14_writeRegisterEhjPh>:

fctStatus IcHausMu::_writeRegister(const unsigned char registerToWrite, const unsigned int bytesToWrite, unsigned char* buffPtr) {
 800117a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800117e:	b082      	sub	sp, #8
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 8001180:	2500      	movs	r5, #0
 8001182:	f8ad 5004 	strh.w	r5, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 8001186:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 800118a:	b9e5      	cbnz	r5, 80011c6 <_ZN8IcHausMu14_writeRegisterEhjPh+0x4c>
 800118c:	4604      	mov	r4, r0
 800118e:	4688      	mov	r8, r1
 8001190:	4617      	mov	r7, r2
 8001192:	461e      	mov	r6, r3
 8001194:	b1bb      	cbz	r3, 80011c6 <_ZN8IcHausMu14_writeRegisterEhjPh+0x4c>
      // select the device
      _csFct_ptr(true);
 8001196:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800119a:	2001      	movs	r0, #1
 800119c:	4798      	blx	r3

      // send the read command with the register address to read:
      internalBuffer[0] = WRITE_REG;
 800119e:	23d2      	movs	r3, #210	; 0xd2
 80011a0:	f88d 3004 	strb.w	r3, [sp, #4]
      internalBuffer[1] = registerToWrite;
 80011a4:	f88d 8005 	strb.w	r8, [sp, #5]

      _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 80011a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011ac:	2202      	movs	r2, #2
 80011ae:	a901      	add	r1, sp, #4
 80011b0:	4608      	mov	r0, r1
 80011b2:	4798      	blx	r3
      // Check if the register write command has been sent as expected
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011b8:	2bd2      	cmp	r3, #210	; 0xd2
 80011ba:	d008      	beq.n	80011ce <_ZN8IcHausMu14_writeRegisterEhjPh+0x54>
        retVal = RET_E_OPCODE;
 80011bc:	2505      	movs	r5, #5
          _csFct_ptr(true);
          retVal = _readRegStatus();          // check the validity of the writing operation
      }

      // unselect the device
      _csFct_ptr(false);
 80011be:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011c2:	2000      	movs	r0, #0
 80011c4:	4798      	blx	r3
      retVal = _initStatus;
    }

    // return the result:
    return retVal;
}
 80011c6:	4628      	mov	r0, r5
 80011c8:	b002      	add	sp, #8
 80011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011d2:	4543      	cmp	r3, r8
 80011d4:	d001      	beq.n	80011da <_ZN8IcHausMu14_writeRegisterEhjPh+0x60>
        retVal = RET_E_OPCODE;
 80011d6:	2505      	movs	r5, #5
 80011d8:	e7f1      	b.n	80011be <_ZN8IcHausMu14_writeRegisterEhjPh+0x44>
          _streamFct_ptr(buffPtr, buffPtr, bytesToWrite);
 80011da:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011de:	463a      	mov	r2, r7
 80011e0:	4631      	mov	r1, r6
 80011e2:	4630      	mov	r0, r6
 80011e4:	4798      	blx	r3
          _csFct_ptr(false);
 80011e6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011ea:	2000      	movs	r0, #0
 80011ec:	4798      	blx	r3
          _csFct_ptr(true);
 80011ee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011f2:	2001      	movs	r0, #1
 80011f4:	4798      	blx	r3
          retVal = _readRegStatus();          // check the validity of the writing operation
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fef4 	bl	8000fe4 <_ZN8IcHausMu14_readRegStatusEv>
 80011fc:	4605      	mov	r5, r0
 80011fe:	e7de      	b.n	80011be <_ZN8IcHausMu14_writeRegisterEhjPh+0x44>

08001200 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::writeIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 8001200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	4606      	mov	r6, r0
 8001208:	460c      	mov	r4, r1
 800120a:	4615      	mov	r5, r2
    unsigned char tmpData = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	f88d 3007 	strb.w	r3, [sp, #7]
    regSize = icMuRegSize(reg);
 8001212:	f7ff fed7 	bl	8000fc4 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 8001216:	4607      	mov	r7, r0
    if (1 < regSize) {
 8001218:	2801      	cmp	r0, #1
 800121a:	d920      	bls.n	800125e <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x5e>
        tmpRegAddr = reg+regSize;
 800121c:	eb04 0800 	add.w	r8, r4, r0
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 8001220:	fa56 f888 	uxtab	r8, r6, r8
 8001224:	f10d 0307 	add.w	r3, sp, #7
 8001228:	2201      	movs	r2, #1
 800122a:	f898 1001 	ldrb.w	r1, [r8, #1]
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff ff04 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
 8001234:	4601      	mov	r1, r0
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 8001236:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 800123a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800123e:	ea22 0203 	bic.w	r2, r2, r3
 8001242:	f88d 2007 	strb.w	r2, [sp, #7]
        *(buffPtr->tab+regSize-1) &= _icMuRegisterMask[tmpRegAddr];
 8001246:	1e7a      	subs	r2, r7, #1
 8001248:	5ca8      	ldrb	r0, [r5, r2]
 800124a:	4003      	ands	r3, r0
 800124c:	54ab      	strb	r3, [r5, r2]
        *(buffPtr->tab+regSize-1) |= tmpData;
 800124e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001252:	4303      	orrs	r3, r0
 8001254:	54ab      	strb	r3, [r5, r2]
        tmpRegAddr = reg+1;
 8001256:	3401      	adds	r4, #1
 8001258:	b2e4      	uxtb	r4, r4
    if (RET_OK == retVal) {
 800125a:	4608      	mov	r0, r1
 800125c:	b9d9      	cbnz	r1, 8001296 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x96>
        tmpData = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	f88d 3007 	strb.w	r3, [sp, #7]
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 8001264:	eb06 0804 	add.w	r8, r6, r4
 8001268:	f10d 0307 	add.w	r3, sp, #7
 800126c:	2201      	movs	r2, #1
 800126e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff fee2 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 8001278:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 800127c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001280:	ea22 0203 	bic.w	r2, r2, r3
 8001284:	f88d 2007 	strb.w	r2, [sp, #7]
        *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 8001288:	782a      	ldrb	r2, [r5, #0]
 800128a:	4013      	ands	r3, r2
 800128c:	702b      	strb	r3, [r5, #0]
        *(buffPtr->tab) |= tmpData;
 800128e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001292:	4313      	orrs	r3, r2
 8001294:	702b      	strb	r3, [r5, #0]
    if (RET_OK == retVal) {
 8001296:	b110      	cbz	r0, 800129e <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x9e>
}
 8001298:	b002      	add	sp, #8
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        retVal = _writeRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 800129e:	4434      	add	r4, r6
 80012a0:	462b      	mov	r3, r5
 80012a2:	463a      	mov	r2, r7
 80012a4:	7861      	ldrb	r1, [r4, #1]
 80012a6:	4630      	mov	r0, r6
 80012a8:	f7ff ff67 	bl	800117a <_ZN8IcHausMu14_writeRegisterEhjPh>
 80012ac:	e7f4      	b.n	8001298 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x98>

080012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>:
fctStatus IcHausMu::writeIcMuRegister(const icMuRegister_t reg, const unsigned char val) {
 80012ae:	b510      	push	{r4, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 80012b0:	2400      	movs	r4, #0
 80012b2:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 80012b6:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
    _tmpBuff64.bytes_le.lsb = val;
 80012ba:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
    return writeIcMuRegister_leu(reg, &_tmpBuff64);
 80012be:	f500 7280 	add.w	r2, r0, #256	; 0x100
 80012c2:	f7ff ff9d 	bl	8001200 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <_ZN8IcHausMu16setAutomaticGainEh>:
fctStatus IcHausMu::setAutomaticGain(const unsigned char autoGainEnabled) {
 80012c8:	b508      	push	{r3, lr}
    if (0x00 != autoGainEnabled) {tmpBuff = 0x80;}
 80012ca:	460a      	mov	r2, r1
 80012cc:	b101      	cbz	r1, 80012d0 <_ZN8IcHausMu16setAutomaticGainEh+0x8>
 80012ce:	2280      	movs	r2, #128	; 0x80
    retVal = writeIcMuRegister(ENAC, tmpBuff);
 80012d0:	2101      	movs	r1, #1
 80012d2:	f7ff ffec 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
}
 80012d6:	bd08      	pop	{r3, pc}

080012d8 <_ZN8IcHausMu14changeSdadModeEhhh>:
    if(3>stMode && 38>sdadMsb && 12<sdadMsb && 16>sdadLsb && sdadLsb<sdadMsb) {
 80012d8:	2902      	cmp	r1, #2
 80012da:	d83b      	bhi.n	8001354 <_ZN8IcHausMu14changeSdadModeEhhh+0x7c>
fctStatus IcHausMu::changeSdadMode(unsigned char stMode, unsigned char sdadMsb, unsigned char sdadLsb) {
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	4605      	mov	r5, r0
 80012e0:	4614      	mov	r4, r2
 80012e2:	461e      	mov	r6, r3
    if(3>stMode && 38>sdadMsb && 12<sdadMsb && 16>sdadLsb && sdadLsb<sdadMsb) {
 80012e4:	2a25      	cmp	r2, #37	; 0x25
 80012e6:	d837      	bhi.n	8001358 <_ZN8IcHausMu14changeSdadModeEhhh+0x80>
 80012e8:	2a0c      	cmp	r2, #12
 80012ea:	d937      	bls.n	800135c <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d837      	bhi.n	8001360 <_ZN8IcHausMu14changeSdadModeEhhh+0x88>
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d801      	bhi.n	80012f8 <_ZN8IcHausMu14changeSdadModeEhhh+0x20>
        retVal = RET_E_PARAMETER;
 80012f4:	2006      	movs	r0, #6
 80012f6:	e030      	b.n	800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
        retVal = writeIcMuRegister(MODE_ST, stMode<<4);
 80012f8:	0109      	lsls	r1, r1, #4
 80012fa:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
 80012fe:	2124      	movs	r1, #36	; 0x24
 8001300:	f7ff ffd5 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
        if (RET_OK == retVal) {
 8001304:	b158      	cbz	r0, 800131e <_ZN8IcHausMu14changeSdadModeEhhh+0x46>
        if (RET_OK == retVal) {
 8001306:	b190      	cbz	r0, 800132e <_ZN8IcHausMu14changeSdadModeEhhh+0x56>
        if (RET_OK == retVal) {
 8001308:	bb38      	cbnz	r0, 800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
            sdadMsb -= 13;                      // offset defined in datasheet
 800130a:	3c0d      	subs	r4, #13
 800130c:	b2e4      	uxtb	r4, r4
            retVal = writeIcMuRegister(OUT_MSB, sdadMsb);
 800130e:	4622      	mov	r2, r4
 8001310:	2121      	movs	r1, #33	; 0x21
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff ffcb 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
            _sdadOutMsb = sdadMsb;
 8001318:	f885 410a 	strb.w	r4, [r5, #266]	; 0x10a
 800131c:	e01d      	b.n	800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
            retVal = writeIcMuRegister(OUT_LSB, sdadLsb);
 800131e:	4632      	mov	r2, r6
 8001320:	2122      	movs	r1, #34	; 0x22
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff ffc3 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
            _sdadOutLsb = sdadLsb;
 8001328:	f885 610b 	strb.w	r6, [r5, #267]	; 0x10b
 800132c:	e7eb      	b.n	8001306 <_ZN8IcHausMu14changeSdadModeEhhh+0x2e>
            sdadLsb = 1+sdadMsb-sdadLsb;        // reuse sdadLsb variable for SDAD length and OUT_ZERO computing
 800132e:	1ba3      	subs	r3, r4, r6
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3301      	adds	r3, #1
 8001334:	b2db      	uxtb	r3, r3
            _sdadOutSize = (sdadLsb+7)/8;       // SDAD length in bytes
 8001336:	3307      	adds	r3, #7
 8001338:	10db      	asrs	r3, r3, #3
 800133a:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            sdadLsb = 7-(0x07&(sdadLsb-1));     // nb of zeros to reach a complete byte format for SDAD
 800133e:	1b32      	subs	r2, r6, r4
 8001340:	3a01      	subs	r2, #1
 8001342:	b2d2      	uxtb	r2, r2
            retVal = writeIcMuRegister(OUT_ZERO, sdadLsb<<5);   // alignment with datasheet
 8001344:	0152      	lsls	r2, r2, #5
 8001346:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800134a:	2123      	movs	r1, #35	; 0x23
 800134c:	4628      	mov	r0, r5
 800134e:	f7ff ffae 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001352:	e7d9      	b.n	8001308 <_ZN8IcHausMu14changeSdadModeEhhh+0x30>
        retVal = RET_E_PARAMETER;
 8001354:	2006      	movs	r0, #6
}
 8001356:	4770      	bx	lr
        retVal = RET_E_PARAMETER;
 8001358:	2006      	movs	r0, #6
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}
        retVal = RET_E_PARAMETER;
 800135c:	2006      	movs	r0, #6
 800135e:	e7fc      	b.n	800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
 8001360:	2006      	movs	r0, #6
 8001362:	e7fa      	b.n	800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x82>

08001364 <_Z8ChangeCSb>:
	HAL_SPI_TransmitReceive_DMA(hspi_enc, spi_tx, spi_rx, 3);
}

// Function to select the slave (in this case ic-MU)
void ChangeCS(bool state)
{
 8001364:	b508      	push	{r3, lr}
  if(state)
 8001366:	b128      	cbz	r0, 8001374 <_Z8ChangeCSb+0x10>
	  HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2104      	movs	r1, #4
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <_Z8ChangeCSb+0x1c>)
 800136e:	f000 ffc7 	bl	8002300 <HAL_GPIO_WritePin>
  else
	  HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_SET);
}
 8001372:	bd08      	pop	{r3, pc}
	  HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2104      	movs	r1, #4
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <_Z8ChangeCSb+0x1c>)
 800137a:	f000 ffc1 	bl	8002300 <HAL_GPIO_WritePin>
}
 800137e:	e7f8      	b.n	8001372 <_Z8ChangeCSb+0xe>
 8001380:	40020c00 	.word	0x40020c00

08001384 <_Z12TransferIcMUPhS_j>:

// Function to exchange data the slave (in this case ic-MU)
void TransferIcMU(unsigned char* const txBuffer, unsigned char* rxBuffer, const unsigned int bufferLen)
{
 8001384:	b500      	push	{lr}
 8001386:	b083      	sub	sp, #12
  //spiExchange(&SPID1, bufferLen, txBuffer, rxBuffer);
  HAL_SPI_TransmitReceive(hspi_enc, txBuffer, rxBuffer, bufferLen, 1);
 8001388:	2301      	movs	r3, #1
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	b293      	uxth	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	4601      	mov	r1, r0
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <_Z12TransferIcMUPhS_j+0x1c>)
 8001394:	6800      	ldr	r0, [r0, #0]
 8001396:	f001 fbff 	bl	8002b98 <HAL_SPI_TransmitReceive>

}
 800139a:	b003      	add	sp, #12
 800139c:	f85d fb04 	ldr.w	pc, [sp], #4
 80013a0:	200001fc 	.word	0x200001fc

080013a4 <_Z41__static_initialization_and_destruction_0ii>:
 80013a4:	2801      	cmp	r0, #1
 80013a6:	d000      	beq.n	80013aa <_Z41__static_initialization_and_destruction_0ii+0x6>
 80013a8:	4770      	bx	lr
 80013aa:	b508      	push	{r3, lr}
 80013ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b0:	4299      	cmp	r1, r3
 80013b2:	d000      	beq.n	80013b6 <_Z41__static_initialization_and_destruction_0ii+0x12>
 80013b4:	bd08      	pop	{r3, pc}
IcHausMu ichausmu_enc(ICHAUSMU_HW_REV);
 80013b6:	2107      	movs	r1, #7
 80013b8:	4801      	ldr	r0, [pc, #4]	; (80013c0 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 80013ba:	f7ff fdcf 	bl	8000f5c <_ZN8IcHausMuC1Eh>
}
 80013be:	e7f9      	b.n	80013b4 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80013c0:	20000200 	.word	0x20000200

080013c4 <HAL_SPI_TxRxCpltCallback>:
{
 80013c4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2104      	movs	r1, #4
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_SPI_TxRxCpltCallback+0x20>)
 80013cc:	f000 ff98 	bl	8002300 <HAL_GPIO_WritePin>
	positionICMU = spi_rx[1] << 8;
 80013d0:	4905      	ldr	r1, [pc, #20]	; (80013e8 <HAL_SPI_TxRxCpltCallback+0x24>)
 80013d2:	784b      	ldrb	r3, [r1, #1]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_SPI_TxRxCpltCallback+0x28>)
 80013d8:	8013      	strh	r3, [r2, #0]
	positionICMU |= spi_rx[2];
 80013da:	7889      	ldrb	r1, [r1, #2]
 80013dc:	430b      	orrs	r3, r1
 80013de:	8013      	strh	r3, [r2, #0]
}
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	20000320 	.word	0x20000320
 80013ec:	2000031e 	.word	0x2000031e

080013f0 <_Z19encoder_init_ichausPh>:
void encoder_init_ichaus(uint8_t* init_seq_status){
 80013f0:	b530      	push	{r4, r5, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	4604      	mov	r4, r0
HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2104      	movs	r1, #4
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <_Z19encoder_init_ichausPh+0x6c>)
 80013fc:	f000 ff80 	bl	8002300 <HAL_GPIO_WritePin>
if (init_seq_status == NULL)
 8001400:	b324      	cbz	r4, 800144c <_Z19encoder_init_ichausPh+0x5c>
init_seq_status[0] = (uint8_t)ichausmu_enc.init();
 8001402:	4d17      	ldr	r5, [pc, #92]	; (8001460 <_Z19encoder_init_ichausPh+0x70>)
 8001404:	4628      	mov	r0, r5
 8001406:	f7ff fe8f 	bl	8001128 <_ZN8IcHausMu4initEv>
 800140a:	7020      	strb	r0, [r4, #0]
init_seq_status[1] = (uint8_t)ichausmu_enc.writeIcMuRegister(CIBM, 0x08);       // set bias current, Determined by firstTimeSetup()
 800140c:	2208      	movs	r2, #8
 800140e:	2100      	movs	r1, #0
 8001410:	4628      	mov	r0, r5
 8001412:	f7ff ff4c 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001416:	7060      	strb	r0, [r4, #1]
init_seq_status[2] = (uint8_t)ichausmu_enc.writeIcMuRegister(LIN, 0x00);       // set the target type as rotative
 8001418:	2200      	movs	r2, #0
 800141a:	2130      	movs	r1, #48	; 0x30
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff ff46 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001422:	70a0      	strb	r0, [r4, #2]
init_seq_status[3] = (uint8_t)ichausmu_enc.writeIcMuRegister(MPC, 0x06);       // magnetic target is a 32master/31Nonius period
 8001424:	2206      	movs	r2, #6
 8001426:	212f      	movs	r1, #47	; 0x2f
 8001428:	4628      	mov	r0, r5
 800142a:	f7ff ff40 	bl	80012ae <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 800142e:	70e0      	strb	r0, [r4, #3]
init_seq_status[4] = (uint8_t)ichausmu_enc.changeSdadMode(0x00, 18, 3);        // define the SDAD output
 8001430:	2303      	movs	r3, #3
 8001432:	2212      	movs	r2, #18
 8001434:	2100      	movs	r1, #0
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff ff4e 	bl	80012d8 <_ZN8IcHausMu14changeSdadModeEhhh>
 800143c:	7120      	strb	r0, [r4, #4]
init_seq_status[5] = (uint8_t)ichausmu_enc.setAutomaticGain(true);
 800143e:	2101      	movs	r1, #1
 8001440:	4628      	mov	r0, r5
 8001442:	f7ff ff41 	bl	80012c8 <_ZN8IcHausMu16setAutomaticGainEh>
 8001446:	7160      	strb	r0, [r4, #5]
}
 8001448:	b003      	add	sp, #12
 800144a:	bd30      	pop	{r4, r5, pc}
	      uint8_t init_seq_status[6] = {20,20,20,20,20,20};
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <_Z19encoder_init_ichausPh+0x74>)
 800144e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001452:	9000      	str	r0, [sp, #0]
 8001454:	f8ad 1004 	strh.w	r1, [sp, #4]
 8001458:	e7d3      	b.n	8001402 <_Z19encoder_init_ichausPh+0x12>
 800145a:	bf00      	nop
 800145c:	40020c00 	.word	0x40020c00
 8001460:	20000200 	.word	0x20000200
 8001464:	08006258 	.word	0x08006258

08001468 <_Z33trig_non_blocking_ichaus_pos_readv>:
void trig_non_blocking_ichaus_pos_read(){
 8001468:	b508      	push	{r3, lr}
	DWT_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f000 fb60 	bl	8001b30 <DWT_Delay>
	HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <_Z33trig_non_blocking_ichaus_pos_readv+0x24>)
 8001476:	f000 ff43 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(hspi_enc, spi_tx, spi_rx, 3);
 800147a:	2303      	movs	r3, #3
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <_Z33trig_non_blocking_ichaus_pos_readv+0x28>)
 800147e:	4905      	ldr	r1, [pc, #20]	; (8001494 <_Z33trig_non_blocking_ichaus_pos_readv+0x2c>)
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <_Z33trig_non_blocking_ichaus_pos_readv+0x30>)
 8001482:	6800      	ldr	r0, [r0, #0]
 8001484:	f001 fca4 	bl	8002dd0 <HAL_SPI_TransmitReceive_DMA>
}
 8001488:	bd08      	pop	{r3, pc}
 800148a:	bf00      	nop
 800148c:	40020c00 	.word	0x40020c00
 8001490:	20000320 	.word	0x20000320
 8001494:	20000000 	.word	0x20000000
 8001498:	200001fc 	.word	0x200001fc

0800149c <_Z16application_mainP19__SPI_HandleTypeDef>:
void application_main (SPI_HandleTypeDef *hspi){
 800149c:	b510      	push	{r4, lr}
 800149e:	4604      	mov	r4, r0
  DWT_Init();  // Init the Data Watchpoint and Trace Unit on TIM4 to enable delays in µs
 80014a0:	f000 fb2c 	bl	8001afc <DWT_Init>
  hspi_enc = hspi; // put hspi as global variable for external functions use
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <_Z16application_mainP19__SPI_HandleTypeDef+0x90>)
 80014a6:	601c      	str	r4, [r3, #0]
  ichausmu_enc.csFunctionAttach(ChangeCS);
 80014a8:	4c21      	ldr	r4, [pc, #132]	; (8001530 <_Z16application_mainP19__SPI_HandleTypeDef+0x94>)
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <_Z16application_mainP19__SPI_HandleTypeDef+0x98>)
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fd83 	bl	8000fb8 <_ZN8IcHausMu16csFunctionAttachEPFvbE>
  ichausmu_enc.streamFunctionAttach(TransferIcMU);
 80014b2:	4921      	ldr	r1, [pc, #132]	; (8001538 <_Z16application_mainP19__SPI_HandleTypeDef+0x9c>)
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fd82 	bl	8000fbe <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>
  printf("System Init");
 80014ba:	4820      	ldr	r0, [pc, #128]	; (800153c <_Z16application_mainP19__SPI_HandleTypeDef+0xa0>)
 80014bc:	f002 fcb8 	bl	8003e30 <iprintf>
  printf("IcMU Init\n");
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <_Z16application_mainP19__SPI_HandleTypeDef+0xa4>)
 80014c2:	f002 fd51 	bl	8003f68 <puts>
  encoder_init_ichaus(init_seq);
 80014c6:	481f      	ldr	r0, [pc, #124]	; (8001544 <_Z16application_mainP19__SPI_HandleTypeDef+0xa8>)
 80014c8:	f7ff ff92 	bl	80013f0 <_Z19encoder_init_ichausPh>
  for(unsigned int i = 0; i < sizeof(init_seq); i++)
 80014cc:	2400      	movs	r4, #0
 80014ce:	2c05      	cmp	r4, #5
 80014d0:	d806      	bhi.n	80014e0 <_Z16application_mainP19__SPI_HandleTypeDef+0x44>
        printf(" %d ,", init_seq[i]);
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <_Z16application_mainP19__SPI_HandleTypeDef+0xa8>)
 80014d4:	5d19      	ldrb	r1, [r3, r4]
 80014d6:	481c      	ldr	r0, [pc, #112]	; (8001548 <_Z16application_mainP19__SPI_HandleTypeDef+0xac>)
 80014d8:	f002 fcaa 	bl	8003e30 <iprintf>
  for(unsigned int i = 0; i < sizeof(init_seq); i++)
 80014dc:	3401      	adds	r4, #1
 80014de:	e7f6      	b.n	80014ce <_Z16application_mainP19__SPI_HandleTypeDef+0x32>
  printf("\n");
 80014e0:	200a      	movs	r0, #10
 80014e2:	f002 fcbd 	bl	8003e60 <putchar>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014e6:	2120      	movs	r1, #32
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <_Z16application_mainP19__SPI_HandleTypeDef+0xb0>)
 80014ea:	f000 ff0f 	bl	800230c <HAL_GPIO_TogglePin>
	  trig_non_blocking_ichaus_pos_read();
 80014ee:	f7ff ffbb 	bl	8001468 <_Z33trig_non_blocking_ichaus_pos_readv>
	  DWT_Delay(100); //Let the time to read the latest info | Can be removed when further code will be added
 80014f2:	2064      	movs	r0, #100	; 0x64
 80014f4:	f000 fb1c 	bl	8001b30 <DWT_Delay>
	  float posDeg = positionICMU*360/65536.0;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_Z16application_mainP19__SPI_HandleTypeDef+0xb4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001500:	fb03 f000 	mul.w	r0, r3, r0
 8001504:	f7ff f816 	bl	8000534 <__aeabi_i2d>
 8001508:	2200      	movs	r2, #0
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <_Z16application_mainP19__SPI_HandleTypeDef+0xb8>)
 800150c:	f7ff f87c 	bl	8000608 <__aeabi_dmul>
 8001510:	f7ff fb52 	bl	8000bb8 <__aeabi_d2f>
	  printf("%.3f \r\n", posDeg);//, status);
 8001514:	f7ff f820 	bl	8000558 <__aeabi_f2d>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <_Z16application_mainP19__SPI_HandleTypeDef+0xbc>)
 800151e:	f002 fc87 	bl	8003e30 <iprintf>
	  HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f000 fb7a 	bl	8001c1c <HAL_Delay>
  while (1)
 8001528:	e7dd      	b.n	80014e6 <_Z16application_mainP19__SPI_HandleTypeDef+0x4a>
 800152a:	bf00      	nop
 800152c:	200001fc 	.word	0x200001fc
 8001530:	20000200 	.word	0x20000200
 8001534:	08001365 	.word	0x08001365
 8001538:	08001385 	.word	0x08001385
 800153c:	08006260 	.word	0x08006260
 8001540:	0800626c 	.word	0x0800626c
 8001544:	20000318 	.word	0x20000318
 8001548:	08006278 	.word	0x08006278
 800154c:	40020000 	.word	0x40020000
 8001550:	2000031e 	.word	0x2000031e
 8001554:	3ef00000 	.word	0x3ef00000
 8001558:	08006280 	.word	0x08006280

0800155c <_GLOBAL__sub_I_hspi_enc>:
}
 800155c:	b508      	push	{r3, lr}
 800155e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ff1e 	bl	80013a4 <_Z41__static_initialization_and_destruction_0ii>
 8001568:	bd08      	pop	{r3, pc}

0800156a <cpp_link>:
	extern "C"
	{
#endif

	void cpp_link (SPI_HandleTypeDef *hspi)
		{
 800156a:	b508      	push	{r3, lr}
		application_main(hspi);
 800156c:	f7ff ff96 	bl	800149c <_Z16application_mainP19__SPI_HandleTypeDef>
		}
 8001570:	bd08      	pop	{r3, pc}
	...

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001578:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	2400      	movs	r4, #0
 800157c:	9405      	str	r4, [sp, #20]
 800157e:	9406      	str	r4, [sp, #24]
 8001580:	9407      	str	r4, [sp, #28]
 8001582:	9408      	str	r4, [sp, #32]
 8001584:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	9400      	str	r4, [sp, #0]
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <MX_GPIO_Init+0xf8>)
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158c:	f042 0204 	orr.w	r2, r2, #4
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f002 0204 	and.w	r2, r2, #4
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159c:	9401      	str	r4, [sp, #4]
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015ac:	9201      	str	r2, [sp, #4]
 80015ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	9402      	str	r4, [sp, #8]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015bc:	f002 0201 	and.w	r2, r2, #1
 80015c0:	9202      	str	r2, [sp, #8]
 80015c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	9403      	str	r4, [sp, #12]
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	f042 0202 	orr.w	r2, r2, #2
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
 80015ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d0:	f002 0202 	and.w	r2, r2, #2
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	9404      	str	r4, [sp, #16]
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	f042 0208 	orr.w	r2, r2, #8
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001680 <MX_GPIO_Init+0x10c>
 80015f0:	4622      	mov	r2, r4
 80015f2:	2120      	movs	r1, #32
 80015f4:	4640      	mov	r0, r8
 80015f6:	f000 fe83 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_AS5048_CS_GPIO_Port, SPI_AS5048_CS_Pin, GPIO_PIN_RESET);
 80015fa:	4f1d      	ldr	r7, [pc, #116]	; (8001670 <MX_GPIO_Init+0xfc>)
 80015fc:	4622      	mov	r2, r4
 80015fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001602:	4638      	mov	r0, r7
 8001604:	f000 fe7c 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_ICMU_CS_GPIO_Port, SPI_ICMU_CS_Pin, GPIO_PIN_RESET);
 8001608:	4e1a      	ldr	r6, [pc, #104]	; (8001674 <MX_GPIO_Init+0x100>)
 800160a:	4622      	mov	r2, r4
 800160c:	2104      	movs	r1, #4
 800160e:	4630      	mov	r0, r6
 8001610:	f000 fe76 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_GPIO_Init+0x104>)
 800161c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001620:	a905      	add	r1, sp, #20
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <MX_GPIO_Init+0x108>)
 8001624:	f000 fd96 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2501      	movs	r5, #1
 800162e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001634:	a905      	add	r1, sp, #20
 8001636:	4640      	mov	r0, r8
 8001638:	f000 fd8c 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_AS5048_CS_Pin */
  GPIO_InitStruct.Pin = SPI_AS5048_CS_Pin;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001644:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI_AS5048_CS_GPIO_Port, &GPIO_InitStruct);
 800164a:	a905      	add	r1, sp, #20
 800164c:	4638      	mov	r0, r7
 800164e:	f000 fd81 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_ICMU_CS_Pin */
  GPIO_InitStruct.Pin = SPI_ICMU_CS_Pin;
 8001652:	2304      	movs	r3, #4
 8001654:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_ICMU_CS_GPIO_Port, &GPIO_InitStruct);
 800165c:	a905      	add	r1, sp, #20
 800165e:	4630      	mov	r0, r6
 8001660:	f000 fd78 	bl	8002154 <HAL_GPIO_Init>

}
 8001664:	b00a      	add	sp, #40	; 0x28
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400
 8001674:	40020c00 	.word	0x40020c00
 8001678:	10210000 	.word	0x10210000
 800167c:	40020800 	.word	0x40020800
 8001680:	40020000 	.word	0x40020000

08001684 <MX_DMA_Init>:
{
 8001684:	b510      	push	{r4, lr}
 8001686:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001688:	2400      	movs	r4, #0
 800168a:	9401      	str	r4, [sp, #4]
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <MX_DMA_Init+0x40>)
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016a0:	4622      	mov	r2, r4
 80016a2:	4621      	mov	r1, r4
 80016a4:	200b      	movs	r0, #11
 80016a6:	f000 fadf 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016aa:	200b      	movs	r0, #11
 80016ac:	f000 fb14 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016b0:	4622      	mov	r2, r4
 80016b2:	4621      	mov	r1, r4
 80016b4:	2010      	movs	r0, #16
 80016b6:	f000 fad7 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016ba:	2010      	movs	r0, #16
 80016bc:	f000 fb0c 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
}
 80016c0:	b002      	add	sp, #8
 80016c2:	bd10      	pop	{r4, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_USART2_UART_Init>:
{
 80016c8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80016ca:	4808      	ldr	r0, [pc, #32]	; (80016ec <MX_USART2_UART_Init+0x24>)
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART2_UART_Init+0x28>)
 80016ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	2300      	movs	r3, #0
 80016d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016de:	220c      	movs	r2, #12
 80016e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	f001 fe59 	bl	800339c <HAL_UART_Init>
}
 80016ea:	bd08      	pop	{r3, pc}
 80016ec:	2000043c 	.word	0x2000043c
 80016f0:	40004400 	.word	0x40004400

080016f4 <MX_SPI3_Init>:
{
 80016f4:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_SPI3_Init+0x34>)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_SPI3_Init+0x38>)
 80016fa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001700:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	2300      	movs	r3, #0
 8001704:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001706:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001708:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001716:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001718:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800171c:	230a      	movs	r3, #10
 800171e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001720:	f001 f9fa 	bl	8002b18 <HAL_SPI_Init>
}
 8001724:	bd08      	pop	{r3, pc}
 8001726:	bf00      	nop
 8001728:	200003e4 	.word	0x200003e4
 800172c:	40003c00 	.word	0x40003c00

08001730 <__io_putchar>:
		{
 8001730:	b500      	push	{lr}
 8001732:	b083      	sub	sp, #12
 8001734:	9001      	str	r0, [sp, #4]
		 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	2201      	movs	r2, #1
 800173c:	a901      	add	r1, sp, #4
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <__io_putchar+0x1c>)
 8001740:	f001 fe5b 	bl	80033fa <HAL_UART_Transmit>
		}
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	b003      	add	sp, #12
 8001748:	f85d fb04 	ldr.w	pc, [sp], #4
 800174c:	2000043c 	.word	0x2000043c

08001750 <SystemClock_Config>:
{
 8001750:	b530      	push	{r4, r5, lr}
 8001752:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001754:	2230      	movs	r2, #48	; 0x30
 8001756:	2100      	movs	r1, #0
 8001758:	a808      	add	r0, sp, #32
 800175a:	f001 fef7 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175e:	2400      	movs	r4, #0
 8001760:	9403      	str	r4, [sp, #12]
 8001762:	9404      	str	r4, [sp, #16]
 8001764:	9405      	str	r4, [sp, #20]
 8001766:	9406      	str	r4, [sp, #24]
 8001768:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	9401      	str	r4, [sp, #4]
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <SystemClock_Config+0x8c>)
 800176e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001780:	9402      	str	r4, [sp, #8]
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <SystemClock_Config+0x90>)
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179a:	2502      	movs	r5, #2
 800179c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179e:	2301      	movs	r3, #1
 80017a0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a2:	2310      	movs	r3, #16
 80017a4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017aa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017b2:	2304      	movs	r3, #4
 80017b4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b6:	2307      	movs	r3, #7
 80017b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ba:	a808      	add	r0, sp, #32
 80017bc:	f000 fdb0 	bl	8002320 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ce:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d0:	4629      	mov	r1, r5
 80017d2:	a803      	add	r0, sp, #12
 80017d4:	f001 f804 	bl	80027e0 <HAL_RCC_ClockConfig>
}
 80017d8:	b015      	add	sp, #84	; 0x54
 80017da:	bd30      	pop	{r4, r5, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <main>:
{
 80017e4:	b508      	push	{r3, lr}
  HAL_Init();
 80017e6:	f000 f9ed 	bl	8001bc4 <HAL_Init>
  SystemClock_Config();
 80017ea:	f7ff ffb1 	bl	8001750 <SystemClock_Config>
  MX_GPIO_Init();
 80017ee:	f7ff fec1 	bl	8001574 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f7ff ff47 	bl	8001684 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017f6:	f7ff ff67 	bl	80016c8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80017fa:	f7ff ff7b 	bl	80016f4 <MX_SPI3_Init>
  cpp_link(&hspi3);
 80017fe:	4802      	ldr	r0, [pc, #8]	; (8001808 <main+0x24>)
 8001800:	f7ff feb3 	bl	800156a <cpp_link>
  while (1)
 8001804:	e7fe      	b.n	8001804 <main+0x20>
 8001806:	bf00      	nop
 8001808:	200003e4 	.word	0x200003e4

0800180c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800180c:	4770      	bx	lr
	...

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2100      	movs	r1, #0
 8001814:	9100      	str	r1, [sp, #0]
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_MspInit+0x34>)
 8001818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800181a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
 8001820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001822:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	9101      	str	r1, [sp, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	b002      	add	sp, #8
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b530      	push	{r4, r5, lr}
 800184a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	2300      	movs	r3, #0
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	9304      	str	r3, [sp, #16]
 8001852:	9305      	str	r3, [sp, #20]
 8001854:	9306      	str	r3, [sp, #24]
 8001856:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001858:	6802      	ldr	r2, [r0, #0]
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_SPI_MspInit+0xd8>)
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001860:	b009      	add	sp, #36	; 0x24
 8001862:	bd30      	pop	{r4, r5, pc}
 8001864:	4604      	mov	r4, r0
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001866:	2500      	movs	r5, #0
 8001868:	9501      	str	r5, [sp, #4]
 800186a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800186e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	9502      	str	r5, [sp, #8]
 8001882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001884:	f042 0204 	orr.w	r2, r2, #4
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001894:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018a2:	2306      	movs	r3, #6
 80018a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	a903      	add	r1, sp, #12
 80018a8:	481e      	ldr	r0, [pc, #120]	; (8001924 <HAL_SPI_MspInit+0xdc>)
 80018aa:	f000 fc53 	bl	8002154 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80018ae:	481e      	ldr	r0, [pc, #120]	; (8001928 <HAL_SPI_MspInit+0xe0>)
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_SPI_MspInit+0xe4>)
 80018b2:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80018b4:	6045      	str	r5, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b6:	6085      	str	r5, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	60c5      	str	r5, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	6103      	str	r3, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c0:	6145      	str	r5, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c2:	6185      	str	r5, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80018c4:	61c5      	str	r5, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	6205      	str	r5, [r0, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80018ca:	f000 faa7 	bl	8001e1c <HAL_DMA_Init>
 80018ce:	bb08      	cbnz	r0, 8001914 <HAL_SPI_MspInit+0xcc>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_SPI_MspInit+0xe0>)
 80018d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018d4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <HAL_SPI_MspInit+0xe8>)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_SPI_MspInit+0xec>)
 80018da:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80018dc:	2300      	movs	r3, #0
 80018de:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	6082      	str	r2, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ea:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ec:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ee:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80018f0:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f2:	6203      	str	r3, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80018f6:	f000 fa91 	bl	8001e1c <HAL_DMA_Init>
 80018fa:	b970      	cbnz	r0, 800191a <HAL_SPI_MspInit+0xd2>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_SPI_MspInit+0xe8>)
 80018fe:	64a3      	str	r3, [r4, #72]	; 0x48
 8001900:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	4611      	mov	r1, r2
 8001906:	2033      	movs	r0, #51	; 0x33
 8001908:	f000 f9ae 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800190c:	2033      	movs	r0, #51	; 0x33
 800190e:	f000 f9e3 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
}
 8001912:	e7a5      	b.n	8001860 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8001914:	f7ff ff7a 	bl	800180c <Error_Handler>
 8001918:	e7da      	b.n	80018d0 <HAL_SPI_MspInit+0x88>
      Error_Handler();
 800191a:	f7ff ff77 	bl	800180c <Error_Handler>
 800191e:	e7ed      	b.n	80018fc <HAL_SPI_MspInit+0xb4>
 8001920:	40003c00 	.word	0x40003c00
 8001924:	40020800 	.word	0x40020800
 8001928:	20000324 	.word	0x20000324
 800192c:	40026010 	.word	0x40026010
 8001930:	20000384 	.word	0x20000384
 8001934:	40026088 	.word	0x40026088

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b500      	push	{lr}
 800193a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	2300      	movs	r3, #0
 800193e:	9303      	str	r3, [sp, #12]
 8001940:	9304      	str	r3, [sp, #16]
 8001942:	9305      	str	r3, [sp, #20]
 8001944:	9306      	str	r3, [sp, #24]
 8001946:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001948:	6802      	ldr	r2, [r0, #0]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x64>)
 800194c:	429a      	cmp	r2, r3
 800194e:	d002      	beq.n	8001956 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001950:	b009      	add	sp, #36	; 0x24
 8001952:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	2100      	movs	r1, #0
 8001958:	9101      	str	r1, [sp, #4]
 800195a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800195e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001960:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800196c:	9201      	str	r2, [sp, #4]
 800196e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	9102      	str	r1, [sp, #8]
 8001972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001984:	230c      	movs	r3, #12
 8001986:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198c:	2307      	movs	r3, #7
 800198e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	a903      	add	r1, sp, #12
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <HAL_UART_MspInit+0x68>)
 8001994:	f000 fbde 	bl	8002154 <HAL_GPIO_Init>
}
 8001998:	e7da      	b.n	8001950 <HAL_UART_MspInit+0x18>
 800199a:	bf00      	nop
 800199c:	40004400 	.word	0x40004400
 80019a0:	40020000 	.word	0x40020000

080019a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019a4:	4770      	bx	lr

080019a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler>

080019a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <MemManage_Handler>

080019aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler>

080019ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler>

080019ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f91f 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bd08      	pop	{r3, pc}

080019bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80019be:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Stream0_IRQHandler+0xc>)
 80019c0:	f000 fada 	bl	8001f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019c4:	bd08      	pop	{r3, pc}
 80019c6:	bf00      	nop
 80019c8:	20000324 	.word	0x20000324

080019cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Stream5_IRQHandler+0xc>)
 80019d0:	f000 fad2 	bl	8001f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop
 80019d8:	20000384 	.word	0x20000384

080019dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <SPI3_IRQHandler+0xc>)
 80019e0:	f001 fb22 	bl	8003028 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80019e4:	bd08      	pop	{r3, pc}
 80019e6:	bf00      	nop
 80019e8:	200003e4 	.word	0x200003e4

080019ec <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019ec:	2001      	movs	r0, #1
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019f2:	f001 fd73 	bl	80034dc <__errno>
 80019f6:	2316      	movs	r3, #22
 80019f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80019fa:	f04f 30ff 	mov.w	r0, #4294967295
 80019fe:	bd08      	pop	{r3, pc}

08001a00 <_exit>:

void _exit (int status)
{
 8001a00:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001a02:	f04f 31ff 	mov.w	r1, #4294967295
 8001a06:	f7ff fff3 	bl	80019f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0xa>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2500      	movs	r5, #0
 8001a14:	e006      	b.n	8001a24 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001a22:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	42b5      	cmp	r5, r6
 8001a26:	dbf6      	blt.n	8001a16 <_read+0xa>
	}

return len;
}
 8001a28:	4630      	mov	r0, r6
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}

08001a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2500      	movs	r5, #0
 8001a34:	e004      	b.n	8001a40 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001a36:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a3a:	f7ff fe79 	bl	8001730 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	3501      	adds	r5, #1
 8001a40:	42b5      	cmp	r5, r6
 8001a42:	dbf8      	blt.n	8001a36 <_write+0xa>
	}
	return len;
}
 8001a44:	4630      	mov	r0, r6
 8001a46:	bd70      	pop	{r4, r5, r6, pc}

08001a48 <_close>:

int _close(int file)
{
	return -1;
}
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a52:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001a54:	2000      	movs	r0, #0
 8001a56:	4770      	bx	lr

08001a58 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	4770      	bx	lr

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <_sbrk+0x38>)
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <_sbrk+0x40>)
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	b140      	cbz	r0, 8001a80 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <_sbrk+0x40>)
 8001a70:	6800      	ldr	r0, [r0, #0]
 8001a72:	4403      	add	r3, r0
 8001a74:	1a52      	subs	r2, r2, r1
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d806      	bhi.n	8001a88 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <_sbrk+0x40>)
 8001a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001a7e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <_sbrk+0x40>)
 8001a82:	4c08      	ldr	r4, [pc, #32]	; (8001aa4 <_sbrk+0x44>)
 8001a84:	6004      	str	r4, [r0, #0]
 8001a86:	e7f2      	b.n	8001a6e <_sbrk+0xe>
    errno = ENOMEM;
 8001a88:	f001 fd28 	bl	80034dc <__errno>
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	e7f3      	b.n	8001a7e <_sbrk+0x1e>
 8001a96:	bf00      	nop
 8001a98:	20018000 	.word	0x20018000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	2000047c 	.word	0x2000047c
 8001aa4:	20000498 	.word	0x20000498

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aae:	e003      	b.n	8001ab8 <LoopCopyDataInit>

08001ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ab6:	3104      	adds	r1, #4

08001ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ac0:	d3f6      	bcc.n	8001ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac4:	e002      	b.n	8001acc <LoopFillZerobss>

08001ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac8:	f842 3b04 	str.w	r3, [r2], #4

08001acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ad0:	d3f9      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ad2:	f000 f843 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f001 fd07 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7ff fe83 	bl	80017e4 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ae4:	08006698 	.word	0x08006698
  ldr  r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001aec:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001af0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001af4:	20000494 	.word	0x20000494

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <DWT_Init+0x2c>)
 8001afe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001b02:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b06:	d10d      	bne.n	8001b24 <DWT_Init+0x28>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <DWT_Init+0x2c>)
 8001b0a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        DWT->CYCCNT = 0;
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <DWT_Init+0x30>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    }
}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	e0001000 	.word	0xe0001000

08001b30 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <DWT_Delay+0x20>)
 8001b32:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <DWT_Delay+0x24>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <DWT_Delay+0x28>)
 8001b3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001b3e:	0c9b      	lsrs	r3, r3, #18
 8001b40:	fb03 f000 	mul.w	r0, r3, r0

    while (DWT->CYCCNT - startTick < delayTicks);
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <DWT_Delay+0x20>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	4283      	cmp	r3, r0
 8001b4c:	d3fa      	bcc.n	8001b44 <DWT_Delay+0x14>
}
 8001b4e:	4770      	bx	lr
 8001b50:	e0001000 	.word	0xe0001000
 8001b54:	20000004 	.word	0x20000004
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SystemInit+0x18>)
 8001b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b62:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_InitTick+0x40>)
 8001b7e:	7818      	ldrb	r0, [r3, #0]
 8001b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b84:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_InitTick+0x44>)
 8001b8a:	6810      	ldr	r0, [r2, #0]
 8001b8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b90:	f000 f8b0 	bl	8001cf4 <HAL_SYSTICK_Config>
 8001b94:	b968      	cbnz	r0, 8001bb2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	2c0f      	cmp	r4, #15
 8001b98:	d901      	bls.n	8001b9e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	e00a      	b.n	8001bb4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	f000 f85f 	bl	8001c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_InitTick+0x48>)
 8001bac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001bb2:	2001      	movs	r0, #1
}
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <HAL_Init>:
{
 8001bc4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_Init+0x30>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bde:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f82f 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ffc6 	bl	8001b78 <HAL_InitTick>
  HAL_MspInit();
 8001bec:	f7ff fe10 	bl	8001810 <HAL_MspInit>
}
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	bd08      	pop	{r3, pc}
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_IncTick+0x10>)
 8001bfa:	6811      	ldr	r1, [r2, #0]
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_IncTick+0x14>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	440b      	add	r3, r1
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000480 	.word	0x20000480
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c10:	4b01      	ldr	r3, [pc, #4]	; (8001c18 <HAL_GetTick+0x8>)
 8001c12:	6818      	ldr	r0, [r3, #0]
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000480 	.word	0x20000480

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fff6 	bl	8001c10 <HAL_GetTick>
 8001c24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c2a:	d002      	beq.n	8001c32 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_Delay+0x24>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c32:	f7ff ffed 	bl	8001c10 <HAL_GetTick>
 8001c36:	1b40      	subs	r0, r0, r5
 8001c38:	42a0      	cmp	r0, r4
 8001c3a:	d3fa      	bcc.n	8001c32 <HAL_Delay+0x16>
  {
  }
}
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	0200      	lsls	r0, r0, #8
 8001c52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c56:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c60:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c68:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_NVIC_SetPriority+0x68>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c72:	f1c3 0c07 	rsb	ip, r3, #7
 8001c76:	f1bc 0f04 	cmp.w	ip, #4
 8001c7a:	bf28      	it	cs
 8001c7c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c80:	f103 0e04 	add.w	lr, r3, #4
 8001c84:	f1be 0f06 	cmp.w	lr, #6
 8001c88:	d918      	bls.n	8001cbc <HAL_NVIC_SetPriority+0x54>
 8001c8a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 3eff 	mov.w	lr, #4294967295
 8001c90:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001c94:	ea21 010c 	bic.w	r1, r1, ip
 8001c98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9a:	fa0e f303 	lsl.w	r3, lr, r3
 8001c9e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	db0b      	blt.n	8001cc0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	0109      	lsls	r1, r1, #4
 8001caa:	b2c9      	uxtb	r1, r1
 8001cac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001cb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001cb4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001cb8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e7e5      	b.n	8001c8c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	f000 000f 	and.w	r0, r0, #15
 8001cc4:	0109      	lsls	r1, r1, #4
 8001cc6:	b2c9      	uxtb	r1, r1
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_NVIC_SetPriority+0x6c>)
 8001cca:	5419      	strb	r1, [r3, r0]
 8001ccc:	e7f4      	b.n	8001cb8 <HAL_NVIC_SetPriority+0x50>
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	e000ed14 	.word	0xe000ed14

08001cd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	db07      	blt.n	8001cec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cdc:	f000 021f 	and.w	r2, r0, #31
 8001ce0:	0940      	lsrs	r0, r0, #5
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	4a02      	ldr	r2, [pc, #8]	; (8001cf0 <HAL_NVIC_EnableIRQ+0x18>)
 8001ce8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	3801      	subs	r0, #1
 8001cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cfa:	d20b      	bcs.n	8001d14 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_SYSTICK_Config+0x24>)
 8001d04:	21f0      	movs	r1, #240	; 0xf0
 8001d06:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	2207      	movs	r2, #7
 8001d10:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1e:	6805      	ldr	r5, [r0, #0]
 8001d20:	682c      	ldr	r4, [r5, #0]
 8001d22:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001d26:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d28:	6804      	ldr	r4, [r0, #0]
 8001d2a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d2c:	6883      	ldr	r3, [r0, #8]
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	d005      	beq.n	8001d3e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	60da      	str	r2, [r3, #12]
  }
}
 8001d3a:	bc30      	pop	{r4, r5}
 8001d3c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001d3e:	6803      	ldr	r3, [r0, #0]
 8001d40:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001d42:	6803      	ldr	r3, [r0, #0]
 8001d44:	60d9      	str	r1, [r3, #12]
 8001d46:	e7f8      	b.n	8001d3a <DMA_SetConfig+0x1e>

08001d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d48:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d4a:	6803      	ldr	r3, [r0, #0]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	3910      	subs	r1, #16
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d52:	fba2 4201 	umull	r4, r2, r2, r1
 8001d56:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d58:	4c0b      	ldr	r4, [pc, #44]	; (8001d88 <DMA_CalcBaseAndBitshift+0x40>)
 8001d5a:	5ca2      	ldrb	r2, [r4, r2]
 8001d5c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d5e:	295f      	cmp	r1, #95	; 0x5f
 8001d60:	d909      	bls.n	8001d76 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001d6e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d74:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	6583      	str	r3, [r0, #88]	; 0x58
 8001d80:	e7f5      	b.n	8001d6e <DMA_CalcBaseAndBitshift+0x26>
 8001d82:	bf00      	nop
 8001d84:	aaaaaaab 	.word	0xaaaaaaab
 8001d88:	080062a0 	.word	0x080062a0

08001d8c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	6982      	ldr	r2, [r0, #24]
 8001d90:	b992      	cbnz	r2, 8001db8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d00a      	beq.n	8001dac <DMA_CheckFifoParam+0x20>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d002      	beq.n	8001da0 <DMA_CheckFifoParam+0x14>
 8001d9a:	b10b      	cbz	r3, 8001da0 <DMA_CheckFifoParam+0x14>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001da2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001da6:	d128      	bne.n	8001dfa <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db2:	d024      	beq.n	8001dfe <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2000      	movs	r0, #0
 8001db6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001db8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001dbc:	d009      	beq.n	8001dd2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d925      	bls.n	8001e0e <DMA_CheckFifoParam+0x82>
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d125      	bne.n	8001e12 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dc8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001dcc:	d123      	bne.n	8001e16 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	4770      	bx	lr
    switch (tmp)
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d803      	bhi.n	8001dde <DMA_CheckFifoParam+0x52>
 8001dd6:	e8df f003 	tbb	[pc, r3]
 8001dda:	0414      	.short	0x0414
 8001ddc:	0a14      	.short	0x0a14
 8001dde:	2000      	movs	r0, #0
 8001de0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001de4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001de8:	d10d      	bne.n	8001e06 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2000      	movs	r0, #0
 8001dec:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df4:	d009      	beq.n	8001e0a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2000      	movs	r0, #0
 8001df8:	4770      	bx	lr
        status = HAL_ERROR;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	4770      	bx	lr
        status = HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	4770      	bx	lr
      status = HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	4770      	bx	lr
        status = HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	4770      	bx	lr
        status = HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	4770      	bx	lr
      status = HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	4770      	bx	lr
    switch (tmp)
 8001e12:	2000      	movs	r0, #0
 8001e14:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_DMA_Init>:
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fef6 	bl	8001c10 <HAL_GetTick>
  if(hdma == NULL)
 8001e24:	2c00      	cmp	r4, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_DMA_Init+0xc4>
 8001e28:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f012 0f01 	tst.w	r2, #1
 8001e48:	d00a      	beq.n	8001e60 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fee1 	bl	8001c10 <HAL_GetTick>
 8001e4e:	1b43      	subs	r3, r0, r5
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d9f5      	bls.n	8001e40 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e54:	2320      	movs	r3, #32
 8001e56:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001e60:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e62:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <HAL_DMA_Init+0xc8>)
 8001e64:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e66:	6861      	ldr	r1, [r4, #4]
 8001e68:	68a2      	ldr	r2, [r4, #8]
 8001e6a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e70:	6921      	ldr	r1, [r4, #16]
 8001e72:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e74:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	69a1      	ldr	r1, [r4, #24]
 8001e7a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e80:	6a21      	ldr	r1, [r4, #32]
 8001e82:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e84:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e88:	2904      	cmp	r1, #4
 8001e8a:	d01e      	beq.n	8001eca <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001e8c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001e8e:	6826      	ldr	r6, [r4, #0]
 8001e90:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e92:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e98:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d107      	bne.n	8001eae <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea4:	b11b      	cbz	r3, 8001eae <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff70 	bl	8001d8c <DMA_CheckFifoParam>
 8001eac:	b990      	cbnz	r0, 8001ed4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001eae:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff ff49 	bl	8001d48 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001eb8:	233f      	movs	r3, #63	; 0x3f
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ec8:	e7c9      	b.n	8001e5e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ecc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ece:	4301      	orrs	r1, r0
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	e7db      	b.n	8001e8c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001ede:	e7be      	b.n	8001e5e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7bc      	b.n	8001e5e <HAL_DMA_Init+0x42>
 8001ee4:	f010803f 	.word	0xf010803f

08001ee8 <HAL_DMA_Start_IT>:
{
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eec:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001eee:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001ef2:	2801      	cmp	r0, #1
 8001ef4:	d02b      	beq.n	8001f4e <HAL_DMA_Start_IT+0x66>
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001f00:	b2c0      	uxtb	r0, r0
 8001f02:	2801      	cmp	r0, #1
 8001f04:	d004      	beq.n	8001f10 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001f06:	2300      	movs	r3, #0
 8001f08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001f0c:	2002      	movs	r0, #2
}
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f10:	2002      	movs	r0, #2
 8001f12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f16:	2000      	movs	r0, #0
 8001f18:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fefe 	bl	8001d1c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f22:	233f      	movs	r3, #63	; 0x3f
 8001f24:	4093      	lsls	r3, r2
 8001f26:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	f043 0316 	orr.w	r3, r3, #22
 8001f30:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f34:	b123      	cbz	r3, 8001f40 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	6813      	ldr	r3, [r2, #0]
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e7df      	b.n	8001f0e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001f4e:	2002      	movs	r0, #2
 8001f50:	e7dd      	b.n	8001f0e <HAL_DMA_Start_IT+0x26>

08001f52 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
 8001f62:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f64:	2305      	movs	r3, #5
 8001f66:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001f6a:	6802      	ldr	r2, [r0, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f74:	2000      	movs	r0, #0
}
 8001f76:	4770      	bx	lr

08001f78 <HAL_DMA_IRQHandler>:
{
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_DMA_IRQHandler+0x1d4>)
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <HAL_DMA_IRQHandler+0x1d8>)
 8001f88:	fba3 3505 	umull	r3, r5, r3, r5
 8001f8c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001f90:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f92:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f94:	2308      	movs	r3, #8
 8001f96:	4093      	lsls	r3, r2
 8001f98:	4233      	tst	r3, r6
 8001f9a:	d010      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f012 0f04 	tst.w	r2, #4
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f022 0204 	bic.w	r2, r2, #4
 8001fac:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	4233      	tst	r3, r6
 8001fc6:	d009      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	6952      	ldr	r2, [r2, #20]
 8001fcc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fdc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fde:	2304      	movs	r3, #4
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	4233      	tst	r3, r6
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	f012 0f02 	tst.w	r2, #2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	4093      	lsls	r3, r2
 8002000:	4233      	tst	r3, r6
 8002002:	d024      	beq.n	800204e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	f012 0f08 	tst.w	r2, #8
 800200c:	d01f      	beq.n	800204e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002018:	d00d      	beq.n	8002036 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002020:	d104      	bne.n	800202c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002024:	b19b      	cbz	r3, 800204e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002026:	4620      	mov	r0, r4
 8002028:	4798      	blx	r3
 800202a:	e010      	b.n	800204e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800202c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800202e:	b173      	cbz	r3, 800204e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002030:	4620      	mov	r0, r4
 8002032:	4798      	blx	r3
 8002034:	e00b      	b.n	800204e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f412 7f80 	tst.w	r2, #256	; 0x100
 800203c:	d103      	bne.n	8002046 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f022 0208 	bic.w	r2, r2, #8
 8002044:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002048:	b10b      	cbz	r3, 800204e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800204a:	4620      	mov	r0, r4
 800204c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002050:	2320      	movs	r3, #32
 8002052:	4093      	lsls	r3, r2
 8002054:	4233      	tst	r3, r6
 8002056:	d055      	beq.n	8002104 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	f012 0f10 	tst.w	r2, #16
 8002060:	d050      	beq.n	8002104 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002062:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002064:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b05      	cmp	r3, #5
 800206c:	d00e      	beq.n	800208c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002076:	d033      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800207e:	d12a      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002080:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03e      	beq.n	8002104 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002086:	4620      	mov	r0, r4
 8002088:	4798      	blx	r3
 800208a:	e03b      	b.n	8002104 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f023 0316 	bic.w	r3, r3, #22
 8002094:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002096:	6822      	ldr	r2, [r4, #0]
 8002098:	6953      	ldr	r3, [r2, #20]
 800209a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a2:	b1a3      	cbz	r3, 80020ce <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f023 0308 	bic.w	r3, r3, #8
 80020ac:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020b0:	233f      	movs	r3, #63	; 0x3f
 80020b2:	4093      	lsls	r3, r2
 80020b4:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80020b6:	2300      	movs	r3, #0
 80020b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80020bc:	2301      	movs	r3, #1
 80020be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80020c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d03f      	beq.n	8002148 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80020c8:	4620      	mov	r0, r4
 80020ca:	4798      	blx	r3
        return;
 80020cc:	e03c      	b.n	8002148 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e7      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x12c>
 80020d4:	e7eb      	b.n	80020ae <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80020d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020d8:	b1a3      	cbz	r3, 8002104 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80020da:	4620      	mov	r0, r4
 80020dc:	4798      	blx	r3
 80020de:	e011      	b.n	8002104 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80020e6:	d109      	bne.n	80020fc <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80020f0:	2300      	movs	r3, #0
 80020f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80020fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020fe:	b10b      	cbz	r3, 8002104 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002100:	4620      	mov	r0, r4
 8002102:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002104:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002106:	b1fb      	cbz	r3, 8002148 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002108:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800210a:	f013 0f01 	tst.w	r3, #1
 800210e:	d017      	beq.n	8002140 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002110:	2305      	movs	r3, #5
 8002112:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	6813      	ldr	r3, [r2, #0]
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	42ab      	cmp	r3, r5
 8002128:	d804      	bhi.n	8002134 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f013 0f01 	tst.w	r3, #1
 8002132:	d1f5      	bne.n	8002120 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002134:	2300      	movs	r3, #0
 8002136:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800213a:	2301      	movs	r3, #1
 800213c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002142:	b10b      	cbz	r3, 8002148 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002144:	4620      	mov	r0, r4
 8002146:	4798      	blx	r3
}
 8002148:	b003      	add	sp, #12
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214c:	20000004 	.word	0x20000004
 8002150:	1b4e81b5 	.word	0x1b4e81b5

08002154 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002154:	2300      	movs	r3, #0
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f200 80c8 	bhi.w	80022ec <HAL_GPIO_Init+0x198>
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	b083      	sub	sp, #12
 8002160:	e03a      	b.n	80021d8 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	2204      	movs	r2, #4
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x14>
 8002166:	2200      	movs	r2, #0
 8002168:	40aa      	lsls	r2, r5
 800216a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800216c:	3402      	adds	r4, #2
 800216e:	4d60      	ldr	r5, [pc, #384]	; (80022f0 <HAL_GPIO_Init+0x19c>)
 8002170:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_GPIO_Init+0x1a0>)
 8002176:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002178:	ea6f 020c 	mvn.w	r2, ip
 800217c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	684e      	ldr	r6, [r1, #4]
 8002182:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002186:	d001      	beq.n	800218c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8002188:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 800218c:	4c59      	ldr	r4, [pc, #356]	; (80022f4 <HAL_GPIO_Init+0x1a0>)
 800218e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002190:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002192:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002196:	684e      	ldr	r6, [r1, #4]
 8002198:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800219c:	d001      	beq.n	80021a2 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800219e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80021a2:	4c54      	ldr	r4, [pc, #336]	; (80022f4 <HAL_GPIO_Init+0x1a0>)
 80021a4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	684e      	ldr	r6, [r1, #4]
 80021ae:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80021b2:	d001      	beq.n	80021b8 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80021b4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80021b8:	4c4e      	ldr	r4, [pc, #312]	; (80022f4 <HAL_GPIO_Init+0x1a0>)
 80021ba:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80021bc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80021be:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	684d      	ldr	r5, [r1, #4]
 80021c2:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80021c6:	d001      	beq.n	80021cc <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80021c8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80021cc:	4c49      	ldr	r4, [pc, #292]	; (80022f4 <HAL_GPIO_Init+0x1a0>)
 80021ce:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d0:	3301      	adds	r3, #1
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	f200 8088 	bhi.w	80022e8 <HAL_GPIO_Init+0x194>
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021dc:	680c      	ldr	r4, [r1, #0]
 80021de:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80021e2:	ea32 0404 	bics.w	r4, r2, r4
 80021e6:	d1f3      	bne.n	80021d0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e8:	684c      	ldr	r4, [r1, #4]
 80021ea:	1e65      	subs	r5, r4, #1
 80021ec:	2d01      	cmp	r5, #1
 80021ee:	d903      	bls.n	80021f8 <HAL_GPIO_Init+0xa4>
 80021f0:	2c11      	cmp	r4, #17
 80021f2:	d001      	beq.n	80021f8 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	2c12      	cmp	r4, #18
 80021f6:	d112      	bne.n	800221e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80021f8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021fa:	005e      	lsls	r6, r3, #1
 80021fc:	2403      	movs	r4, #3
 80021fe:	40b4      	lsls	r4, r6
 8002200:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002204:	68cc      	ldr	r4, [r1, #12]
 8002206:	40b4      	lsls	r4, r6
 8002208:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800220a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800220c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002212:	684c      	ldr	r4, [r1, #4]
 8002214:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800221c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800221e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002220:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002224:	2403      	movs	r4, #3
 8002226:	fa04 f40e 	lsl.w	r4, r4, lr
 800222a:	43e2      	mvns	r2, r4
 800222c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	688c      	ldr	r4, [r1, #8]
 8002232:	fa04 f40e 	lsl.w	r4, r4, lr
 8002236:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002238:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223a:	684c      	ldr	r4, [r1, #4]
 800223c:	2c02      	cmp	r4, #2
 800223e:	d001      	beq.n	8002244 <HAL_GPIO_Init+0xf0>
 8002240:	2c12      	cmp	r4, #18
 8002242:	d10f      	bne.n	8002264 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8002244:	08dd      	lsrs	r5, r3, #3
 8002246:	3508      	adds	r5, #8
 8002248:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224c:	f003 0407 	and.w	r4, r3, #7
 8002250:	00a6      	lsls	r6, r4, #2
 8002252:	240f      	movs	r4, #15
 8002254:	40b4      	lsls	r4, r6
 8002256:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225a:	690c      	ldr	r4, [r1, #16]
 800225c:	40b4      	lsls	r4, r6
 800225e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002260:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002264:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002268:	684a      	ldr	r2, [r1, #4]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002272:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002274:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002276:	684a      	ldr	r2, [r1, #4]
 8002278:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800227c:	d0a8      	beq.n	80021d0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2200      	movs	r2, #0
 8002280:	9201      	str	r2, [sp, #4]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_GPIO_Init+0x1a4>)
 8002284:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002286:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800228a:	6454      	str	r4, [r2, #68]	; 0x44
 800228c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800228e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	089c      	lsrs	r4, r3, #2
 8002298:	1ca5      	adds	r5, r4, #2
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_GPIO_Init+0x19c>)
 800229c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	0095      	lsls	r5, r2, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	40aa      	lsls	r2, r5
 80022aa:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_GPIO_Init+0x1a8>)
 80022b0:	4290      	cmp	r0, r2
 80022b2:	f43f af58 	beq.w	8002166 <HAL_GPIO_Init+0x12>
 80022b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ba:	4290      	cmp	r0, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_GPIO_Init+0x188>
 80022be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c2:	4290      	cmp	r0, r2
 80022c4:	d00c      	beq.n	80022e0 <HAL_GPIO_Init+0x18c>
 80022c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d00a      	beq.n	80022e4 <HAL_GPIO_Init+0x190>
 80022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d2:	4290      	cmp	r0, r2
 80022d4:	f43f af45 	beq.w	8002162 <HAL_GPIO_Init+0xe>
 80022d8:	2207      	movs	r2, #7
 80022da:	e745      	b.n	8002168 <HAL_GPIO_Init+0x14>
 80022dc:	2201      	movs	r2, #1
 80022de:	e743      	b.n	8002168 <HAL_GPIO_Init+0x14>
 80022e0:	2202      	movs	r2, #2
 80022e2:	e741      	b.n	8002168 <HAL_GPIO_Init+0x14>
 80022e4:	2203      	movs	r2, #3
 80022e6:	e73f      	b.n	8002168 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80022e8:	b003      	add	sp, #12
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40013c00 	.word	0x40013c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	b10a      	cbz	r2, 8002306 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	6181      	str	r1, [r0, #24]
 8002304:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002306:	0409      	lsls	r1, r1, #16
 8002308:	6181      	str	r1, [r0, #24]
  }
}
 800230a:	4770      	bx	lr

0800230c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800230c:	6943      	ldr	r3, [r0, #20]
 800230e:	ea31 0303 	bics.w	r3, r1, r3
 8002312:	d001      	beq.n	8002318 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002314:	6181      	str	r1, [r0, #24]
  }
}
 8002316:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002318:	0409      	lsls	r1, r1, #16
 800231a:	6181      	str	r1, [r0, #24]
 800231c:	4770      	bx	lr
	...

08002320 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	2800      	cmp	r0, #0
 8002322:	f000 81da 	beq.w	80026da <HAL_RCC_OscConfig+0x3ba>
{
 8002326:	b570      	push	{r4, r5, r6, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	f013 0f01 	tst.w	r3, #1
 8002332:	d03b      	beq.n	80023ac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002334:	4b9f      	ldr	r3, [pc, #636]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b04      	cmp	r3, #4
 800233e:	d02c      	beq.n	800239a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002340:	4b9c      	ldr	r3, [pc, #624]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002348:	2b08      	cmp	r3, #8
 800234a:	d021      	beq.n	8002390 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	6863      	ldr	r3, [r4, #4]
 800234e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002352:	d04f      	beq.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002358:	d052      	beq.n	8002400 <HAL_RCC_OscConfig+0xe0>
 800235a:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800236a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d050      	beq.n	8002414 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fc4d 	bl	8001c10 <HAL_GetTick>
 8002376:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002378:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002380:	d114      	bne.n	80023ac <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002382:	f7ff fc45 	bl	8001c10 <HAL_GetTick>
 8002386:	1b40      	subs	r0, r0, r5
 8002388:	2864      	cmp	r0, #100	; 0x64
 800238a:	d9f5      	bls.n	8002378 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
 800238e:	e1ab      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002390:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002398:	d0d8      	beq.n	800234c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023a2:	d003      	beq.n	80023ac <HAL_RCC_OscConfig+0x8c>
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8199 	beq.w	80026de <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	f013 0f02 	tst.w	r3, #2
 80023b2:	d054      	beq.n	800245e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b4:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f013 0f0c 	tst.w	r3, #12
 80023bc:	d03e      	beq.n	800243c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b7d      	ldr	r3, [pc, #500]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d033      	beq.n	8002432 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ca:	68e3      	ldr	r3, [r4, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d068      	beq.n	80024a2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x298>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7ff fc1b 	bl	8001c10 <HAL_GetTick>
 80023da:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f013 0f02 	tst.w	r3, #2
 80023e4:	d154      	bne.n	8002490 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fc13 	bl	8001c10 <HAL_GetTick>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	2802      	cmp	r0, #2
 80023ee:	d9f5      	bls.n	80023dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80023f0:	2003      	movs	r0, #3
 80023f2:	e179      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80023f6:	6813      	ldr	r3, [r2, #0]
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e7b5      	b.n	800236c <HAL_RCC_OscConfig+0x4c>
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e7ab      	b.n	800236c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002414:	f7ff fbfc 	bl	8001c10 <HAL_GetTick>
 8002418:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002422:	d0c3      	beq.n	80023ac <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fbf4 	bl	8001c10 <HAL_GetTick>
 8002428:	1b40      	subs	r0, r0, r5
 800242a:	2864      	cmp	r0, #100	; 0x64
 800242c:	d9f5      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800242e:	2003      	movs	r0, #3
 8002430:	e15a      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800243a:	d1c6      	bne.n	80023ca <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f013 0f02 	tst.w	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_OscConfig+0x12e>
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 814a 	bne.w	80026e2 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002456:	6921      	ldr	r1, [r4, #16]
 8002458:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800245c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	f013 0f08 	tst.w	r3, #8
 8002464:	d042      	beq.n	80024ec <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002466:	6963      	ldr	r3, [r4, #20]
 8002468:	b36b      	cbz	r3, 80024c6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x298>)
 800246c:	2201      	movs	r2, #1
 800246e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7ff fbcd 	bl	8001c10 <HAL_GetTick>
 8002476:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800247a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247c:	f013 0f02 	tst.w	r3, #2
 8002480:	d134      	bne.n	80024ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fbc5 	bl	8001c10 <HAL_GetTick>
 8002486:	1b40      	subs	r0, r0, r5
 8002488:	2802      	cmp	r0, #2
 800248a:	d9f5      	bls.n	8002478 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800248c:	2003      	movs	r0, #3
 800248e:	e12b      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002498:	6921      	ldr	r1, [r4, #16]
 800249a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e7dd      	b.n	800245e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <HAL_RCC_OscConfig+0x298>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024a8:	f7ff fbb2 	bl	8001c10 <HAL_GetTick>
 80024ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f013 0f02 	tst.w	r3, #2
 80024b6:	d0d2      	beq.n	800245e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fbaa 	bl	8001c10 <HAL_GetTick>
 80024bc:	1b40      	subs	r0, r0, r5
 80024be:	2802      	cmp	r0, #2
 80024c0:	d9f5      	bls.n	80024ae <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e110      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x298>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb9f 	bl	8001c10 <HAL_GetTick>
 80024d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	f013 0f02 	tst.w	r3, #2
 80024dc:	d006      	beq.n	80024ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff fb97 	bl	8001c10 <HAL_GetTick>
 80024e2:	1b40      	subs	r0, r0, r5
 80024e4:	2802      	cmp	r0, #2
 80024e6:	d9f5      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80024e8:	2003      	movs	r0, #3
 80024ea:	e0fd      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	f013 0f04 	tst.w	r3, #4
 80024f2:	d077      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024fc:	d133      	bne.n	8002566 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002516:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_RCC_OscConfig+0x29c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002520:	d023      	beq.n	800256a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	68a3      	ldr	r3, [r4, #8]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d034      	beq.n	8002592 <HAL_RCC_OscConfig+0x272>
 8002528:	2b05      	cmp	r3, #5
 800252a:	d038      	beq.n	800259e <HAL_RCC_OscConfig+0x27e>
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800252e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	671a      	str	r2, [r3, #112]	; 0x70
 8002536:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253e:	68a3      	ldr	r3, [r4, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d03d      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7ff fb64 	bl	8001c10 <HAL_GetTick>
 8002548:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f013 0f02 	tst.w	r3, #2
 8002552:	d146      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7ff fb5c 	bl	8001c10 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	f241 3388 	movw	r3, #5000	; 0x1388
 800255e:	4298      	cmp	r0, r3
 8002560:	d9f3      	bls.n	800254a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
 8002564:	e0c0      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2500      	movs	r5, #0
 8002568:	e7d6      	b.n	8002518 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_RCC_OscConfig+0x29c>)
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002574:	f7ff fb4c 	bl	8001c10 <HAL_GetTick>
 8002578:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_OscConfig+0x29c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002582:	d1ce      	bne.n	8002522 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7ff fb44 	bl	8001c10 <HAL_GetTick>
 8002588:	1b80      	subs	r0, r0, r6
 800258a:	2802      	cmp	r0, #2
 800258c:	d9f5      	bls.n	800257a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e0aa      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 8002594:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	e7cf      	b.n	800253e <HAL_RCC_OscConfig+0x21e>
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_OscConfig+0x294>)
 80025a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a2:	f042 0204 	orr.w	r2, r2, #4
 80025a6:	671a      	str	r2, [r3, #112]	; 0x70
 80025a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	671a      	str	r2, [r3, #112]	; 0x70
 80025b0:	e7c5      	b.n	800253e <HAL_RCC_OscConfig+0x21e>
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470000 	.word	0x42470000
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7ff fb26 	bl	8001c10 <HAL_GetTick>
 80025c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	f013 0f02 	tst.w	r3, #2
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7ff fb1e 	bl	8001c10 <HAL_GetTick>
 80025d4:	1b80      	subs	r0, r0, r6
 80025d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80025da:	4298      	cmp	r0, r3
 80025dc:	d9f3      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80025de:	2003      	movs	r0, #3
 80025e0:	e082      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e2:	b9e5      	cbnz	r5, 800261e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	69a3      	ldr	r3, [r4, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07d      	beq.n	80026e6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ea:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 80025ec:	6892      	ldr	r2, [r2, #8]
 80025ee:	f002 020c 	and.w	r2, r2, #12
 80025f2:	2a08      	cmp	r2, #8
 80025f4:	d051      	beq.n	800269a <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d017      	beq.n	800262a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x3e8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fb06 	bl	8001c10 <HAL_GetTick>
 8002604:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800260e:	d042      	beq.n	8002696 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7ff fafe 	bl	8001c10 <HAL_GetTick>
 8002614:	1b00      	subs	r0, r0, r4
 8002616:	2802      	cmp	r0, #2
 8002618:	d9f5      	bls.n	8002606 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800261a:	2003      	movs	r0, #3
 800261c:	e064      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 8002620:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
 8002628:	e7dc      	b.n	80025e4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x3e8>)
 800262c:	2200      	movs	r2, #0
 800262e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002630:	f7ff faee 	bl	8001c10 <HAL_GetTick>
 8002634:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800263e:	d006      	beq.n	800264e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff fae6 	bl	8001c10 <HAL_GetTick>
 8002644:	1b40      	subs	r0, r0, r5
 8002646:	2802      	cmp	r0, #2
 8002648:	d9f5      	bls.n	8002636 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800264a:	2003      	movs	r0, #3
 800264c:	e04c      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264e:	69e3      	ldr	r3, [r4, #28]
 8002650:	6a22      	ldr	r2, [r4, #32]
 8002652:	4313      	orrs	r3, r2
 8002654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002656:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800265a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002666:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 800266c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x3e8>)
 8002670:	2201      	movs	r2, #1
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002674:	f7ff facc 	bl	8001c10 <HAL_GetTick>
 8002678:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7ff fac4 	bl	8001c10 <HAL_GetTick>
 8002688:	1b00      	subs	r0, r0, r4
 800268a:	2802      	cmp	r0, #2
 800268c:	d9f5      	bls.n	800267a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800268e:	2003      	movs	r0, #3
 8002690:	e02a      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	e028      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 8002696:	2000      	movs	r0, #0
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269a:	2b01      	cmp	r3, #1
 800269c:	d026      	beq.n	80026ec <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_OscConfig+0x3e4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80026a6:	69e2      	ldr	r2, [r4, #28]
 80026a8:	4291      	cmp	r1, r2
 80026aa:	d121      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b0:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	428a      	cmp	r2, r1
 80026b4:	d11e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80026bc:	401a      	ands	r2, r3
 80026be:	428a      	cmp	r2, r1
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c8:	428a      	cmp	r2, r1
 80026ca:	d117      	bne.n	80026fc <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80026d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d114      	bne.n	8002700 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
 80026d8:	e006      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80026da:	2001      	movs	r0, #1
}
 80026dc:	4770      	bx	lr
        return HAL_ERROR;
 80026de:	2001      	movs	r0, #1
 80026e0:	e002      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80026e6:	2000      	movs	r0, #0
}
 80026e8:	b002      	add	sp, #8
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
 80026ee:	e7fb      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e7f9      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7f7      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 80026f8:	2001      	movs	r0, #1
 80026fa:	e7f5      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 80026fc:	2001      	movs	r0, #1
 80026fe:	e7f3      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 8002700:	2001      	movs	r0, #1
 8002702:	e7f1      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 8002704:	40023800 	.word	0x40023800
 8002708:	42470000 	.word	0x42470000

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d057      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0xbe>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d157      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800272c:	d02a      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002736:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800273a:	ebb1 000c 	subs.w	r0, r1, ip
 800273e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002742:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800274a:	0181      	lsls	r1, r0, #6
 800274c:	1a09      	subs	r1, r1, r0
 800274e:	eb63 030e 	sbc.w	r3, r3, lr
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002758:	00c9      	lsls	r1, r1, #3
 800275a:	eb11 0c0c 	adds.w	ip, r1, ip
 800275e:	f143 0300 	adc.w	r3, r3, #0
 8002762:	0259      	lsls	r1, r3, #9
 8002764:	2300      	movs	r3, #0
 8002766:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800276a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800276e:	f7fe fa73 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800277e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002782:	e025      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800278c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002790:	ebb1 000c 	subs.w	r0, r1, ip
 8002794:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002798:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800279c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027a0:	0181      	lsls	r1, r0, #6
 80027a2:	1a09      	subs	r1, r1, r0
 80027a4:	eb63 030e 	sbc.w	r3, r3, lr
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ae:	00c9      	lsls	r1, r1, #3
 80027b0:	eb11 0c0c 	adds.w	ip, r1, ip
 80027b4:	f143 0300 	adc.w	r3, r3, #0
 80027b8:	0299      	lsls	r1, r3, #10
 80027ba:	2300      	movs	r3, #0
 80027bc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80027c0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80027c4:	f7fe fa48 	bl	8000c58 <__aeabi_uldivmod>
 80027c8:	e7d3      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80027d0:	bd08      	pop	{r3, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	00f42400 	.word	0x00f42400

080027e0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f000 809b 	beq.w	800291c <HAL_RCC_ClockConfig+0x13c>
{
 80027e6:	b570      	push	{r4, r5, r6, lr}
 80027e8:	460d      	mov	r5, r1
 80027ea:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <HAL_RCC_ClockConfig+0x14c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d208      	bcs.n	800280a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f8:	b2cb      	uxtb	r3, r1
 80027fa:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_RCC_ClockConfig+0x14c>)
 80027fc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	428b      	cmp	r3, r1
 8002806:	f040 808b 	bne.w	8002920 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f013 0f02 	tst.w	r3, #2
 8002810:	d017      	beq.n	8002842 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002812:	f013 0f04 	tst.w	r3, #4
 8002816:	d004      	beq.n	8002822 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4a45      	ldr	r2, [pc, #276]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 800281a:	6893      	ldr	r3, [r2, #8]
 800281c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002820:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	f013 0f08 	tst.w	r3, #8
 8002828:	d004      	beq.n	8002834 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 800282c:	6893      	ldr	r3, [r2, #8]
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4a3e      	ldr	r2, [pc, #248]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002836:	6893      	ldr	r3, [r2, #8]
 8002838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800283c:	68a1      	ldr	r1, [r4, #8]
 800283e:	430b      	orrs	r3, r1
 8002840:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f013 0f01 	tst.w	r3, #1
 8002848:	d032      	beq.n	80028b0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	6863      	ldr	r3, [r4, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d021      	beq.n	8002894 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002850:	1e9a      	subs	r2, r3, #2
 8002852:	2a01      	cmp	r2, #1
 8002854:	d925      	bls.n	80028a2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	f012 0f02 	tst.w	r2, #2
 800285e:	d061      	beq.n	8002924 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002860:	4933      	ldr	r1, [pc, #204]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002862:	688a      	ldr	r2, [r1, #8]
 8002864:	f022 0203 	bic.w	r2, r2, #3
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800286c:	f7ff f9d0 	bl	8001c10 <HAL_GetTick>
 8002870:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	6862      	ldr	r2, [r4, #4]
 800287c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7ff f9c5 	bl	8001c10 <HAL_GetTick>
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	f241 3388 	movw	r3, #5000	; 0x1388
 800288c:	4298      	cmp	r0, r3
 800288e:	d9f0      	bls.n	8002872 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002890:	2003      	movs	r0, #3
 8002892:	e042      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800289c:	d1e0      	bne.n	8002860 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800289e:	2001      	movs	r0, #1
 80028a0:	e03b      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028aa:	d1d9      	bne.n	8002860 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80028ac:	2001      	movs	r0, #1
 80028ae:	e034      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_ClockConfig+0x14c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	42ab      	cmp	r3, r5
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028bc:	b2ea      	uxtb	r2, r5
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_ClockConfig+0x14c>)
 80028c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	d12d      	bne.n	8002928 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	f013 0f04 	tst.w	r3, #4
 80028d2:	d006      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 80028d6:	6893      	ldr	r3, [r2, #8]
 80028d8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028dc:	68e1      	ldr	r1, [r4, #12]
 80028de:	430b      	orrs	r3, r1
 80028e0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	f013 0f08 	tst.w	r3, #8
 80028e8:	d007      	beq.n	80028fa <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 80028ec:	6893      	ldr	r3, [r2, #8]
 80028ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028f2:	6921      	ldr	r1, [r4, #16]
 80028f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028f8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fa:	f7ff ff07 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_ClockConfig+0x150>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x154>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	40d8      	lsrs	r0, r3
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x158>)
 800290e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x15c>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f7ff f930 	bl	8001b78 <HAL_InitTick>
  return HAL_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800291c:	2001      	movs	r0, #1
}
 800291e:	4770      	bx	lr
      return HAL_ERROR;
 8002920:	2001      	movs	r0, #1
 8002922:	e7fa      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
 8002926:	e7f8      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
 800292a:	e7f6      	b.n	800291a <HAL_RCC_ClockConfig+0x13a>
 800292c:	40023c00 	.word	0x40023c00
 8002930:	40023800 	.word	0x40023800
 8002934:	08006288 	.word	0x08006288
 8002938:	20000004 	.word	0x20000004
 800293c:	2000000c 	.word	0x2000000c

08002940 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <HAL_RCC_GetHCLKFreq+0x8>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800294e:	f7ff fff7 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800295a:	4a03      	ldr	r2, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
}
 800295e:	40d8      	lsrs	r0, r3
 8002960:	bd08      	pop	{r3, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	08006298 	.word	0x08006298

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800296e:	f7ff ffe7 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800297a:	4a03      	ldr	r2, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
}
 800297e:	40d8      	lsrs	r0, r3
 8002980:	bd08      	pop	{r3, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	08006298 	.word	0x08006298

0800298c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002990:	4606      	mov	r6, r0
 8002992:	4688      	mov	r8, r1
 8002994:	4617      	mov	r7, r2
 8002996:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002998:	6834      	ldr	r4, [r6, #0]
 800299a:	68a4      	ldr	r4, [r4, #8]
 800299c:	ea38 0304 	bics.w	r3, r8, r4
 80029a0:	bf0c      	ite	eq
 80029a2:	f04f 0c01 	moveq.w	ip, #1
 80029a6:	f04f 0c00 	movne.w	ip, #0
 80029aa:	45bc      	cmp	ip, r7
 80029ac:	d037      	beq.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80029b2:	d0f1      	beq.n	8002998 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029b4:	f7ff f92c 	bl	8001c10 <HAL_GetTick>
 80029b8:	9b06      	ldr	r3, [sp, #24]
 80029ba:	1ac0      	subs	r0, r0, r3
 80029bc:	42a8      	cmp	r0, r5
 80029be:	d201      	bcs.n	80029c4 <SPI_WaitFlagStateUntilTimeout+0x38>
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	d1e9      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029c4:	6832      	ldr	r2, [r6, #0]
 80029c6:	6853      	ldr	r3, [r2, #4]
 80029c8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80029cc:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	6873      	ldr	r3, [r6, #4]
 80029d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d4:	d00b      	beq.n	80029ee <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029dc:	d014      	beq.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029de:	2301      	movs	r3, #1
 80029e0:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029e4:	2300      	movs	r3, #0
 80029e6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ea:	2003      	movs	r0, #3
 80029ec:	e018      	b.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ee:	68b3      	ldr	r3, [r6, #8]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f4:	d002      	beq.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x70>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d1ec      	bne.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 80029fc:	6832      	ldr	r2, [r6, #0]
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e7e6      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8002a08:	6832      	ldr	r2, [r6, #0]
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	6832      	ldr	r2, [r6, #0]
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e7df      	b.n	80029de <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 8002a1e:	2000      	movs	r0, #0
}
 8002a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b510      	push	{r4, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <SPI_EndRxTxTransaction+0x60>)
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <SPI_EndRxTxTransaction+0x64>)
 8002a30:	fba3 3000 	umull	r3, r0, r3, r0
 8002a34:	0d40      	lsrs	r0, r0, #21
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fb03 f000 	mul.w	r0, r3, r0
 8002a3e:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a40:	6863      	ldr	r3, [r4, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a46:	d00b      	beq.n	8002a60 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	b1bb      	cbz	r3, 8002a7c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a5a:	d1f5      	bne.n	8002a48 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e00e      	b.n	8002a7e <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	460b      	mov	r3, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff ff8f 	bl	800298c <SPI_WaitFlagStateUntilTimeout>
 8002a6e:	b130      	cbz	r0, 8002a7e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a72:	f043 0320 	orr.w	r3, r3, #32
 8002a76:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e000      	b.n	8002a7e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8002a7c:	2000      	movs	r0, #0
}
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	20000004 	.word	0x20000004
 8002a88:	165e9f81 	.word	0x165e9f81

08002a8c <SPI_EndRxTransaction>:
{
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	4604      	mov	r4, r0
 8002a92:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a94:	6841      	ldr	r1, [r0, #4]
 8002a96:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002a9a:	d014      	beq.n	8002ac6 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9c:	6861      	ldr	r1, [r4, #4]
 8002a9e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002aa2:	d12a      	bne.n	8002afa <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002aa4:	68a1      	ldr	r1, [r4, #8]
 8002aa6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002aaa:	d019      	beq.n	8002ae0 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aac:	9200      	str	r2, [sp, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff ff6a 	bl	800298c <SPI_WaitFlagStateUntilTimeout>
 8002ab8:	b330      	cbz	r0, 8002b08 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e020      	b.n	8002b08 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac6:	6881      	ldr	r1, [r0, #8]
 8002ac8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002acc:	d002      	beq.n	8002ad4 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ace:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002ad2:	d1e3      	bne.n	8002a9c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	6801      	ldr	r1, [r0, #0]
 8002ad8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002adc:	6001      	str	r1, [r0, #0]
 8002ade:	e7dd      	b.n	8002a9c <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	9200      	str	r2, [sp, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff ff50 	bl	800298c <SPI_WaitFlagStateUntilTimeout>
 8002aec:	b160      	cbz	r0, 8002b08 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002af0:	f043 0320 	orr.w	r3, r3, #32
 8002af4:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002af6:	2003      	movs	r0, #3
 8002af8:	e006      	b.n	8002b08 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2101      	movs	r1, #1
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff43 	bl	800298c <SPI_WaitFlagStateUntilTimeout>
 8002b06:	b908      	cbnz	r0, 8002b0c <SPI_EndRxTransaction+0x80>
}
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
 8002b16:	e7f7      	b.n	8002b08 <SPI_EndRxTransaction+0x7c>

08002b18 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d03b      	beq.n	8002b94 <HAL_SPI_Init+0x7c>
{
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b24:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02e      	beq.n	8002b8a <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	68a2      	ldr	r2, [r4, #8]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	68e2      	ldr	r2, [r4, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	6922      	ldr	r2, [r4, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	6962      	ldr	r2, [r4, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	69a2      	ldr	r2, [r4, #24]
 8002b50:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002b54:	4313      	orrs	r3, r2
 8002b56:	69e2      	ldr	r2, [r4, #28]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	6a22      	ldr	r2, [r4, #32]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b60:	6822      	ldr	r2, [r4, #0]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b66:	8b63      	ldrh	r3, [r4, #26]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b6e:	6822      	ldr	r2, [r4, #0]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b74:	6822      	ldr	r2, [r4, #0]
 8002b76:	69d3      	ldr	r3, [r2, #28]
 8002b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b7c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b7e:	2000      	movs	r0, #0
 8002b80:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002b88:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002b8a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002b8e:	f7fe fe5b 	bl	8001848 <HAL_SPI_MspInit>
 8002b92:	e7cb      	b.n	8002b2c <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002b94:	2001      	movs	r0, #1
}
 8002b96:	4770      	bx	lr

08002b98 <HAL_SPI_TransmitReceive>:
{
 8002b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	461f      	mov	r7, r3
 8002ba0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002ba2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f000 8110 	beq.w	8002dcc <HAL_SPI_TransmitReceive+0x234>
 8002bac:	4604      	mov	r4, r0
 8002bae:	4688      	mov	r8, r1
 8002bb0:	4691      	mov	r9, r2
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002bb8:	f7ff f82a 	bl	8001c10 <HAL_GetTick>
 8002bbc:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002bbe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002bc2:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002bc4:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00a      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x48>
 8002bca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002bce:	f040 80e3 	bne.w	8002d98 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bd2:	68a2      	ldr	r2, [r4, #8]
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	f040 80e9 	bne.w	8002dac <HAL_SPI_TransmitReceive+0x214>
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	f040 80e8 	bne.w	8002db0 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be0:	f1b8 0f00 	cmp.w	r8, #0
 8002be4:	f000 80e6 	beq.w	8002db4 <HAL_SPI_TransmitReceive+0x21c>
 8002be8:	f1b9 0f00 	cmp.w	r9, #0
 8002bec:	f000 80e4 	beq.w	8002db8 <HAL_SPI_TransmitReceive+0x220>
 8002bf0:	2f00      	cmp	r7, #0
 8002bf2:	f000 80e3 	beq.w	8002dbc <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c00:	2305      	movs	r3, #5
 8002c02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c0a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c0e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c10:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c12:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c16:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c18:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8002c1a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c1c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c26:	d103      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c30:	68e3      	ldr	r3, [r4, #12]
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c36:	d011      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c38:	6863      	ldr	r3, [r4, #4]
 8002c3a:	b10b      	cbz	r3, 8002c40 <HAL_SPI_TransmitReceive+0xa8>
 8002c3c:	2f01      	cmp	r7, #1
 8002c3e:	d10b      	bne.n	8002c58 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002c58:	2701      	movs	r7, #1
 8002c5a:	e06b      	b.n	8002d34 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	6863      	ldr	r3, [r4, #4]
 8002c5e:	b10b      	cbz	r3, 8002c64 <HAL_SPI_TransmitReceive+0xcc>
 8002c60:	2f01      	cmp	r7, #1
 8002c62:	d10b      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	8812      	ldrh	r2, [r2, #0]
 8002c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c6e:	3302      	adds	r3, #2
 8002c70:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002c72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002c7c:	2701      	movs	r7, #1
 8002c7e:	e01c      	b.n	8002cba <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	f012 0f01 	tst.w	r2, #1
 8002c88:	d00e      	beq.n	8002ca8 <HAL_SPI_TransmitReceive+0x110>
 8002c8a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	b15a      	cbz	r2, 8002ca8 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c98:	3302      	adds	r3, #2
 8002c9a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002ca6:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ca8:	f7fe ffb2 	bl	8001c10 <HAL_GetTick>
 8002cac:	1b80      	subs	r0, r0, r6
 8002cae:	42a8      	cmp	r0, r5
 8002cb0:	d303      	bcc.n	8002cba <HAL_SPI_TransmitReceive+0x122>
 8002cb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cb6:	f040 8083 	bne.w	8002dc0 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b91b      	cbnz	r3, 8002cc8 <HAL_SPI_TransmitReceive+0x130>
 8002cc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d053      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	f012 0f02 	tst.w	r2, #2
 8002cd0:	d0d6      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0xe8>
 8002cd2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d0d2      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0xe8>
 8002cda:	2f00      	cmp	r7, #0
 8002cdc:	d0d0      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ce0:	8812      	ldrh	r2, [r2, #0]
 8002ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002cf4:	2700      	movs	r7, #0
 8002cf6:	e7c3      	b.n	8002c80 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f012 0f01 	tst.w	r2, #1
 8002d00:	d00e      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x188>
 8002d02:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d04:	b292      	uxth	r2, r2
 8002d06:	b15a      	cbz	r2, 8002d20 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d10:	3301      	adds	r3, #1
 8002d12:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002d1e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d20:	f7fe ff76 	bl	8001c10 <HAL_GetTick>
 8002d24:	1b83      	subs	r3, r0, r6
 8002d26:	42ab      	cmp	r3, r5
 8002d28:	d302      	bcc.n	8002d30 <HAL_SPI_TransmitReceive+0x198>
 8002d2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d2e:	d149      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x22c>
 8002d30:	2d00      	cmp	r5, #0
 8002d32:	d049      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b913      	cbnz	r3, 8002d40 <HAL_SPI_TransmitReceive+0x1a8>
 8002d3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	b1bb      	cbz	r3, 8002d70 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	f012 0f02 	tst.w	r2, #2
 8002d48:	d0d6      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x160>
 8002d4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d0d2      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x160>
 8002d52:	2f00      	cmp	r7, #0
 8002d54:	d0d0      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002d5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d5e:	3301      	adds	r3, #1
 8002d60:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002d62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002d6c:	2700      	movs	r7, #0
 8002d6e:	e7c3      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d70:	4632      	mov	r2, r6
 8002d72:	4629      	mov	r1, r5
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff fe55 	bl	8002a24 <SPI_EndRxTxTransaction>
 8002d7a:	b948      	cbnz	r0, 8002d90 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d7c:	68a3      	ldr	r3, [r4, #8]
 8002d7e:	b963      	cbnz	r3, 8002d9a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	9201      	str	r2, [sp, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	e004      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d90:	2320      	movs	r3, #32
 8002d92:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
    goto error;
 8002d96:	e000      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8002d98:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002da0:	2300      	movs	r3, #0
 8002da2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002da6:	b003      	add	sp, #12
 8002da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002dac:	2002      	movs	r0, #2
 8002dae:	e7f4      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
 8002db0:	2002      	movs	r0, #2
 8002db2:	e7f2      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7f0      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
 8002db8:	2001      	movs	r0, #1
 8002dba:	e7ee      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	e7ec      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	e7ea      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	e7e8      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
 8002dc8:	2003      	movs	r0, #3
 8002dca:	e7e6      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8002dcc:	2002      	movs	r0, #2
 8002dce:	e7ea      	b.n	8002da6 <HAL_SPI_TransmitReceive+0x20e>

08002dd0 <HAL_SPI_TransmitReceive_DMA>:
{
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002dd4:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8002dd8:	2801      	cmp	r0, #1
 8002dda:	f000 8094 	beq.w	8002f06 <HAL_SPI_TransmitReceive_DMA+0x136>
 8002dde:	2001      	movs	r0, #1
 8002de0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8002de4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002de8:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8002dea:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002dec:	2801      	cmp	r0, #1
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_TransmitReceive_DMA+0x30>
 8002df0:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8002df4:	d178      	bne.n	8002ee8 <HAL_SPI_TransmitReceive_DMA+0x118>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df6:	68a5      	ldr	r5, [r4, #8]
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	d17a      	bne.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x122>
 8002dfc:	2804      	cmp	r0, #4
 8002dfe:	d17a      	bne.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x126>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d07a      	beq.n	8002efa <HAL_SPI_TransmitReceive_DMA+0x12a>
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d07a      	beq.n	8002efe <HAL_SPI_TransmitReceive_DMA+0x12e>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d07a      	beq.n	8002f02 <HAL_SPI_TransmitReceive_DMA+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e0c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002e10:	b2c0      	uxtb	r0, r0
 8002e12:	2804      	cmp	r0, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_TransmitReceive_DMA+0x4c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e16:	2005      	movs	r0, #5
 8002e18:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e20:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e22:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e24:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e26:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e28:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e2c:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e2e:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d01c      	beq.n	8002e74 <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002e3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e3c:	4a33      	ldr	r2, [pc, #204]	; (8002f0c <HAL_SPI_TransmitReceive_DMA+0x13c>)
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002e40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_SPI_TransmitReceive_DMA+0x140>)
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002e46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e48:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <HAL_SPI_TransmitReceive_DMA+0x144>)
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e4e:	2200      	movs	r2, #0
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e52:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8002e54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e5a:	310c      	adds	r1, #12
 8002e5c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002e5e:	f7ff f843 	bl	8001ee8 <HAL_DMA_Start_IT>
 8002e62:	b170      	cbz	r0, 8002e82 <HAL_SPI_TransmitReceive_DMA+0xb2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 8002e72:	e03a      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002e74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_SPI_TransmitReceive_DMA+0x148>)
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002e7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_SPI_TransmitReceive_DMA+0x14c>)
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e80:	e7e1      	b.n	8002e46 <HAL_SPI_TransmitReceive_DMA+0x76>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	6853      	ldr	r3, [r2, #4]
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e94:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e98:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e9c:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e9e:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8002ea0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	320c      	adds	r2, #12
 8002ea6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002ea8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002eaa:	f7ff f81d 	bl	8001ee8 <HAL_DMA_Start_IT>
 8002eae:	b998      	cbnz	r0, 8002ed8 <HAL_SPI_TransmitReceive_DMA+0x108>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002eb8:	d103      	bne.n	8002ec2 <HAL_SPI_TransmitReceive_DMA+0xf2>
    __HAL_SPI_ENABLE(hspi);
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	6853      	ldr	r3, [r2, #4]
 8002ec6:	f043 0320 	orr.w	r3, r3, #32
 8002eca:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	6853      	ldr	r3, [r2, #4]
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	6053      	str	r3, [r2, #4]
 8002ed6:	e008      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eda:	f043 0310 	orr.w	r3, r3, #16
 8002ede:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 8002ee6:	e000      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
    errorcode = HAL_BUSY;
 8002ee8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8002eea:	2300      	movs	r3, #0
 8002eec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002ef0:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 8002ef2:	2002      	movs	r0, #2
 8002ef4:	e7f9      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
 8002ef6:	2002      	movs	r0, #2
 8002ef8:	e7f7      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
    errorcode = HAL_ERROR;
 8002efa:	2001      	movs	r0, #1
 8002efc:	e7f5      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
 8002efe:	2001      	movs	r0, #1
 8002f00:	e7f3      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7f1      	b.n	8002eea <HAL_SPI_TransmitReceive_DMA+0x11a>
  __HAL_LOCK(hspi);
 8002f06:	2002      	movs	r0, #2
 8002f08:	e7f2      	b.n	8002ef0 <HAL_SPI_TransmitReceive_DMA+0x120>
 8002f0a:	bf00      	nop
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002fcd 	.word	0x08002fcd
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f25 	.word	0x08002f25
 8002f1c:	08002f5f 	.word	0x08002f5f

08002f20 <HAL_SPI_RxCpltCallback>:
}
 8002f20:	4770      	bx	lr

08002f22 <HAL_SPI_RxHalfCpltCallback>:
}
 8002f22:	4770      	bx	lr

08002f24 <SPI_DMAHalfReceiveCplt>:
{
 8002f24:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002f26:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002f28:	f7ff fffb 	bl	8002f22 <HAL_SPI_RxHalfCpltCallback>
}
 8002f2c:	bd08      	pop	{r3, pc}

08002f2e <HAL_SPI_TxRxHalfCpltCallback>:
}
 8002f2e:	4770      	bx	lr

08002f30 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002f30:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002f32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002f34:	f7ff fffb 	bl	8002f2e <HAL_SPI_TxRxHalfCpltCallback>
}
 8002f38:	bd08      	pop	{r3, pc}

08002f3a <HAL_SPI_ErrorCallback>:
}
 8002f3a:	4770      	bx	lr

08002f3c <SPI_DMAError>:
{
 8002f3c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	6853      	ldr	r3, [r2, #4]
 8002f44:	f023 0303 	bic.w	r3, r3, #3
 8002f48:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002f58:	f7ff ffef 	bl	8002f3a <HAL_SPI_ErrorCallback>
}
 8002f5c:	bd08      	pop	{r3, pc}

08002f5e <SPI_DMAReceiveCplt>:
{
 8002f5e:	b538      	push	{r3, r4, r5, lr}
 8002f60:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f62:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002f64:	f7fe fe54 	bl	8001c10 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f70:	d11e      	bne.n	8002fb0 <SPI_DMAReceiveCplt+0x52>
 8002f72:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f74:	6821      	ldr	r1, [r4, #0]
 8002f76:	684b      	ldr	r3, [r1, #4]
 8002f78:	f023 0320 	bic.w	r3, r3, #32
 8002f7c:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	b91b      	cbnz	r3, 8002f8a <SPI_DMAReceiveCplt+0x2c>
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f88:	d016      	beq.n	8002fb8 <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f8a:	6821      	ldr	r1, [r4, #0]
 8002f8c:	684b      	ldr	r3, [r1, #4]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f94:	2164      	movs	r1, #100	; 0x64
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff fd78 	bl	8002a8c <SPI_EndRxTransaction>
 8002f9c:	b108      	cbz	r0, 8002fa2 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fae:	b94b      	cbnz	r3, 8002fc4 <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff ffb5 	bl	8002f20 <HAL_SPI_RxCpltCallback>
}
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fb8:	6821      	ldr	r1, [r4, #0]
 8002fba:	684b      	ldr	r3, [r1, #4]
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e7e7      	b.n	8002f94 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f7ff ffb8 	bl	8002f3a <HAL_SPI_ErrorCallback>
      return;
 8002fca:	e7f4      	b.n	8002fb6 <SPI_DMAReceiveCplt+0x58>

08002fcc <SPI_DMATransmitReceiveCplt>:
{
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fd0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002fd2:	f7fe fe1d 	bl	8001c10 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fde:	d11b      	bne.n	8003018 <SPI_DMATransmitReceiveCplt+0x4c>
 8002fe0:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fe2:	6821      	ldr	r1, [r4, #0]
 8002fe4:	684b      	ldr	r3, [r1, #4]
 8002fe6:	f023 0320 	bic.w	r3, r3, #32
 8002fea:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fec:	2164      	movs	r1, #100	; 0x64
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff fd18 	bl	8002a24 <SPI_EndRxTxTransaction>
 8002ff4:	b118      	cbz	r0, 8002ffe <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ff8:	f043 0320 	orr.w	r3, r3, #32
 8002ffc:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	6853      	ldr	r3, [r2, #4]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800300c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800300e:	2301      	movs	r3, #1
 8003010:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003016:	b91b      	cbnz	r3, 8003020 <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 8003018:	4620      	mov	r0, r4
 800301a:	f7fe f9d3 	bl	80013c4 <HAL_SPI_TxRxCpltCallback>
}
 800301e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff ff8a 	bl	8002f3a <HAL_SPI_ErrorCallback>
      return;
 8003026:	e7fa      	b.n	800301e <SPI_DMATransmitReceiveCplt+0x52>

08003028 <HAL_SPI_IRQHandler>:
{
 8003028:	b530      	push	{r4, r5, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800302e:	6802      	ldr	r2, [r0, #0]
 8003030:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003032:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003034:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8003038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800303c:	d105      	bne.n	800304a <HAL_SPI_IRQHandler+0x22>
 800303e:	f013 0f01 	tst.w	r3, #1
 8003042:	d002      	beq.n	800304a <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003044:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003048:	d169      	bne.n	800311e <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800304a:	f013 0f02 	tst.w	r3, #2
 800304e:	d002      	beq.n	8003056 <HAL_SPI_IRQHandler+0x2e>
 8003050:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003054:	d167      	bne.n	8003126 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003056:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800305a:	f013 0f20 	tst.w	r3, #32
 800305e:	d103      	bne.n	8003068 <HAL_SPI_IRQHandler+0x40>
 8003060:	b910      	cbnz	r0, 8003068 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003062:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003066:	d061      	beq.n	800312c <HAL_SPI_IRQHandler+0x104>
 8003068:	f011 0f20 	tst.w	r1, #32
 800306c:	d05e      	beq.n	800312c <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800306e:	b178      	cbz	r0, 8003090 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003070:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003074:	b2c0      	uxtb	r0, r0
 8003076:	2803      	cmp	r0, #3
 8003078:	d05a      	beq.n	8003130 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800307a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800307c:	f040 0004 	orr.w	r0, r0, #4
 8003080:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003082:	2000      	movs	r0, #0
 8003084:	9000      	str	r0, [sp, #0]
 8003086:	68d0      	ldr	r0, [r2, #12]
 8003088:	9000      	str	r0, [sp, #0]
 800308a:	6890      	ldr	r0, [r2, #8]
 800308c:	9000      	str	r0, [sp, #0]
 800308e:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003090:	b165      	cbz	r5, 80030ac <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003094:	f040 0001 	orr.w	r0, r0, #1
 8003098:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800309a:	2000      	movs	r0, #0
 800309c:	9002      	str	r0, [sp, #8]
 800309e:	6890      	ldr	r0, [r2, #8]
 80030a0:	9002      	str	r0, [sp, #8]
 80030a2:	6810      	ldr	r0, [r2, #0]
 80030a4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80030a8:	6010      	str	r0, [r2, #0]
 80030aa:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80030ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030b0:	d009      	beq.n	80030c6 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80030b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9303      	str	r3, [sp, #12]
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	9303      	str	r3, [sp, #12]
 80030c4:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02f      	beq.n	800312c <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6853      	ldr	r3, [r2, #4]
 80030d0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80030d4:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030dc:	f011 0f03 	tst.w	r1, #3
 80030e0:	d02e      	beq.n	8003140 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6853      	ldr	r3, [r2, #4]
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80030ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80030ee:	b14b      	cbz	r3, 8003104 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_SPI_IRQHandler+0x120>)
 80030f2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80030f4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80030f6:	f7fe ff2c 	bl	8001f52 <HAL_DMA_Abort_IT>
 80030fa:	b118      	cbz	r0, 8003104 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003102:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003106:	b18b      	cbz	r3, 800312c <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_SPI_IRQHandler+0x120>)
 800310a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800310c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800310e:	f7fe ff20 	bl	8001f52 <HAL_DMA_Abort_IT>
 8003112:	b158      	cbz	r0, 800312c <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003114:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	6563      	str	r3, [r4, #84]	; 0x54
 800311c:	e006      	b.n	800312c <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 800311e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003120:	4620      	mov	r0, r4
 8003122:	4798      	blx	r3
    return;
 8003124:	e002      	b.n	800312c <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8003126:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003128:	4620      	mov	r0, r4
 800312a:	4798      	blx	r3
}
 800312c:	b005      	add	sp, #20
 800312e:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003130:	2300      	movs	r3, #0
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	68d3      	ldr	r3, [r2, #12]
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	6893      	ldr	r3, [r2, #8]
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	9b01      	ldr	r3, [sp, #4]
        return;
 800313e:	e7f5      	b.n	800312c <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fefa 	bl	8002f3a <HAL_SPI_ErrorCallback>
    return;
 8003146:	e7f1      	b.n	800312c <HAL_SPI_IRQHandler+0x104>
 8003148:	0800314d 	.word	0x0800314d

0800314c <SPI_DMAAbortOnError>:
{
 800314c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800314e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003154:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003156:	f7ff fef0 	bl	8002f3a <HAL_SPI_ErrorCallback>
}
 800315a:	bd08      	pop	{r3, pc}

0800315c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	6802      	ldr	r2, [r0, #0]
 8003162:	6913      	ldr	r3, [r2, #16]
 8003164:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003168:	68c1      	ldr	r1, [r0, #12]
 800316a:	430b      	orrs	r3, r1
 800316c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800316e:	6883      	ldr	r3, [r0, #8]
 8003170:	6902      	ldr	r2, [r0, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	6942      	ldr	r2, [r0, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	69c2      	ldr	r2, [r0, #28]
 800317a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800317c:	6801      	ldr	r1, [r0, #0]
 800317e:	68cb      	ldr	r3, [r1, #12]
 8003180:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003184:	f023 030c 	bic.w	r3, r3, #12
 8003188:	4313      	orrs	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	6953      	ldr	r3, [r2, #20]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	6981      	ldr	r1, [r0, #24]
 8003196:	430b      	orrs	r3, r1
 8003198:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319a:	69c3      	ldr	r3, [r0, #28]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d035      	beq.n	800320e <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <UART_SetConfig+0x1cc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f000 8091 	beq.w	80032ce <UART_SetConfig+0x172>
 80031ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b0:	4293      	cmp	r3, r2
 80031b2:	f000 808c 	beq.w	80032ce <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b6:	f7ff fbc9 	bl	800294c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ba:	2100      	movs	r1, #0
 80031bc:	1803      	adds	r3, r0, r0
 80031be:	4149      	adcs	r1, r1
 80031c0:	181b      	adds	r3, r3, r0
 80031c2:	f141 0100 	adc.w	r1, r1, #0
 80031c6:	00c9      	lsls	r1, r1, #3
 80031c8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1818      	adds	r0, r3, r0
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80031d6:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80031da:	f141 0100 	adc.w	r1, r1, #0
 80031de:	f7fd fd3b 	bl	8000c58 <__aeabi_uldivmod>
 80031e2:	4d52      	ldr	r5, [pc, #328]	; (800332c <UART_SetConfig+0x1d0>)
 80031e4:	fba5 3200 	umull	r3, r2, r5, r0
 80031e8:	0951      	lsrs	r1, r2, #5
 80031ea:	2364      	movs	r3, #100	; 0x64
 80031ec:	fb03 0311 	mls	r3, r3, r1, r0
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	fba5 2303 	umull	r2, r3, r5, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	4413      	add	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
    }
  }
}
 800320c:	e08a      	b.n	8003324 <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320e:	6803      	ldr	r3, [r0, #0]
 8003210:	4a45      	ldr	r2, [pc, #276]	; (8003328 <UART_SetConfig+0x1cc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02f      	beq.n	8003276 <UART_SetConfig+0x11a>
 8003216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800321a:	4293      	cmp	r3, r2
 800321c:	d02b      	beq.n	8003276 <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 800321e:	f7ff fb95 	bl	800294c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003222:	2300      	movs	r3, #0
 8003224:	1802      	adds	r2, r0, r0
 8003226:	eb43 0103 	adc.w	r1, r3, r3
 800322a:	1812      	adds	r2, r2, r0
 800322c:	f141 0100 	adc.w	r1, r1, #0
 8003230:	00c9      	lsls	r1, r1, #3
 8003232:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003236:	00d2      	lsls	r2, r2, #3
 8003238:	1810      	adds	r0, r2, r0
 800323a:	f141 0100 	adc.w	r1, r1, #0
 800323e:	6862      	ldr	r2, [r4, #4]
 8003240:	1892      	adds	r2, r2, r2
 8003242:	415b      	adcs	r3, r3
 8003244:	f7fd fd08 	bl	8000c58 <__aeabi_uldivmod>
 8003248:	4d38      	ldr	r5, [pc, #224]	; (800332c <UART_SetConfig+0x1d0>)
 800324a:	fba5 3200 	umull	r3, r2, r5, r0
 800324e:	0951      	lsrs	r1, r2, #5
 8003250:	2364      	movs	r3, #100	; 0x64
 8003252:	fb03 0311 	mls	r3, r3, r1, r0
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	fba5 2303 	umull	r2, r3, r5, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	005a      	lsls	r2, r3, #1
 8003262:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003266:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	6821      	ldr	r1, [r4, #0]
 8003270:	4413      	add	r3, r2
 8003272:	608b      	str	r3, [r1, #8]
 8003274:	e056      	b.n	8003324 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003276:	f7ff fb79 	bl	800296c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800327a:	2300      	movs	r3, #0
 800327c:	1802      	adds	r2, r0, r0
 800327e:	eb43 0103 	adc.w	r1, r3, r3
 8003282:	1812      	adds	r2, r2, r0
 8003284:	f141 0100 	adc.w	r1, r1, #0
 8003288:	00c9      	lsls	r1, r1, #3
 800328a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800328e:	00d2      	lsls	r2, r2, #3
 8003290:	1810      	adds	r0, r2, r0
 8003292:	f141 0100 	adc.w	r1, r1, #0
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	1892      	adds	r2, r2, r2
 800329a:	415b      	adcs	r3, r3
 800329c:	f7fd fcdc 	bl	8000c58 <__aeabi_uldivmod>
 80032a0:	4d22      	ldr	r5, [pc, #136]	; (800332c <UART_SetConfig+0x1d0>)
 80032a2:	fba5 3200 	umull	r3, r2, r5, r0
 80032a6:	0951      	lsrs	r1, r2, #5
 80032a8:	2364      	movs	r3, #100	; 0x64
 80032aa:	fb03 0311 	mls	r3, r3, r1, r0
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	fba5 2303 	umull	r2, r3, r5, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	005a      	lsls	r2, r3, #1
 80032ba:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80032be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	6821      	ldr	r1, [r4, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
 80032cc:	e02a      	b.n	8003324 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ce:	f7ff fb4d 	bl	800296c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d2:	2100      	movs	r1, #0
 80032d4:	1803      	adds	r3, r0, r0
 80032d6:	4149      	adcs	r1, r1
 80032d8:	181b      	adds	r3, r3, r0
 80032da:	f141 0100 	adc.w	r1, r1, #0
 80032de:	00c9      	lsls	r1, r1, #3
 80032e0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1818      	adds	r0, r3, r0
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80032ee:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80032f2:	f141 0100 	adc.w	r1, r1, #0
 80032f6:	f7fd fcaf 	bl	8000c58 <__aeabi_uldivmod>
 80032fa:	4d0c      	ldr	r5, [pc, #48]	; (800332c <UART_SetConfig+0x1d0>)
 80032fc:	fba5 3200 	umull	r3, r2, r5, r0
 8003300:	0951      	lsrs	r1, r2, #5
 8003302:	2364      	movs	r3, #100	; 0x64
 8003304:	fb03 0311 	mls	r3, r3, r1, r0
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	fba5 2303 	umull	r2, r3, r5, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003316:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	6821      	ldr	r1, [r4, #0]
 8003320:	4413      	add	r3, r2
 8003322:	608b      	str	r3, [r1, #8]
}
 8003324:	bd38      	pop	{r3, r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	40011000 	.word	0x40011000
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <UART_WaitOnFlagUntilTimeout>:
{
 8003330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003334:	4605      	mov	r5, r0
 8003336:	460f      	mov	r7, r1
 8003338:	4616      	mov	r6, r2
 800333a:	4699      	mov	r9, r3
 800333c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003340:	682c      	ldr	r4, [r5, #0]
 8003342:	6824      	ldr	r4, [r4, #0]
 8003344:	ea37 0304 	bics.w	r3, r7, r4
 8003348:	bf0c      	ite	eq
 800334a:	f04f 0c01 	moveq.w	ip, #1
 800334e:	f04f 0c00 	movne.w	ip, #0
 8003352:	45b4      	cmp	ip, r6
 8003354:	d11f      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8003356:	f1b8 3fff 	cmp.w	r8, #4294967295
 800335a:	d0f1      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800335c:	f1b8 0f00 	cmp.w	r8, #0
 8003360:	d005      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0x3e>
 8003362:	f7fe fc55 	bl	8001c10 <HAL_GetTick>
 8003366:	eba0 0009 	sub.w	r0, r0, r9
 800336a:	4540      	cmp	r0, r8
 800336c:	d9e8      	bls.n	8003340 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	682a      	ldr	r2, [r5, #0]
 8003370:	68d3      	ldr	r3, [r2, #12]
 8003372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003376:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	682a      	ldr	r2, [r5, #0]
 800337a:	6953      	ldr	r3, [r2, #20]
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003382:	2320      	movs	r3, #32
 8003384:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003388:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800338c:	2300      	movs	r3, #0
 800338e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003392:	2003      	movs	r0, #3
 8003394:	e000      	b.n	8003398 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8003396:	2000      	movs	r0, #0
}
 8003398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800339c <HAL_UART_Init>:
  if (huart == NULL)
 800339c:	b358      	cbz	r0, 80033f6 <HAL_UART_Init+0x5a>
{
 800339e:	b510      	push	{r4, lr}
 80033a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033a6:	b30b      	cbz	r3, 80033ec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	2324      	movs	r3, #36	; 0x24
 80033aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	68d3      	ldr	r3, [r2, #12]
 80033b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff fecf 	bl	800315c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	6913      	ldr	r3, [r2, #16]
 80033c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	6953      	ldr	r3, [r2, #20]
 80033cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80033d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	68d3      	ldr	r3, [r2, #12]
 80033d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	2000      	movs	r0, #0
 80033de:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	2320      	movs	r3, #32
 80033e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80033ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80033ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80033f0:	f7fe faa2 	bl	8001938 <HAL_UART_MspInit>
 80033f4:	e7d8      	b.n	80033a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
}
 80033f8:	4770      	bx	lr

080033fa <HAL_UART_Transmit>:
{
 80033fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003402:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d156      	bne.n	80034ba <HAL_UART_Transmit+0xc0>
 800340c:	4604      	mov	r4, r0
 800340e:	460d      	mov	r5, r1
 8003410:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003412:	2900      	cmp	r1, #0
 8003414:	d055      	beq.n	80034c2 <HAL_UART_Transmit+0xc8>
 8003416:	2a00      	cmp	r2, #0
 8003418:	d055      	beq.n	80034c6 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800341a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800341e:	2b01      	cmp	r3, #1
 8003420:	d053      	beq.n	80034ca <HAL_UART_Transmit+0xd0>
 8003422:	2301      	movs	r3, #1
 8003424:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	f04f 0900 	mov.w	r9, #0
 800342c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003430:	2321      	movs	r3, #33	; 0x21
 8003432:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003436:	f7fe fbeb 	bl	8001c10 <HAL_GetTick>
 800343a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800343c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003440:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003444:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003448:	e010      	b.n	800346c <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	9600      	str	r6, [sp, #0]
 800344c:	463b      	mov	r3, r7
 800344e:	2200      	movs	r2, #0
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ff6c 	bl	8003330 <UART_WaitOnFlagUntilTimeout>
 8003458:	2800      	cmp	r0, #0
 800345a:	d138      	bne.n	80034ce <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800345c:	882b      	ldrh	r3, [r5, #0]
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	b9cb      	cbnz	r3, 800349e <HAL_UART_Transmit+0xa4>
          pData += 2U;
 800346a:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800346c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800346e:	b29b      	uxth	r3, r3
 8003470:	b1bb      	cbz	r3, 80034a2 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8003472:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003474:	b292      	uxth	r2, r2
 8003476:	3a01      	subs	r2, #1
 8003478:	b292      	uxth	r2, r2
 800347a:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003482:	d0e2      	beq.n	800344a <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003484:	9600      	str	r6, [sp, #0]
 8003486:	463b      	mov	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff ff4f 	bl	8003330 <UART_WaitOnFlagUntilTimeout>
 8003492:	b9f0      	cbnz	r0, 80034d2 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003494:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	e7e6      	b.n	800346c <HAL_UART_Transmit+0x72>
          pData += 1U;
 800349e:	3501      	adds	r5, #1
 80034a0:	e7e4      	b.n	800346c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	9600      	str	r6, [sp, #0]
 80034a4:	463b      	mov	r3, r7
 80034a6:	2200      	movs	r2, #0
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff40 	bl	8003330 <UART_WaitOnFlagUntilTimeout>
 80034b0:	b988      	cbnz	r0, 80034d6 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80034b2:	2320      	movs	r3, #32
 80034b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80034b8:	e000      	b.n	80034bc <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80034ba:	2002      	movs	r0, #2
}
 80034bc:	b003      	add	sp, #12
 80034be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80034c2:	2001      	movs	r0, #1
 80034c4:	e7fa      	b.n	80034bc <HAL_UART_Transmit+0xc2>
 80034c6:	2001      	movs	r0, #1
 80034c8:	e7f8      	b.n	80034bc <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80034ca:	2002      	movs	r0, #2
 80034cc:	e7f6      	b.n	80034bc <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80034ce:	2003      	movs	r0, #3
 80034d0:	e7f4      	b.n	80034bc <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80034d2:	2003      	movs	r0, #3
 80034d4:	e7f2      	b.n	80034bc <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80034d6:	2003      	movs	r0, #3
 80034d8:	e7f0      	b.n	80034bc <HAL_UART_Transmit+0xc2>
	...

080034dc <__errno>:
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <__errno+0x8>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000010 	.word	0x20000010

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f002 fe20 	bl	8006140 <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	0800668c 	.word	0x0800668c
 8003524:	0800668c 	.word	0x0800668c
 8003528:	0800668c 	.word	0x0800668c
 800352c:	08006694 	.word	0x08006694

08003530 <memcpy>:
 8003530:	440a      	add	r2, r1
 8003532:	4291      	cmp	r1, r2
 8003534:	f100 33ff 	add.w	r3, r0, #4294967295
 8003538:	d100      	bne.n	800353c <memcpy+0xc>
 800353a:	4770      	bx	lr
 800353c:	b510      	push	{r4, lr}
 800353e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003546:	4291      	cmp	r1, r2
 8003548:	d1f9      	bne.n	800353e <memcpy+0xe>
 800354a:	bd10      	pop	{r4, pc}

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <__cvt>:
 800355c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	ec55 4b10 	vmov	r4, r5, d0
 8003564:	2d00      	cmp	r5, #0
 8003566:	460e      	mov	r6, r1
 8003568:	4619      	mov	r1, r3
 800356a:	462b      	mov	r3, r5
 800356c:	bfbb      	ittet	lt
 800356e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003572:	461d      	movlt	r5, r3
 8003574:	2300      	movge	r3, #0
 8003576:	232d      	movlt	r3, #45	; 0x2d
 8003578:	700b      	strb	r3, [r1, #0]
 800357a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800357c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003580:	4691      	mov	r9, r2
 8003582:	f023 0820 	bic.w	r8, r3, #32
 8003586:	bfbc      	itt	lt
 8003588:	4622      	movlt	r2, r4
 800358a:	4614      	movlt	r4, r2
 800358c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003590:	d005      	beq.n	800359e <__cvt+0x42>
 8003592:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003596:	d100      	bne.n	800359a <__cvt+0x3e>
 8003598:	3601      	adds	r6, #1
 800359a:	2102      	movs	r1, #2
 800359c:	e000      	b.n	80035a0 <__cvt+0x44>
 800359e:	2103      	movs	r1, #3
 80035a0:	ab03      	add	r3, sp, #12
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	ab02      	add	r3, sp, #8
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	ec45 4b10 	vmov	d0, r4, r5
 80035ac:	4653      	mov	r3, sl
 80035ae:	4632      	mov	r2, r6
 80035b0:	f000 fe2e 	bl	8004210 <_dtoa_r>
 80035b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035b8:	4607      	mov	r7, r0
 80035ba:	d102      	bne.n	80035c2 <__cvt+0x66>
 80035bc:	f019 0f01 	tst.w	r9, #1
 80035c0:	d022      	beq.n	8003608 <__cvt+0xac>
 80035c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035c6:	eb07 0906 	add.w	r9, r7, r6
 80035ca:	d110      	bne.n	80035ee <__cvt+0x92>
 80035cc:	783b      	ldrb	r3, [r7, #0]
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d10a      	bne.n	80035e8 <__cvt+0x8c>
 80035d2:	2200      	movs	r2, #0
 80035d4:	2300      	movs	r3, #0
 80035d6:	4620      	mov	r0, r4
 80035d8:	4629      	mov	r1, r5
 80035da:	f7fd fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80035de:	b918      	cbnz	r0, 80035e8 <__cvt+0x8c>
 80035e0:	f1c6 0601 	rsb	r6, r6, #1
 80035e4:	f8ca 6000 	str.w	r6, [sl]
 80035e8:	f8da 3000 	ldr.w	r3, [sl]
 80035ec:	4499      	add	r9, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	2300      	movs	r3, #0
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fd fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80035fa:	b108      	cbz	r0, 8003600 <__cvt+0xa4>
 80035fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003600:	2230      	movs	r2, #48	; 0x30
 8003602:	9b03      	ldr	r3, [sp, #12]
 8003604:	454b      	cmp	r3, r9
 8003606:	d307      	bcc.n	8003618 <__cvt+0xbc>
 8003608:	9b03      	ldr	r3, [sp, #12]
 800360a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800360c:	1bdb      	subs	r3, r3, r7
 800360e:	4638      	mov	r0, r7
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	b004      	add	sp, #16
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	1c59      	adds	r1, r3, #1
 800361a:	9103      	str	r1, [sp, #12]
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e7f0      	b.n	8003602 <__cvt+0xa6>

08003620 <__exponent>:
 8003620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003622:	4603      	mov	r3, r0
 8003624:	2900      	cmp	r1, #0
 8003626:	bfb8      	it	lt
 8003628:	4249      	neglt	r1, r1
 800362a:	f803 2b02 	strb.w	r2, [r3], #2
 800362e:	bfb4      	ite	lt
 8003630:	222d      	movlt	r2, #45	; 0x2d
 8003632:	222b      	movge	r2, #43	; 0x2b
 8003634:	2909      	cmp	r1, #9
 8003636:	7042      	strb	r2, [r0, #1]
 8003638:	dd2a      	ble.n	8003690 <__exponent+0x70>
 800363a:	f10d 0407 	add.w	r4, sp, #7
 800363e:	46a4      	mov	ip, r4
 8003640:	270a      	movs	r7, #10
 8003642:	46a6      	mov	lr, r4
 8003644:	460a      	mov	r2, r1
 8003646:	fb91 f6f7 	sdiv	r6, r1, r7
 800364a:	fb07 1516 	mls	r5, r7, r6, r1
 800364e:	3530      	adds	r5, #48	; 0x30
 8003650:	2a63      	cmp	r2, #99	; 0x63
 8003652:	f104 34ff 	add.w	r4, r4, #4294967295
 8003656:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800365a:	4631      	mov	r1, r6
 800365c:	dcf1      	bgt.n	8003642 <__exponent+0x22>
 800365e:	3130      	adds	r1, #48	; 0x30
 8003660:	f1ae 0502 	sub.w	r5, lr, #2
 8003664:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003668:	1c44      	adds	r4, r0, #1
 800366a:	4629      	mov	r1, r5
 800366c:	4561      	cmp	r1, ip
 800366e:	d30a      	bcc.n	8003686 <__exponent+0x66>
 8003670:	f10d 0209 	add.w	r2, sp, #9
 8003674:	eba2 020e 	sub.w	r2, r2, lr
 8003678:	4565      	cmp	r5, ip
 800367a:	bf88      	it	hi
 800367c:	2200      	movhi	r2, #0
 800367e:	4413      	add	r3, r2
 8003680:	1a18      	subs	r0, r3, r0
 8003682:	b003      	add	sp, #12
 8003684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800368a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800368e:	e7ed      	b.n	800366c <__exponent+0x4c>
 8003690:	2330      	movs	r3, #48	; 0x30
 8003692:	3130      	adds	r1, #48	; 0x30
 8003694:	7083      	strb	r3, [r0, #2]
 8003696:	70c1      	strb	r1, [r0, #3]
 8003698:	1d03      	adds	r3, r0, #4
 800369a:	e7f1      	b.n	8003680 <__exponent+0x60>

0800369c <_printf_float>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	ed2d 8b02 	vpush	{d8}
 80036a4:	b08d      	sub	sp, #52	; 0x34
 80036a6:	460c      	mov	r4, r1
 80036a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80036ac:	4616      	mov	r6, r2
 80036ae:	461f      	mov	r7, r3
 80036b0:	4605      	mov	r5, r0
 80036b2:	f001 fd53 	bl	800515c <_localeconv_r>
 80036b6:	f8d0 a000 	ldr.w	sl, [r0]
 80036ba:	4650      	mov	r0, sl
 80036bc:	f7fc fd90 	bl	80001e0 <strlen>
 80036c0:	2300      	movs	r3, #0
 80036c2:	930a      	str	r3, [sp, #40]	; 0x28
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	f8d8 3000 	ldr.w	r3, [r8]
 80036cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036d0:	3307      	adds	r3, #7
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	f103 0208 	add.w	r2, r3, #8
 80036da:	f8c8 2000 	str.w	r2, [r8]
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80036ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036ee:	9307      	str	r3, [sp, #28]
 80036f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80036f4:	ee08 0a10 	vmov	s16, r0
 80036f8:	4b9f      	ldr	r3, [pc, #636]	; (8003978 <_printf_float+0x2dc>)
 80036fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003702:	f7fd fa1b 	bl	8000b3c <__aeabi_dcmpun>
 8003706:	bb88      	cbnz	r0, 800376c <_printf_float+0xd0>
 8003708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800370c:	4b9a      	ldr	r3, [pc, #616]	; (8003978 <_printf_float+0x2dc>)
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	f7fd f9f5 	bl	8000b00 <__aeabi_dcmple>
 8003716:	bb48      	cbnz	r0, 800376c <_printf_float+0xd0>
 8003718:	2200      	movs	r2, #0
 800371a:	2300      	movs	r3, #0
 800371c:	4640      	mov	r0, r8
 800371e:	4649      	mov	r1, r9
 8003720:	f7fd f9e4 	bl	8000aec <__aeabi_dcmplt>
 8003724:	b110      	cbz	r0, 800372c <_printf_float+0x90>
 8003726:	232d      	movs	r3, #45	; 0x2d
 8003728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372c:	4b93      	ldr	r3, [pc, #588]	; (800397c <_printf_float+0x2e0>)
 800372e:	4894      	ldr	r0, [pc, #592]	; (8003980 <_printf_float+0x2e4>)
 8003730:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003734:	bf94      	ite	ls
 8003736:	4698      	movls	r8, r3
 8003738:	4680      	movhi	r8, r0
 800373a:	2303      	movs	r3, #3
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	9b05      	ldr	r3, [sp, #20]
 8003740:	f023 0204 	bic.w	r2, r3, #4
 8003744:	6022      	str	r2, [r4, #0]
 8003746:	f04f 0900 	mov.w	r9, #0
 800374a:	9700      	str	r7, [sp, #0]
 800374c:	4633      	mov	r3, r6
 800374e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003750:	4621      	mov	r1, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 f9d8 	bl	8003b08 <_printf_common>
 8003758:	3001      	adds	r0, #1
 800375a:	f040 8090 	bne.w	800387e <_printf_float+0x1e2>
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	b00d      	add	sp, #52	; 0x34
 8003764:	ecbd 8b02 	vpop	{d8}
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	4640      	mov	r0, r8
 8003772:	4649      	mov	r1, r9
 8003774:	f7fd f9e2 	bl	8000b3c <__aeabi_dcmpun>
 8003778:	b140      	cbz	r0, 800378c <_printf_float+0xf0>
 800377a:	464b      	mov	r3, r9
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfbc      	itt	lt
 8003780:	232d      	movlt	r3, #45	; 0x2d
 8003782:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003786:	487f      	ldr	r0, [pc, #508]	; (8003984 <_printf_float+0x2e8>)
 8003788:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <_printf_float+0x2ec>)
 800378a:	e7d1      	b.n	8003730 <_printf_float+0x94>
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003792:	9206      	str	r2, [sp, #24]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	d13f      	bne.n	8003818 <_printf_float+0x17c>
 8003798:	2306      	movs	r3, #6
 800379a:	6063      	str	r3, [r4, #4]
 800379c:	9b05      	ldr	r3, [sp, #20]
 800379e:	6861      	ldr	r1, [r4, #4]
 80037a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037a4:	2300      	movs	r3, #0
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	ab0a      	add	r3, sp, #40	; 0x28
 80037aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80037ae:	ab09      	add	r3, sp, #36	; 0x24
 80037b0:	ec49 8b10 	vmov	d0, r8, r9
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	6022      	str	r2, [r4, #0]
 80037b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80037bc:	4628      	mov	r0, r5
 80037be:	f7ff fecd 	bl	800355c <__cvt>
 80037c2:	9b06      	ldr	r3, [sp, #24]
 80037c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037c6:	2b47      	cmp	r3, #71	; 0x47
 80037c8:	4680      	mov	r8, r0
 80037ca:	d108      	bne.n	80037de <_printf_float+0x142>
 80037cc:	1cc8      	adds	r0, r1, #3
 80037ce:	db02      	blt.n	80037d6 <_printf_float+0x13a>
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	4299      	cmp	r1, r3
 80037d4:	dd41      	ble.n	800385a <_printf_float+0x1be>
 80037d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80037da:	fa5f fb8b 	uxtb.w	fp, fp
 80037de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037e2:	d820      	bhi.n	8003826 <_printf_float+0x18a>
 80037e4:	3901      	subs	r1, #1
 80037e6:	465a      	mov	r2, fp
 80037e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037ec:	9109      	str	r1, [sp, #36]	; 0x24
 80037ee:	f7ff ff17 	bl	8003620 <__exponent>
 80037f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037f4:	1813      	adds	r3, r2, r0
 80037f6:	2a01      	cmp	r2, #1
 80037f8:	4681      	mov	r9, r0
 80037fa:	6123      	str	r3, [r4, #16]
 80037fc:	dc02      	bgt.n	8003804 <_printf_float+0x168>
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	07d2      	lsls	r2, r2, #31
 8003802:	d501      	bpl.n	8003808 <_printf_float+0x16c>
 8003804:	3301      	adds	r3, #1
 8003806:	6123      	str	r3, [r4, #16]
 8003808:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800380c:	2b00      	cmp	r3, #0
 800380e:	d09c      	beq.n	800374a <_printf_float+0xae>
 8003810:	232d      	movs	r3, #45	; 0x2d
 8003812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003816:	e798      	b.n	800374a <_printf_float+0xae>
 8003818:	9a06      	ldr	r2, [sp, #24]
 800381a:	2a47      	cmp	r2, #71	; 0x47
 800381c:	d1be      	bne.n	800379c <_printf_float+0x100>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1bc      	bne.n	800379c <_printf_float+0x100>
 8003822:	2301      	movs	r3, #1
 8003824:	e7b9      	b.n	800379a <_printf_float+0xfe>
 8003826:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800382a:	d118      	bne.n	800385e <_printf_float+0x1c2>
 800382c:	2900      	cmp	r1, #0
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	dd0b      	ble.n	800384a <_printf_float+0x1ae>
 8003832:	6121      	str	r1, [r4, #16]
 8003834:	b913      	cbnz	r3, 800383c <_printf_float+0x1a0>
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	07d0      	lsls	r0, r2, #31
 800383a:	d502      	bpl.n	8003842 <_printf_float+0x1a6>
 800383c:	3301      	adds	r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	65a1      	str	r1, [r4, #88]	; 0x58
 8003844:	f04f 0900 	mov.w	r9, #0
 8003848:	e7de      	b.n	8003808 <_printf_float+0x16c>
 800384a:	b913      	cbnz	r3, 8003852 <_printf_float+0x1b6>
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	07d2      	lsls	r2, r2, #31
 8003850:	d501      	bpl.n	8003856 <_printf_float+0x1ba>
 8003852:	3302      	adds	r3, #2
 8003854:	e7f4      	b.n	8003840 <_printf_float+0x1a4>
 8003856:	2301      	movs	r3, #1
 8003858:	e7f2      	b.n	8003840 <_printf_float+0x1a4>
 800385a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800385e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003860:	4299      	cmp	r1, r3
 8003862:	db05      	blt.n	8003870 <_printf_float+0x1d4>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6121      	str	r1, [r4, #16]
 8003868:	07d8      	lsls	r0, r3, #31
 800386a:	d5ea      	bpl.n	8003842 <_printf_float+0x1a6>
 800386c:	1c4b      	adds	r3, r1, #1
 800386e:	e7e7      	b.n	8003840 <_printf_float+0x1a4>
 8003870:	2900      	cmp	r1, #0
 8003872:	bfd4      	ite	le
 8003874:	f1c1 0202 	rsble	r2, r1, #2
 8003878:	2201      	movgt	r2, #1
 800387a:	4413      	add	r3, r2
 800387c:	e7e0      	b.n	8003840 <_printf_float+0x1a4>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	055a      	lsls	r2, r3, #21
 8003882:	d407      	bmi.n	8003894 <_printf_float+0x1f8>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	4642      	mov	r2, r8
 8003888:	4631      	mov	r1, r6
 800388a:	4628      	mov	r0, r5
 800388c:	47b8      	blx	r7
 800388e:	3001      	adds	r0, #1
 8003890:	d12c      	bne.n	80038ec <_printf_float+0x250>
 8003892:	e764      	b.n	800375e <_printf_float+0xc2>
 8003894:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003898:	f240 80e0 	bls.w	8003a5c <_printf_float+0x3c0>
 800389c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038a0:	2200      	movs	r2, #0
 80038a2:	2300      	movs	r3, #0
 80038a4:	f7fd f918 	bl	8000ad8 <__aeabi_dcmpeq>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d034      	beq.n	8003916 <_printf_float+0x27a>
 80038ac:	4a37      	ldr	r2, [pc, #220]	; (800398c <_printf_float+0x2f0>)
 80038ae:	2301      	movs	r3, #1
 80038b0:	4631      	mov	r1, r6
 80038b2:	4628      	mov	r0, r5
 80038b4:	47b8      	blx	r7
 80038b6:	3001      	adds	r0, #1
 80038b8:	f43f af51 	beq.w	800375e <_printf_float+0xc2>
 80038bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038c0:	429a      	cmp	r2, r3
 80038c2:	db02      	blt.n	80038ca <_printf_float+0x22e>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	07d8      	lsls	r0, r3, #31
 80038c8:	d510      	bpl.n	80038ec <_printf_float+0x250>
 80038ca:	ee18 3a10 	vmov	r3, s16
 80038ce:	4652      	mov	r2, sl
 80038d0:	4631      	mov	r1, r6
 80038d2:	4628      	mov	r0, r5
 80038d4:	47b8      	blx	r7
 80038d6:	3001      	adds	r0, #1
 80038d8:	f43f af41 	beq.w	800375e <_printf_float+0xc2>
 80038dc:	f04f 0800 	mov.w	r8, #0
 80038e0:	f104 091a 	add.w	r9, r4, #26
 80038e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	4543      	cmp	r3, r8
 80038ea:	dc09      	bgt.n	8003900 <_printf_float+0x264>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	079b      	lsls	r3, r3, #30
 80038f0:	f100 8105 	bmi.w	8003afe <_printf_float+0x462>
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038f8:	4298      	cmp	r0, r3
 80038fa:	bfb8      	it	lt
 80038fc:	4618      	movlt	r0, r3
 80038fe:	e730      	b.n	8003762 <_printf_float+0xc6>
 8003900:	2301      	movs	r3, #1
 8003902:	464a      	mov	r2, r9
 8003904:	4631      	mov	r1, r6
 8003906:	4628      	mov	r0, r5
 8003908:	47b8      	blx	r7
 800390a:	3001      	adds	r0, #1
 800390c:	f43f af27 	beq.w	800375e <_printf_float+0xc2>
 8003910:	f108 0801 	add.w	r8, r8, #1
 8003914:	e7e6      	b.n	80038e4 <_printf_float+0x248>
 8003916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	dc39      	bgt.n	8003990 <_printf_float+0x2f4>
 800391c:	4a1b      	ldr	r2, [pc, #108]	; (800398c <_printf_float+0x2f0>)
 800391e:	2301      	movs	r3, #1
 8003920:	4631      	mov	r1, r6
 8003922:	4628      	mov	r0, r5
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f af19 	beq.w	800375e <_printf_float+0xc2>
 800392c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003930:	4313      	orrs	r3, r2
 8003932:	d102      	bne.n	800393a <_printf_float+0x29e>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	07d9      	lsls	r1, r3, #31
 8003938:	d5d8      	bpl.n	80038ec <_printf_float+0x250>
 800393a:	ee18 3a10 	vmov	r3, s16
 800393e:	4652      	mov	r2, sl
 8003940:	4631      	mov	r1, r6
 8003942:	4628      	mov	r0, r5
 8003944:	47b8      	blx	r7
 8003946:	3001      	adds	r0, #1
 8003948:	f43f af09 	beq.w	800375e <_printf_float+0xc2>
 800394c:	f04f 0900 	mov.w	r9, #0
 8003950:	f104 0a1a 	add.w	sl, r4, #26
 8003954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003956:	425b      	negs	r3, r3
 8003958:	454b      	cmp	r3, r9
 800395a:	dc01      	bgt.n	8003960 <_printf_float+0x2c4>
 800395c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800395e:	e792      	b.n	8003886 <_printf_float+0x1ea>
 8003960:	2301      	movs	r3, #1
 8003962:	4652      	mov	r2, sl
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	f43f aef7 	beq.w	800375e <_printf_float+0xc2>
 8003970:	f109 0901 	add.w	r9, r9, #1
 8003974:	e7ee      	b.n	8003954 <_printf_float+0x2b8>
 8003976:	bf00      	nop
 8003978:	7fefffff 	.word	0x7fefffff
 800397c:	080062ac 	.word	0x080062ac
 8003980:	080062b0 	.word	0x080062b0
 8003984:	080062b8 	.word	0x080062b8
 8003988:	080062b4 	.word	0x080062b4
 800398c:	080062bc 	.word	0x080062bc
 8003990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003994:	429a      	cmp	r2, r3
 8003996:	bfa8      	it	ge
 8003998:	461a      	movge	r2, r3
 800399a:	2a00      	cmp	r2, #0
 800399c:	4691      	mov	r9, r2
 800399e:	dc37      	bgt.n	8003a10 <_printf_float+0x374>
 80039a0:	f04f 0b00 	mov.w	fp, #0
 80039a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039a8:	f104 021a 	add.w	r2, r4, #26
 80039ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	eba3 0309 	sub.w	r3, r3, r9
 80039b4:	455b      	cmp	r3, fp
 80039b6:	dc33      	bgt.n	8003a20 <_printf_float+0x384>
 80039b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039bc:	429a      	cmp	r2, r3
 80039be:	db3b      	blt.n	8003a38 <_printf_float+0x39c>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	07da      	lsls	r2, r3, #31
 80039c4:	d438      	bmi.n	8003a38 <_printf_float+0x39c>
 80039c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039c8:	9a05      	ldr	r2, [sp, #20]
 80039ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039cc:	1a9a      	subs	r2, r3, r2
 80039ce:	eba3 0901 	sub.w	r9, r3, r1
 80039d2:	4591      	cmp	r9, r2
 80039d4:	bfa8      	it	ge
 80039d6:	4691      	movge	r9, r2
 80039d8:	f1b9 0f00 	cmp.w	r9, #0
 80039dc:	dc35      	bgt.n	8003a4a <_printf_float+0x3ae>
 80039de:	f04f 0800 	mov.w	r8, #0
 80039e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039e6:	f104 0a1a 	add.w	sl, r4, #26
 80039ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	eba3 0309 	sub.w	r3, r3, r9
 80039f4:	4543      	cmp	r3, r8
 80039f6:	f77f af79 	ble.w	80038ec <_printf_float+0x250>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4652      	mov	r2, sl
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	f43f aeaa 	beq.w	800375e <_printf_float+0xc2>
 8003a0a:	f108 0801 	add.w	r8, r8, #1
 8003a0e:	e7ec      	b.n	80039ea <_printf_float+0x34e>
 8003a10:	4613      	mov	r3, r2
 8003a12:	4631      	mov	r1, r6
 8003a14:	4642      	mov	r2, r8
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b8      	blx	r7
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d1c0      	bne.n	80039a0 <_printf_float+0x304>
 8003a1e:	e69e      	b.n	800375e <_printf_float+0xc2>
 8003a20:	2301      	movs	r3, #1
 8003a22:	4631      	mov	r1, r6
 8003a24:	4628      	mov	r0, r5
 8003a26:	9205      	str	r2, [sp, #20]
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f43f ae97 	beq.w	800375e <_printf_float+0xc2>
 8003a30:	9a05      	ldr	r2, [sp, #20]
 8003a32:	f10b 0b01 	add.w	fp, fp, #1
 8003a36:	e7b9      	b.n	80039ac <_printf_float+0x310>
 8003a38:	ee18 3a10 	vmov	r3, s16
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	d1be      	bne.n	80039c6 <_printf_float+0x32a>
 8003a48:	e689      	b.n	800375e <_printf_float+0xc2>
 8003a4a:	9a05      	ldr	r2, [sp, #20]
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	4442      	add	r2, r8
 8003a50:	4631      	mov	r1, r6
 8003a52:	4628      	mov	r0, r5
 8003a54:	47b8      	blx	r7
 8003a56:	3001      	adds	r0, #1
 8003a58:	d1c1      	bne.n	80039de <_printf_float+0x342>
 8003a5a:	e680      	b.n	800375e <_printf_float+0xc2>
 8003a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a5e:	2a01      	cmp	r2, #1
 8003a60:	dc01      	bgt.n	8003a66 <_printf_float+0x3ca>
 8003a62:	07db      	lsls	r3, r3, #31
 8003a64:	d538      	bpl.n	8003ad8 <_printf_float+0x43c>
 8003a66:	2301      	movs	r3, #1
 8003a68:	4642      	mov	r2, r8
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	f43f ae74 	beq.w	800375e <_printf_float+0xc2>
 8003a76:	ee18 3a10 	vmov	r3, s16
 8003a7a:	4652      	mov	r2, sl
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4628      	mov	r0, r5
 8003a80:	47b8      	blx	r7
 8003a82:	3001      	adds	r0, #1
 8003a84:	f43f ae6b 	beq.w	800375e <_printf_float+0xc2>
 8003a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f7fd f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a94:	b9d8      	cbnz	r0, 8003ace <_printf_float+0x432>
 8003a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a98:	f108 0201 	add.w	r2, r8, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b8      	blx	r7
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d10e      	bne.n	8003ac6 <_printf_float+0x42a>
 8003aa8:	e659      	b.n	800375e <_printf_float+0xc2>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4652      	mov	r2, sl
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b8      	blx	r7
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	f43f ae52 	beq.w	800375e <_printf_float+0xc2>
 8003aba:	f108 0801 	add.w	r8, r8, #1
 8003abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4543      	cmp	r3, r8
 8003ac4:	dcf1      	bgt.n	8003aaa <_printf_float+0x40e>
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003acc:	e6dc      	b.n	8003888 <_printf_float+0x1ec>
 8003ace:	f04f 0800 	mov.w	r8, #0
 8003ad2:	f104 0a1a 	add.w	sl, r4, #26
 8003ad6:	e7f2      	b.n	8003abe <_printf_float+0x422>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4642      	mov	r2, r8
 8003adc:	e7df      	b.n	8003a9e <_printf_float+0x402>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	464a      	mov	r2, r9
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	f43f ae38 	beq.w	800375e <_printf_float+0xc2>
 8003aee:	f108 0801 	add.w	r8, r8, #1
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003af6:	1a5b      	subs	r3, r3, r1
 8003af8:	4543      	cmp	r3, r8
 8003afa:	dcf0      	bgt.n	8003ade <_printf_float+0x442>
 8003afc:	e6fa      	b.n	80038f4 <_printf_float+0x258>
 8003afe:	f04f 0800 	mov.w	r8, #0
 8003b02:	f104 0919 	add.w	r9, r4, #25
 8003b06:	e7f4      	b.n	8003af2 <_printf_float+0x456>

08003b08 <_printf_common>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	4699      	mov	r9, r3
 8003b10:	688a      	ldr	r2, [r1, #8]
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bfb8      	it	lt
 8003b1c:	4613      	movlt	r3, r2
 8003b1e:	6033      	str	r3, [r6, #0]
 8003b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b24:	4607      	mov	r7, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	b10a      	cbz	r2, 8003b2e <_printf_common+0x26>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	0699      	lsls	r1, r3, #26
 8003b32:	bf42      	ittt	mi
 8003b34:	6833      	ldrmi	r3, [r6, #0]
 8003b36:	3302      	addmi	r3, #2
 8003b38:	6033      	strmi	r3, [r6, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	f015 0506 	ands.w	r5, r5, #6
 8003b40:	d106      	bne.n	8003b50 <_printf_common+0x48>
 8003b42:	f104 0a19 	add.w	sl, r4, #25
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	6832      	ldr	r2, [r6, #0]
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dc26      	bgt.n	8003b9e <_printf_common+0x96>
 8003b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b54:	1e13      	subs	r3, r2, #0
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	bf18      	it	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	0692      	lsls	r2, r2, #26
 8003b5e:	d42b      	bmi.n	8003bb8 <_printf_common+0xb0>
 8003b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b64:	4649      	mov	r1, r9
 8003b66:	4638      	mov	r0, r7
 8003b68:	47c0      	blx	r8
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d01e      	beq.n	8003bac <_printf_common+0xa4>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	68e5      	ldr	r5, [r4, #12]
 8003b72:	6832      	ldr	r2, [r6, #0]
 8003b74:	f003 0306 	and.w	r3, r3, #6
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	bf08      	it	eq
 8003b7c:	1aad      	subeq	r5, r5, r2
 8003b7e:	68a3      	ldr	r3, [r4, #8]
 8003b80:	6922      	ldr	r2, [r4, #16]
 8003b82:	bf0c      	ite	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	2500      	movne	r5, #0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bfc4      	itt	gt
 8003b8e:	1a9b      	subgt	r3, r3, r2
 8003b90:	18ed      	addgt	r5, r5, r3
 8003b92:	2600      	movs	r6, #0
 8003b94:	341a      	adds	r4, #26
 8003b96:	42b5      	cmp	r5, r6
 8003b98:	d11a      	bne.n	8003bd0 <_printf_common+0xc8>
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	e008      	b.n	8003bb0 <_printf_common+0xa8>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	4652      	mov	r2, sl
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	47c0      	blx	r8
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d103      	bne.n	8003bb4 <_printf_common+0xac>
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	e7c6      	b.n	8003b46 <_printf_common+0x3e>
 8003bb8:	18e1      	adds	r1, r4, r3
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	2030      	movs	r0, #48	; 0x30
 8003bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bc2:	4422      	add	r2, r4
 8003bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bcc:	3302      	adds	r3, #2
 8003bce:	e7c7      	b.n	8003b60 <_printf_common+0x58>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	47c0      	blx	r8
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d0e6      	beq.n	8003bac <_printf_common+0xa4>
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7d9      	b.n	8003b96 <_printf_common+0x8e>
	...

08003be4 <_printf_i>:
 8003be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	7e0f      	ldrb	r7, [r1, #24]
 8003bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bec:	2f78      	cmp	r7, #120	; 0x78
 8003bee:	4691      	mov	r9, r2
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	469a      	mov	sl, r3
 8003bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bfa:	d807      	bhi.n	8003c0c <_printf_i+0x28>
 8003bfc:	2f62      	cmp	r7, #98	; 0x62
 8003bfe:	d80a      	bhi.n	8003c16 <_printf_i+0x32>
 8003c00:	2f00      	cmp	r7, #0
 8003c02:	f000 80d8 	beq.w	8003db6 <_printf_i+0x1d2>
 8003c06:	2f58      	cmp	r7, #88	; 0x58
 8003c08:	f000 80a3 	beq.w	8003d52 <_printf_i+0x16e>
 8003c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c14:	e03a      	b.n	8003c8c <_printf_i+0xa8>
 8003c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c1a:	2b15      	cmp	r3, #21
 8003c1c:	d8f6      	bhi.n	8003c0c <_printf_i+0x28>
 8003c1e:	a101      	add	r1, pc, #4	; (adr r1, 8003c24 <_printf_i+0x40>)
 8003c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003c0d 	.word	0x08003c0d
 8003c30:	08003c0d 	.word	0x08003c0d
 8003c34:	08003c0d 	.word	0x08003c0d
 8003c38:	08003c0d 	.word	0x08003c0d
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003c0d 	.word	0x08003c0d
 8003c44:	08003c0d 	.word	0x08003c0d
 8003c48:	08003c0d 	.word	0x08003c0d
 8003c4c:	08003c0d 	.word	0x08003c0d
 8003c50:	08003d9d 	.word	0x08003d9d
 8003c54:	08003cc1 	.word	0x08003cc1
 8003c58:	08003d7f 	.word	0x08003d7f
 8003c5c:	08003c0d 	.word	0x08003c0d
 8003c60:	08003c0d 	.word	0x08003c0d
 8003c64:	08003dbf 	.word	0x08003dbf
 8003c68:	08003c0d 	.word	0x08003c0d
 8003c6c:	08003cc1 	.word	0x08003cc1
 8003c70:	08003c0d 	.word	0x08003c0d
 8003c74:	08003c0d 	.word	0x08003c0d
 8003c78:	08003d87 	.word	0x08003d87
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	1d1a      	adds	r2, r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	602a      	str	r2, [r5, #0]
 8003c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0a3      	b.n	8003dd8 <_printf_i+0x1f4>
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	6829      	ldr	r1, [r5, #0]
 8003c94:	0606      	lsls	r6, r0, #24
 8003c96:	f101 0304 	add.w	r3, r1, #4
 8003c9a:	d50a      	bpl.n	8003cb2 <_printf_i+0xce>
 8003c9c:	680e      	ldr	r6, [r1, #0]
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	da03      	bge.n	8003cac <_printf_i+0xc8>
 8003ca4:	232d      	movs	r3, #45	; 0x2d
 8003ca6:	4276      	negs	r6, r6
 8003ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cac:	485e      	ldr	r0, [pc, #376]	; (8003e28 <_printf_i+0x244>)
 8003cae:	230a      	movs	r3, #10
 8003cb0:	e019      	b.n	8003ce6 <_printf_i+0x102>
 8003cb2:	680e      	ldr	r6, [r1, #0]
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cba:	bf18      	it	ne
 8003cbc:	b236      	sxthne	r6, r6
 8003cbe:	e7ef      	b.n	8003ca0 <_printf_i+0xbc>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	6820      	ldr	r0, [r4, #0]
 8003cc4:	1d19      	adds	r1, r3, #4
 8003cc6:	6029      	str	r1, [r5, #0]
 8003cc8:	0601      	lsls	r1, r0, #24
 8003cca:	d501      	bpl.n	8003cd0 <_printf_i+0xec>
 8003ccc:	681e      	ldr	r6, [r3, #0]
 8003cce:	e002      	b.n	8003cd6 <_printf_i+0xf2>
 8003cd0:	0646      	lsls	r6, r0, #25
 8003cd2:	d5fb      	bpl.n	8003ccc <_printf_i+0xe8>
 8003cd4:	881e      	ldrh	r6, [r3, #0]
 8003cd6:	4854      	ldr	r0, [pc, #336]	; (8003e28 <_printf_i+0x244>)
 8003cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8003cda:	bf0c      	ite	eq
 8003cdc:	2308      	moveq	r3, #8
 8003cde:	230a      	movne	r3, #10
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ce6:	6865      	ldr	r5, [r4, #4]
 8003ce8:	60a5      	str	r5, [r4, #8]
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	bfa2      	ittt	ge
 8003cee:	6821      	ldrge	r1, [r4, #0]
 8003cf0:	f021 0104 	bicge.w	r1, r1, #4
 8003cf4:	6021      	strge	r1, [r4, #0]
 8003cf6:	b90e      	cbnz	r6, 8003cfc <_printf_i+0x118>
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	d04d      	beq.n	8003d98 <_printf_i+0x1b4>
 8003cfc:	4615      	mov	r5, r2
 8003cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d02:	fb03 6711 	mls	r7, r3, r1, r6
 8003d06:	5dc7      	ldrb	r7, [r0, r7]
 8003d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d0c:	4637      	mov	r7, r6
 8003d0e:	42bb      	cmp	r3, r7
 8003d10:	460e      	mov	r6, r1
 8003d12:	d9f4      	bls.n	8003cfe <_printf_i+0x11a>
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d10b      	bne.n	8003d30 <_printf_i+0x14c>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	07de      	lsls	r6, r3, #31
 8003d1c:	d508      	bpl.n	8003d30 <_printf_i+0x14c>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	6861      	ldr	r1, [r4, #4]
 8003d22:	4299      	cmp	r1, r3
 8003d24:	bfde      	ittt	le
 8003d26:	2330      	movle	r3, #48	; 0x30
 8003d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d30:	1b52      	subs	r2, r2, r5
 8003d32:	6122      	str	r2, [r4, #16]
 8003d34:	f8cd a000 	str.w	sl, [sp]
 8003d38:	464b      	mov	r3, r9
 8003d3a:	aa03      	add	r2, sp, #12
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4640      	mov	r0, r8
 8003d40:	f7ff fee2 	bl	8003b08 <_printf_common>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d14c      	bne.n	8003de2 <_printf_i+0x1fe>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	b004      	add	sp, #16
 8003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d52:	4835      	ldr	r0, [pc, #212]	; (8003e28 <_printf_i+0x244>)
 8003d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d58:	6829      	ldr	r1, [r5, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d60:	6029      	str	r1, [r5, #0]
 8003d62:	061d      	lsls	r5, r3, #24
 8003d64:	d514      	bpl.n	8003d90 <_printf_i+0x1ac>
 8003d66:	07df      	lsls	r7, r3, #31
 8003d68:	bf44      	itt	mi
 8003d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d6e:	6023      	strmi	r3, [r4, #0]
 8003d70:	b91e      	cbnz	r6, 8003d7a <_printf_i+0x196>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f023 0320 	bic.w	r3, r3, #32
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	e7b0      	b.n	8003ce0 <_printf_i+0xfc>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	f043 0320 	orr.w	r3, r3, #32
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	2378      	movs	r3, #120	; 0x78
 8003d88:	4828      	ldr	r0, [pc, #160]	; (8003e2c <_printf_i+0x248>)
 8003d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d8e:	e7e3      	b.n	8003d58 <_printf_i+0x174>
 8003d90:	0659      	lsls	r1, r3, #25
 8003d92:	bf48      	it	mi
 8003d94:	b2b6      	uxthmi	r6, r6
 8003d96:	e7e6      	b.n	8003d66 <_printf_i+0x182>
 8003d98:	4615      	mov	r5, r2
 8003d9a:	e7bb      	b.n	8003d14 <_printf_i+0x130>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	6826      	ldr	r6, [r4, #0]
 8003da0:	6961      	ldr	r1, [r4, #20]
 8003da2:	1d18      	adds	r0, r3, #4
 8003da4:	6028      	str	r0, [r5, #0]
 8003da6:	0635      	lsls	r5, r6, #24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	d501      	bpl.n	8003db0 <_printf_i+0x1cc>
 8003dac:	6019      	str	r1, [r3, #0]
 8003dae:	e002      	b.n	8003db6 <_printf_i+0x1d2>
 8003db0:	0670      	lsls	r0, r6, #25
 8003db2:	d5fb      	bpl.n	8003dac <_printf_i+0x1c8>
 8003db4:	8019      	strh	r1, [r3, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	4615      	mov	r5, r2
 8003dbc:	e7ba      	b.n	8003d34 <_printf_i+0x150>
 8003dbe:	682b      	ldr	r3, [r5, #0]
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	602a      	str	r2, [r5, #0]
 8003dc4:	681d      	ldr	r5, [r3, #0]
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7fc fa10 	bl	80001f0 <memchr>
 8003dd0:	b108      	cbz	r0, 8003dd6 <_printf_i+0x1f2>
 8003dd2:	1b40      	subs	r0, r0, r5
 8003dd4:	6060      	str	r0, [r4, #4]
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	6123      	str	r3, [r4, #16]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de0:	e7a8      	b.n	8003d34 <_printf_i+0x150>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	462a      	mov	r2, r5
 8003de6:	4649      	mov	r1, r9
 8003de8:	4640      	mov	r0, r8
 8003dea:	47d0      	blx	sl
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0ab      	beq.n	8003d48 <_printf_i+0x164>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	d413      	bmi.n	8003e1e <_printf_i+0x23a>
 8003df6:	68e0      	ldr	r0, [r4, #12]
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	4298      	cmp	r0, r3
 8003dfc:	bfb8      	it	lt
 8003dfe:	4618      	movlt	r0, r3
 8003e00:	e7a4      	b.n	8003d4c <_printf_i+0x168>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4632      	mov	r2, r6
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	47d0      	blx	sl
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d09b      	beq.n	8003d48 <_printf_i+0x164>
 8003e10:	3501      	adds	r5, #1
 8003e12:	68e3      	ldr	r3, [r4, #12]
 8003e14:	9903      	ldr	r1, [sp, #12]
 8003e16:	1a5b      	subs	r3, r3, r1
 8003e18:	42ab      	cmp	r3, r5
 8003e1a:	dcf2      	bgt.n	8003e02 <_printf_i+0x21e>
 8003e1c:	e7eb      	b.n	8003df6 <_printf_i+0x212>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	f104 0619 	add.w	r6, r4, #25
 8003e24:	e7f5      	b.n	8003e12 <_printf_i+0x22e>
 8003e26:	bf00      	nop
 8003e28:	080062be 	.word	0x080062be
 8003e2c:	080062cf 	.word	0x080062cf

08003e30 <iprintf>:
 8003e30:	b40f      	push	{r0, r1, r2, r3}
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <iprintf+0x2c>)
 8003e34:	b513      	push	{r0, r1, r4, lr}
 8003e36:	681c      	ldr	r4, [r3, #0]
 8003e38:	b124      	cbz	r4, 8003e44 <iprintf+0x14>
 8003e3a:	69a3      	ldr	r3, [r4, #24]
 8003e3c:	b913      	cbnz	r3, 8003e44 <iprintf+0x14>
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f001 f8ee 	bl	8005020 <__sinit>
 8003e44:	ab05      	add	r3, sp, #20
 8003e46:	9a04      	ldr	r2, [sp, #16]
 8003e48:	68a1      	ldr	r1, [r4, #8]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f001 fe9d 	bl	8005b8c <_vfiprintf_r>
 8003e52:	b002      	add	sp, #8
 8003e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e58:	b004      	add	sp, #16
 8003e5a:	4770      	bx	lr
 8003e5c:	20000010 	.word	0x20000010

08003e60 <putchar>:
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <putchar+0x28>)
 8003e62:	b513      	push	{r0, r1, r4, lr}
 8003e64:	681c      	ldr	r4, [r3, #0]
 8003e66:	4601      	mov	r1, r0
 8003e68:	b134      	cbz	r4, 8003e78 <putchar+0x18>
 8003e6a:	69a3      	ldr	r3, [r4, #24]
 8003e6c:	b923      	cbnz	r3, 8003e78 <putchar+0x18>
 8003e6e:	9001      	str	r0, [sp, #4]
 8003e70:	4620      	mov	r0, r4
 8003e72:	f001 f8d5 	bl	8005020 <__sinit>
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	68a2      	ldr	r2, [r4, #8]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	b002      	add	sp, #8
 8003e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e82:	f001 bfb3 	b.w	8005dec <_putc_r>
 8003e86:	bf00      	nop
 8003e88:	20000010 	.word	0x20000010

08003e8c <_puts_r>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	460e      	mov	r6, r1
 8003e90:	4605      	mov	r5, r0
 8003e92:	b118      	cbz	r0, 8003e9c <_puts_r+0x10>
 8003e94:	6983      	ldr	r3, [r0, #24]
 8003e96:	b90b      	cbnz	r3, 8003e9c <_puts_r+0x10>
 8003e98:	f001 f8c2 	bl	8005020 <__sinit>
 8003e9c:	69ab      	ldr	r3, [r5, #24]
 8003e9e:	68ac      	ldr	r4, [r5, #8]
 8003ea0:	b913      	cbnz	r3, 8003ea8 <_puts_r+0x1c>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f001 f8bc 	bl	8005020 <__sinit>
 8003ea8:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <_puts_r+0xd0>)
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	d120      	bne.n	8003ef0 <_puts_r+0x64>
 8003eae:	686c      	ldr	r4, [r5, #4]
 8003eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eb2:	07db      	lsls	r3, r3, #31
 8003eb4:	d405      	bmi.n	8003ec2 <_puts_r+0x36>
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	0598      	lsls	r0, r3, #22
 8003eba:	d402      	bmi.n	8003ec2 <_puts_r+0x36>
 8003ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ebe:	f001 f952 	bl	8005166 <__retarget_lock_acquire_recursive>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	0719      	lsls	r1, r3, #28
 8003ec6:	d51d      	bpl.n	8003f04 <_puts_r+0x78>
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	b1db      	cbz	r3, 8003f04 <_puts_r+0x78>
 8003ecc:	3e01      	subs	r6, #1
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	60a3      	str	r3, [r4, #8]
 8003ed8:	bb39      	cbnz	r1, 8003f2a <_puts_r+0x9e>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da38      	bge.n	8003f50 <_puts_r+0xc4>
 8003ede:	4622      	mov	r2, r4
 8003ee0:	210a      	movs	r1, #10
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f848 	bl	8003f78 <__swbuf_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d011      	beq.n	8003f10 <_puts_r+0x84>
 8003eec:	250a      	movs	r5, #10
 8003eee:	e011      	b.n	8003f14 <_puts_r+0x88>
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <_puts_r+0xd4>)
 8003ef2:	429c      	cmp	r4, r3
 8003ef4:	d101      	bne.n	8003efa <_puts_r+0x6e>
 8003ef6:	68ac      	ldr	r4, [r5, #8]
 8003ef8:	e7da      	b.n	8003eb0 <_puts_r+0x24>
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <_puts_r+0xd8>)
 8003efc:	429c      	cmp	r4, r3
 8003efe:	bf08      	it	eq
 8003f00:	68ec      	ldreq	r4, [r5, #12]
 8003f02:	e7d5      	b.n	8003eb0 <_puts_r+0x24>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f888 	bl	800401c <__swsetup_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d0dd      	beq.n	8003ecc <_puts_r+0x40>
 8003f10:	f04f 35ff 	mov.w	r5, #4294967295
 8003f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f16:	07da      	lsls	r2, r3, #31
 8003f18:	d405      	bmi.n	8003f26 <_puts_r+0x9a>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	059b      	lsls	r3, r3, #22
 8003f1e:	d402      	bmi.n	8003f26 <_puts_r+0x9a>
 8003f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f22:	f001 f921 	bl	8005168 <__retarget_lock_release_recursive>
 8003f26:	4628      	mov	r0, r5
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da04      	bge.n	8003f38 <_puts_r+0xac>
 8003f2e:	69a2      	ldr	r2, [r4, #24]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	dc06      	bgt.n	8003f42 <_puts_r+0xb6>
 8003f34:	290a      	cmp	r1, #10
 8003f36:	d004      	beq.n	8003f42 <_puts_r+0xb6>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	6022      	str	r2, [r4, #0]
 8003f3e:	7019      	strb	r1, [r3, #0]
 8003f40:	e7c5      	b.n	8003ece <_puts_r+0x42>
 8003f42:	4622      	mov	r2, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f817 	bl	8003f78 <__swbuf_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d1bf      	bne.n	8003ece <_puts_r+0x42>
 8003f4e:	e7df      	b.n	8003f10 <_puts_r+0x84>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	250a      	movs	r5, #10
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	701d      	strb	r5, [r3, #0]
 8003f5a:	e7db      	b.n	8003f14 <_puts_r+0x88>
 8003f5c:	08006390 	.word	0x08006390
 8003f60:	080063b0 	.word	0x080063b0
 8003f64:	08006370 	.word	0x08006370

08003f68 <puts>:
 8003f68:	4b02      	ldr	r3, [pc, #8]	; (8003f74 <puts+0xc>)
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f7ff bf8d 	b.w	8003e8c <_puts_r>
 8003f72:	bf00      	nop
 8003f74:	20000010 	.word	0x20000010

08003f78 <__swbuf_r>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	460e      	mov	r6, r1
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	4605      	mov	r5, r0
 8003f80:	b118      	cbz	r0, 8003f8a <__swbuf_r+0x12>
 8003f82:	6983      	ldr	r3, [r0, #24]
 8003f84:	b90b      	cbnz	r3, 8003f8a <__swbuf_r+0x12>
 8003f86:	f001 f84b 	bl	8005020 <__sinit>
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <__swbuf_r+0x98>)
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	d12b      	bne.n	8003fe8 <__swbuf_r+0x70>
 8003f90:	686c      	ldr	r4, [r5, #4]
 8003f92:	69a3      	ldr	r3, [r4, #24]
 8003f94:	60a3      	str	r3, [r4, #8]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	071a      	lsls	r2, r3, #28
 8003f9a:	d52f      	bpl.n	8003ffc <__swbuf_r+0x84>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	b36b      	cbz	r3, 8003ffc <__swbuf_r+0x84>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	1ac0      	subs	r0, r0, r3
 8003fa6:	6963      	ldr	r3, [r4, #20]
 8003fa8:	b2f6      	uxtb	r6, r6
 8003faa:	4283      	cmp	r3, r0
 8003fac:	4637      	mov	r7, r6
 8003fae:	dc04      	bgt.n	8003fba <__swbuf_r+0x42>
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 ffa0 	bl	8004ef8 <_fflush_r>
 8003fb8:	bb30      	cbnz	r0, 8004008 <__swbuf_r+0x90>
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60a3      	str	r3, [r4, #8]
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	6022      	str	r2, [r4, #0]
 8003fc6:	701e      	strb	r6, [r3, #0]
 8003fc8:	6963      	ldr	r3, [r4, #20]
 8003fca:	3001      	adds	r0, #1
 8003fcc:	4283      	cmp	r3, r0
 8003fce:	d004      	beq.n	8003fda <__swbuf_r+0x62>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	07db      	lsls	r3, r3, #31
 8003fd4:	d506      	bpl.n	8003fe4 <__swbuf_r+0x6c>
 8003fd6:	2e0a      	cmp	r6, #10
 8003fd8:	d104      	bne.n	8003fe4 <__swbuf_r+0x6c>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 ff8b 	bl	8004ef8 <_fflush_r>
 8003fe2:	b988      	cbnz	r0, 8004008 <__swbuf_r+0x90>
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <__swbuf_r+0x9c>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d101      	bne.n	8003ff2 <__swbuf_r+0x7a>
 8003fee:	68ac      	ldr	r4, [r5, #8]
 8003ff0:	e7cf      	b.n	8003f92 <__swbuf_r+0x1a>
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <__swbuf_r+0xa0>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	bf08      	it	eq
 8003ff8:	68ec      	ldreq	r4, [r5, #12]
 8003ffa:	e7ca      	b.n	8003f92 <__swbuf_r+0x1a>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f80c 	bl	800401c <__swsetup_r>
 8004004:	2800      	cmp	r0, #0
 8004006:	d0cb      	beq.n	8003fa0 <__swbuf_r+0x28>
 8004008:	f04f 37ff 	mov.w	r7, #4294967295
 800400c:	e7ea      	b.n	8003fe4 <__swbuf_r+0x6c>
 800400e:	bf00      	nop
 8004010:	08006390 	.word	0x08006390
 8004014:	080063b0 	.word	0x080063b0
 8004018:	08006370 	.word	0x08006370

0800401c <__swsetup_r>:
 800401c:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <__swsetup_r+0xcc>)
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	681d      	ldr	r5, [r3, #0]
 8004022:	4606      	mov	r6, r0
 8004024:	460c      	mov	r4, r1
 8004026:	b125      	cbz	r5, 8004032 <__swsetup_r+0x16>
 8004028:	69ab      	ldr	r3, [r5, #24]
 800402a:	b913      	cbnz	r3, 8004032 <__swsetup_r+0x16>
 800402c:	4628      	mov	r0, r5
 800402e:	f000 fff7 	bl	8005020 <__sinit>
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <__swsetup_r+0xd0>)
 8004034:	429c      	cmp	r4, r3
 8004036:	d10f      	bne.n	8004058 <__swsetup_r+0x3c>
 8004038:	686c      	ldr	r4, [r5, #4]
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004040:	0719      	lsls	r1, r3, #28
 8004042:	d42c      	bmi.n	800409e <__swsetup_r+0x82>
 8004044:	06dd      	lsls	r5, r3, #27
 8004046:	d411      	bmi.n	800406c <__swsetup_r+0x50>
 8004048:	2309      	movs	r3, #9
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	f04f 30ff 	mov.w	r0, #4294967295
 8004056:	e03e      	b.n	80040d6 <__swsetup_r+0xba>
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <__swsetup_r+0xd4>)
 800405a:	429c      	cmp	r4, r3
 800405c:	d101      	bne.n	8004062 <__swsetup_r+0x46>
 800405e:	68ac      	ldr	r4, [r5, #8]
 8004060:	e7eb      	b.n	800403a <__swsetup_r+0x1e>
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <__swsetup_r+0xd8>)
 8004064:	429c      	cmp	r4, r3
 8004066:	bf08      	it	eq
 8004068:	68ec      	ldreq	r4, [r5, #12]
 800406a:	e7e6      	b.n	800403a <__swsetup_r+0x1e>
 800406c:	0758      	lsls	r0, r3, #29
 800406e:	d512      	bpl.n	8004096 <__swsetup_r+0x7a>
 8004070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004072:	b141      	cbz	r1, 8004086 <__swsetup_r+0x6a>
 8004074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004078:	4299      	cmp	r1, r3
 800407a:	d002      	beq.n	8004082 <__swsetup_r+0x66>
 800407c:	4630      	mov	r0, r6
 800407e:	f001 fc7b 	bl	8005978 <_free_r>
 8004082:	2300      	movs	r3, #0
 8004084:	6363      	str	r3, [r4, #52]	; 0x34
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	2300      	movs	r3, #0
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f043 0308 	orr.w	r3, r3, #8
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	b94b      	cbnz	r3, 80040b6 <__swsetup_r+0x9a>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d003      	beq.n	80040b6 <__swsetup_r+0x9a>
 80040ae:	4621      	mov	r1, r4
 80040b0:	4630      	mov	r0, r6
 80040b2:	f001 f87f 	bl	80051b4 <__smakebuf_r>
 80040b6:	89a0      	ldrh	r0, [r4, #12]
 80040b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040bc:	f010 0301 	ands.w	r3, r0, #1
 80040c0:	d00a      	beq.n	80040d8 <__swsetup_r+0xbc>
 80040c2:	2300      	movs	r3, #0
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	6963      	ldr	r3, [r4, #20]
 80040c8:	425b      	negs	r3, r3
 80040ca:	61a3      	str	r3, [r4, #24]
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	b943      	cbnz	r3, 80040e2 <__swsetup_r+0xc6>
 80040d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040d4:	d1ba      	bne.n	800404c <__swsetup_r+0x30>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	0781      	lsls	r1, r0, #30
 80040da:	bf58      	it	pl
 80040dc:	6963      	ldrpl	r3, [r4, #20]
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	e7f4      	b.n	80040cc <__swsetup_r+0xb0>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e7f7      	b.n	80040d6 <__swsetup_r+0xba>
 80040e6:	bf00      	nop
 80040e8:	20000010 	.word	0x20000010
 80040ec:	08006390 	.word	0x08006390
 80040f0:	080063b0 	.word	0x080063b0
 80040f4:	08006370 	.word	0x08006370

080040f8 <quorem>:
 80040f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	6903      	ldr	r3, [r0, #16]
 80040fe:	690c      	ldr	r4, [r1, #16]
 8004100:	42a3      	cmp	r3, r4
 8004102:	4607      	mov	r7, r0
 8004104:	f2c0 8081 	blt.w	800420a <quorem+0x112>
 8004108:	3c01      	subs	r4, #1
 800410a:	f101 0814 	add.w	r8, r1, #20
 800410e:	f100 0514 	add.w	r5, r0, #20
 8004112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800411c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004120:	3301      	adds	r3, #1
 8004122:	429a      	cmp	r2, r3
 8004124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800412c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004130:	d331      	bcc.n	8004196 <quorem+0x9e>
 8004132:	f04f 0e00 	mov.w	lr, #0
 8004136:	4640      	mov	r0, r8
 8004138:	46ac      	mov	ip, r5
 800413a:	46f2      	mov	sl, lr
 800413c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004140:	b293      	uxth	r3, r2
 8004142:	fb06 e303 	mla	r3, r6, r3, lr
 8004146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800414a:	b29b      	uxth	r3, r3
 800414c:	ebaa 0303 	sub.w	r3, sl, r3
 8004150:	f8dc a000 	ldr.w	sl, [ip]
 8004154:	0c12      	lsrs	r2, r2, #16
 8004156:	fa13 f38a 	uxtah	r3, r3, sl
 800415a:	fb06 e202 	mla	r2, r6, r2, lr
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	9b00      	ldr	r3, [sp, #0]
 8004162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004166:	b292      	uxth	r2, r2
 8004168:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800416c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004170:	f8bd 3000 	ldrh.w	r3, [sp]
 8004174:	4581      	cmp	r9, r0
 8004176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800417a:	f84c 3b04 	str.w	r3, [ip], #4
 800417e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004182:	d2db      	bcs.n	800413c <quorem+0x44>
 8004184:	f855 300b 	ldr.w	r3, [r5, fp]
 8004188:	b92b      	cbnz	r3, 8004196 <quorem+0x9e>
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	3b04      	subs	r3, #4
 800418e:	429d      	cmp	r5, r3
 8004190:	461a      	mov	r2, r3
 8004192:	d32e      	bcc.n	80041f2 <quorem+0xfa>
 8004194:	613c      	str	r4, [r7, #16]
 8004196:	4638      	mov	r0, r7
 8004198:	f001 fad6 	bl	8005748 <__mcmp>
 800419c:	2800      	cmp	r0, #0
 800419e:	db24      	blt.n	80041ea <quorem+0xf2>
 80041a0:	3601      	adds	r6, #1
 80041a2:	4628      	mov	r0, r5
 80041a4:	f04f 0c00 	mov.w	ip, #0
 80041a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80041ac:	f8d0 e000 	ldr.w	lr, [r0]
 80041b0:	b293      	uxth	r3, r2
 80041b2:	ebac 0303 	sub.w	r3, ip, r3
 80041b6:	0c12      	lsrs	r2, r2, #16
 80041b8:	fa13 f38e 	uxtah	r3, r3, lr
 80041bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80041c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ca:	45c1      	cmp	r9, r8
 80041cc:	f840 3b04 	str.w	r3, [r0], #4
 80041d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041d4:	d2e8      	bcs.n	80041a8 <quorem+0xb0>
 80041d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041de:	b922      	cbnz	r2, 80041ea <quorem+0xf2>
 80041e0:	3b04      	subs	r3, #4
 80041e2:	429d      	cmp	r5, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	d30a      	bcc.n	80041fe <quorem+0x106>
 80041e8:	613c      	str	r4, [r7, #16]
 80041ea:	4630      	mov	r0, r6
 80041ec:	b003      	add	sp, #12
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	3b04      	subs	r3, #4
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	d1cc      	bne.n	8004194 <quorem+0x9c>
 80041fa:	3c01      	subs	r4, #1
 80041fc:	e7c7      	b.n	800418e <quorem+0x96>
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	3b04      	subs	r3, #4
 8004202:	2a00      	cmp	r2, #0
 8004204:	d1f0      	bne.n	80041e8 <quorem+0xf0>
 8004206:	3c01      	subs	r4, #1
 8004208:	e7eb      	b.n	80041e2 <quorem+0xea>
 800420a:	2000      	movs	r0, #0
 800420c:	e7ee      	b.n	80041ec <quorem+0xf4>
	...

08004210 <_dtoa_r>:
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	ed2d 8b04 	vpush	{d8-d9}
 8004218:	ec57 6b10 	vmov	r6, r7, d0
 800421c:	b093      	sub	sp, #76	; 0x4c
 800421e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004224:	9106      	str	r1, [sp, #24]
 8004226:	ee10 aa10 	vmov	sl, s0
 800422a:	4604      	mov	r4, r0
 800422c:	9209      	str	r2, [sp, #36]	; 0x24
 800422e:	930c      	str	r3, [sp, #48]	; 0x30
 8004230:	46bb      	mov	fp, r7
 8004232:	b975      	cbnz	r5, 8004252 <_dtoa_r+0x42>
 8004234:	2010      	movs	r0, #16
 8004236:	f000 fffd 	bl	8005234 <malloc>
 800423a:	4602      	mov	r2, r0
 800423c:	6260      	str	r0, [r4, #36]	; 0x24
 800423e:	b920      	cbnz	r0, 800424a <_dtoa_r+0x3a>
 8004240:	4ba7      	ldr	r3, [pc, #668]	; (80044e0 <_dtoa_r+0x2d0>)
 8004242:	21ea      	movs	r1, #234	; 0xea
 8004244:	48a7      	ldr	r0, [pc, #668]	; (80044e4 <_dtoa_r+0x2d4>)
 8004246:	f001 fe7f 	bl	8005f48 <__assert_func>
 800424a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800424e:	6005      	str	r5, [r0, #0]
 8004250:	60c5      	str	r5, [r0, #12]
 8004252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	b151      	cbz	r1, 800426e <_dtoa_r+0x5e>
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	604a      	str	r2, [r1, #4]
 800425c:	2301      	movs	r3, #1
 800425e:	4093      	lsls	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
 8004262:	4620      	mov	r0, r4
 8004264:	f001 f82e 	bl	80052c4 <_Bfree>
 8004268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	1e3b      	subs	r3, r7, #0
 8004270:	bfaa      	itet	ge
 8004272:	2300      	movge	r3, #0
 8004274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004278:	f8c8 3000 	strge.w	r3, [r8]
 800427c:	4b9a      	ldr	r3, [pc, #616]	; (80044e8 <_dtoa_r+0x2d8>)
 800427e:	bfbc      	itt	lt
 8004280:	2201      	movlt	r2, #1
 8004282:	f8c8 2000 	strlt.w	r2, [r8]
 8004286:	ea33 030b 	bics.w	r3, r3, fp
 800428a:	d11b      	bne.n	80042c4 <_dtoa_r+0xb4>
 800428c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800428e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004298:	4333      	orrs	r3, r6
 800429a:	f000 8592 	beq.w	8004dc2 <_dtoa_r+0xbb2>
 800429e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042a0:	b963      	cbnz	r3, 80042bc <_dtoa_r+0xac>
 80042a2:	4b92      	ldr	r3, [pc, #584]	; (80044ec <_dtoa_r+0x2dc>)
 80042a4:	e022      	b.n	80042ec <_dtoa_r+0xdc>
 80042a6:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <_dtoa_r+0x2e0>)
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	3308      	adds	r3, #8
 80042ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	9801      	ldr	r0, [sp, #4]
 80042b2:	b013      	add	sp, #76	; 0x4c
 80042b4:	ecbd 8b04 	vpop	{d8-d9}
 80042b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042bc:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <_dtoa_r+0x2dc>)
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	3303      	adds	r3, #3
 80042c2:	e7f3      	b.n	80042ac <_dtoa_r+0x9c>
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	4650      	mov	r0, sl
 80042ca:	4659      	mov	r1, fp
 80042cc:	f7fc fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80042d0:	ec4b ab19 	vmov	d9, sl, fp
 80042d4:	4680      	mov	r8, r0
 80042d6:	b158      	cbz	r0, 80042f0 <_dtoa_r+0xe0>
 80042d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042da:	2301      	movs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 856b 	beq.w	8004dbc <_dtoa_r+0xbac>
 80042e6:	4883      	ldr	r0, [pc, #524]	; (80044f4 <_dtoa_r+0x2e4>)
 80042e8:	6018      	str	r0, [r3, #0]
 80042ea:	1e43      	subs	r3, r0, #1
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	e7df      	b.n	80042b0 <_dtoa_r+0xa0>
 80042f0:	ec4b ab10 	vmov	d0, sl, fp
 80042f4:	aa10      	add	r2, sp, #64	; 0x40
 80042f6:	a911      	add	r1, sp, #68	; 0x44
 80042f8:	4620      	mov	r0, r4
 80042fa:	f001 facb 	bl	8005894 <__d2b>
 80042fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004302:	ee08 0a10 	vmov	s16, r0
 8004306:	2d00      	cmp	r5, #0
 8004308:	f000 8084 	beq.w	8004414 <_dtoa_r+0x204>
 800430c:	ee19 3a90 	vmov	r3, s19
 8004310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004318:	4656      	mov	r6, sl
 800431a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800431e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004326:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <_dtoa_r+0x2e8>)
 8004328:	2200      	movs	r2, #0
 800432a:	4630      	mov	r0, r6
 800432c:	4639      	mov	r1, r7
 800432e:	f7fb ffb3 	bl	8000298 <__aeabi_dsub>
 8004332:	a365      	add	r3, pc, #404	; (adr r3, 80044c8 <_dtoa_r+0x2b8>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f966 	bl	8000608 <__aeabi_dmul>
 800433c:	a364      	add	r3, pc, #400	; (adr r3, 80044d0 <_dtoa_r+0x2c0>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fb ffab 	bl	800029c <__adddf3>
 8004346:	4606      	mov	r6, r0
 8004348:	4628      	mov	r0, r5
 800434a:	460f      	mov	r7, r1
 800434c:	f7fc f8f2 	bl	8000534 <__aeabi_i2d>
 8004350:	a361      	add	r3, pc, #388	; (adr r3, 80044d8 <_dtoa_r+0x2c8>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fc f957 	bl	8000608 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4630      	mov	r0, r6
 8004360:	4639      	mov	r1, r7
 8004362:	f7fb ff9b 	bl	800029c <__adddf3>
 8004366:	4606      	mov	r6, r0
 8004368:	460f      	mov	r7, r1
 800436a:	f7fc fbfd 	bl	8000b68 <__aeabi_d2iz>
 800436e:	2200      	movs	r2, #0
 8004370:	9000      	str	r0, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	4630      	mov	r0, r6
 8004376:	4639      	mov	r1, r7
 8004378:	f7fc fbb8 	bl	8000aec <__aeabi_dcmplt>
 800437c:	b150      	cbz	r0, 8004394 <_dtoa_r+0x184>
 800437e:	9800      	ldr	r0, [sp, #0]
 8004380:	f7fc f8d8 	bl	8000534 <__aeabi_i2d>
 8004384:	4632      	mov	r2, r6
 8004386:	463b      	mov	r3, r7
 8004388:	f7fc fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800438c:	b910      	cbnz	r0, 8004394 <_dtoa_r+0x184>
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	9b00      	ldr	r3, [sp, #0]
 8004396:	2b16      	cmp	r3, #22
 8004398:	d85a      	bhi.n	8004450 <_dtoa_r+0x240>
 800439a:	9a00      	ldr	r2, [sp, #0]
 800439c:	4b57      	ldr	r3, [pc, #348]	; (80044fc <_dtoa_r+0x2ec>)
 800439e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	ec51 0b19 	vmov	r0, r1, d9
 80043aa:	f7fc fb9f 	bl	8000aec <__aeabi_dcmplt>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d050      	beq.n	8004454 <_dtoa_r+0x244>
 80043b2:	9b00      	ldr	r3, [sp, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80043bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043be:	1b5d      	subs	r5, r3, r5
 80043c0:	1e6b      	subs	r3, r5, #1
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	bf45      	ittet	mi
 80043c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80043ca:	9304      	strmi	r3, [sp, #16]
 80043cc:	2300      	movpl	r3, #0
 80043ce:	2300      	movmi	r3, #0
 80043d0:	bf4c      	ite	mi
 80043d2:	9305      	strmi	r3, [sp, #20]
 80043d4:	9304      	strpl	r3, [sp, #16]
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db3d      	blt.n	8004458 <_dtoa_r+0x248>
 80043dc:	9b05      	ldr	r3, [sp, #20]
 80043de:	9a00      	ldr	r2, [sp, #0]
 80043e0:	920a      	str	r2, [sp, #40]	; 0x28
 80043e2:	4413      	add	r3, r2
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9307      	str	r3, [sp, #28]
 80043ea:	9b06      	ldr	r3, [sp, #24]
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	f200 8089 	bhi.w	8004504 <_dtoa_r+0x2f4>
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	bfc4      	itt	gt
 80043f6:	3b04      	subgt	r3, #4
 80043f8:	9306      	strgt	r3, [sp, #24]
 80043fa:	9b06      	ldr	r3, [sp, #24]
 80043fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004400:	bfcc      	ite	gt
 8004402:	2500      	movgt	r5, #0
 8004404:	2501      	movle	r5, #1
 8004406:	2b03      	cmp	r3, #3
 8004408:	f200 8087 	bhi.w	800451a <_dtoa_r+0x30a>
 800440c:	e8df f003 	tbb	[pc, r3]
 8004410:	59383a2d 	.word	0x59383a2d
 8004414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004418:	441d      	add	r5, r3
 800441a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800441e:	2b20      	cmp	r3, #32
 8004420:	bfc1      	itttt	gt
 8004422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800442a:	fa0b f303 	lslgt.w	r3, fp, r3
 800442e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004432:	bfda      	itte	le
 8004434:	f1c3 0320 	rsble	r3, r3, #32
 8004438:	fa06 f003 	lslle.w	r0, r6, r3
 800443c:	4318      	orrgt	r0, r3
 800443e:	f7fc f869 	bl	8000514 <__aeabi_ui2d>
 8004442:	2301      	movs	r3, #1
 8004444:	4606      	mov	r6, r0
 8004446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800444a:	3d01      	subs	r5, #1
 800444c:	930e      	str	r3, [sp, #56]	; 0x38
 800444e:	e76a      	b.n	8004326 <_dtoa_r+0x116>
 8004450:	2301      	movs	r3, #1
 8004452:	e7b2      	b.n	80043ba <_dtoa_r+0x1aa>
 8004454:	900b      	str	r0, [sp, #44]	; 0x2c
 8004456:	e7b1      	b.n	80043bc <_dtoa_r+0x1ac>
 8004458:	9b04      	ldr	r3, [sp, #16]
 800445a:	9a00      	ldr	r2, [sp, #0]
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	9304      	str	r3, [sp, #16]
 8004460:	4253      	negs	r3, r2
 8004462:	9307      	str	r3, [sp, #28]
 8004464:	2300      	movs	r3, #0
 8004466:	930a      	str	r3, [sp, #40]	; 0x28
 8004468:	e7bf      	b.n	80043ea <_dtoa_r+0x1da>
 800446a:	2300      	movs	r3, #0
 800446c:	9308      	str	r3, [sp, #32]
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	dc55      	bgt.n	8004520 <_dtoa_r+0x310>
 8004474:	2301      	movs	r3, #1
 8004476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800447a:	461a      	mov	r2, r3
 800447c:	9209      	str	r2, [sp, #36]	; 0x24
 800447e:	e00c      	b.n	800449a <_dtoa_r+0x28a>
 8004480:	2301      	movs	r3, #1
 8004482:	e7f3      	b.n	800446c <_dtoa_r+0x25c>
 8004484:	2300      	movs	r3, #0
 8004486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004488:	9308      	str	r3, [sp, #32]
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	4413      	add	r3, r2
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	3301      	adds	r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	9303      	str	r3, [sp, #12]
 8004496:	bfb8      	it	lt
 8004498:	2301      	movlt	r3, #1
 800449a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800449c:	2200      	movs	r2, #0
 800449e:	6042      	str	r2, [r0, #4]
 80044a0:	2204      	movs	r2, #4
 80044a2:	f102 0614 	add.w	r6, r2, #20
 80044a6:	429e      	cmp	r6, r3
 80044a8:	6841      	ldr	r1, [r0, #4]
 80044aa:	d93d      	bls.n	8004528 <_dtoa_r+0x318>
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 fec9 	bl	8005244 <_Balloc>
 80044b2:	9001      	str	r0, [sp, #4]
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d13b      	bne.n	8004530 <_dtoa_r+0x320>
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <_dtoa_r+0x2f0>)
 80044ba:	4602      	mov	r2, r0
 80044bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044c0:	e6c0      	b.n	8004244 <_dtoa_r+0x34>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7df      	b.n	8004486 <_dtoa_r+0x276>
 80044c6:	bf00      	nop
 80044c8:	636f4361 	.word	0x636f4361
 80044cc:	3fd287a7 	.word	0x3fd287a7
 80044d0:	8b60c8b3 	.word	0x8b60c8b3
 80044d4:	3fc68a28 	.word	0x3fc68a28
 80044d8:	509f79fb 	.word	0x509f79fb
 80044dc:	3fd34413 	.word	0x3fd34413
 80044e0:	080062ed 	.word	0x080062ed
 80044e4:	08006304 	.word	0x08006304
 80044e8:	7ff00000 	.word	0x7ff00000
 80044ec:	080062e9 	.word	0x080062e9
 80044f0:	080062e0 	.word	0x080062e0
 80044f4:	080062bd 	.word	0x080062bd
 80044f8:	3ff80000 	.word	0x3ff80000
 80044fc:	08006458 	.word	0x08006458
 8004500:	0800635f 	.word	0x0800635f
 8004504:	2501      	movs	r5, #1
 8004506:	2300      	movs	r3, #0
 8004508:	9306      	str	r3, [sp, #24]
 800450a:	9508      	str	r5, [sp, #32]
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	2312      	movs	r3, #18
 8004518:	e7b0      	b.n	800447c <_dtoa_r+0x26c>
 800451a:	2301      	movs	r3, #1
 800451c:	9308      	str	r3, [sp, #32]
 800451e:	e7f5      	b.n	800450c <_dtoa_r+0x2fc>
 8004520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004526:	e7b8      	b.n	800449a <_dtoa_r+0x28a>
 8004528:	3101      	adds	r1, #1
 800452a:	6041      	str	r1, [r0, #4]
 800452c:	0052      	lsls	r2, r2, #1
 800452e:	e7b8      	b.n	80044a2 <_dtoa_r+0x292>
 8004530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004532:	9a01      	ldr	r2, [sp, #4]
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	2b0e      	cmp	r3, #14
 800453a:	f200 809d 	bhi.w	8004678 <_dtoa_r+0x468>
 800453e:	2d00      	cmp	r5, #0
 8004540:	f000 809a 	beq.w	8004678 <_dtoa_r+0x468>
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	dd32      	ble.n	80045b0 <_dtoa_r+0x3a0>
 800454a:	4ab7      	ldr	r2, [pc, #732]	; (8004828 <_dtoa_r+0x618>)
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004558:	9b00      	ldr	r3, [sp, #0]
 800455a:	05d8      	lsls	r0, r3, #23
 800455c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004560:	d516      	bpl.n	8004590 <_dtoa_r+0x380>
 8004562:	4bb2      	ldr	r3, [pc, #712]	; (800482c <_dtoa_r+0x61c>)
 8004564:	ec51 0b19 	vmov	r0, r1, d9
 8004568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800456c:	f7fc f976 	bl	800085c <__aeabi_ddiv>
 8004570:	f007 070f 	and.w	r7, r7, #15
 8004574:	4682      	mov	sl, r0
 8004576:	468b      	mov	fp, r1
 8004578:	2503      	movs	r5, #3
 800457a:	4eac      	ldr	r6, [pc, #688]	; (800482c <_dtoa_r+0x61c>)
 800457c:	b957      	cbnz	r7, 8004594 <_dtoa_r+0x384>
 800457e:	4642      	mov	r2, r8
 8004580:	464b      	mov	r3, r9
 8004582:	4650      	mov	r0, sl
 8004584:	4659      	mov	r1, fp
 8004586:	f7fc f969 	bl	800085c <__aeabi_ddiv>
 800458a:	4682      	mov	sl, r0
 800458c:	468b      	mov	fp, r1
 800458e:	e028      	b.n	80045e2 <_dtoa_r+0x3d2>
 8004590:	2502      	movs	r5, #2
 8004592:	e7f2      	b.n	800457a <_dtoa_r+0x36a>
 8004594:	07f9      	lsls	r1, r7, #31
 8004596:	d508      	bpl.n	80045aa <_dtoa_r+0x39a>
 8004598:	4640      	mov	r0, r8
 800459a:	4649      	mov	r1, r9
 800459c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045a0:	f7fc f832 	bl	8000608 <__aeabi_dmul>
 80045a4:	3501      	adds	r5, #1
 80045a6:	4680      	mov	r8, r0
 80045a8:	4689      	mov	r9, r1
 80045aa:	107f      	asrs	r7, r7, #1
 80045ac:	3608      	adds	r6, #8
 80045ae:	e7e5      	b.n	800457c <_dtoa_r+0x36c>
 80045b0:	f000 809b 	beq.w	80046ea <_dtoa_r+0x4da>
 80045b4:	9b00      	ldr	r3, [sp, #0]
 80045b6:	4f9d      	ldr	r7, [pc, #628]	; (800482c <_dtoa_r+0x61c>)
 80045b8:	425e      	negs	r6, r3
 80045ba:	4b9b      	ldr	r3, [pc, #620]	; (8004828 <_dtoa_r+0x618>)
 80045bc:	f006 020f 	and.w	r2, r6, #15
 80045c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	ec51 0b19 	vmov	r0, r1, d9
 80045cc:	f7fc f81c 	bl	8000608 <__aeabi_dmul>
 80045d0:	1136      	asrs	r6, r6, #4
 80045d2:	4682      	mov	sl, r0
 80045d4:	468b      	mov	fp, r1
 80045d6:	2300      	movs	r3, #0
 80045d8:	2502      	movs	r5, #2
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d17a      	bne.n	80046d4 <_dtoa_r+0x4c4>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1d3      	bne.n	800458a <_dtoa_r+0x37a>
 80045e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8082 	beq.w	80046ee <_dtoa_r+0x4de>
 80045ea:	4b91      	ldr	r3, [pc, #580]	; (8004830 <_dtoa_r+0x620>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	4650      	mov	r0, sl
 80045f0:	4659      	mov	r1, fp
 80045f2:	f7fc fa7b 	bl	8000aec <__aeabi_dcmplt>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d079      	beq.n	80046ee <_dtoa_r+0x4de>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d076      	beq.n	80046ee <_dtoa_r+0x4de>
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	dd36      	ble.n	8004674 <_dtoa_r+0x464>
 8004606:	9b00      	ldr	r3, [sp, #0]
 8004608:	4650      	mov	r0, sl
 800460a:	4659      	mov	r1, fp
 800460c:	1e5f      	subs	r7, r3, #1
 800460e:	2200      	movs	r2, #0
 8004610:	4b88      	ldr	r3, [pc, #544]	; (8004834 <_dtoa_r+0x624>)
 8004612:	f7fb fff9 	bl	8000608 <__aeabi_dmul>
 8004616:	9e02      	ldr	r6, [sp, #8]
 8004618:	4682      	mov	sl, r0
 800461a:	468b      	mov	fp, r1
 800461c:	3501      	adds	r5, #1
 800461e:	4628      	mov	r0, r5
 8004620:	f7fb ff88 	bl	8000534 <__aeabi_i2d>
 8004624:	4652      	mov	r2, sl
 8004626:	465b      	mov	r3, fp
 8004628:	f7fb ffee 	bl	8000608 <__aeabi_dmul>
 800462c:	4b82      	ldr	r3, [pc, #520]	; (8004838 <_dtoa_r+0x628>)
 800462e:	2200      	movs	r2, #0
 8004630:	f7fb fe34 	bl	800029c <__adddf3>
 8004634:	46d0      	mov	r8, sl
 8004636:	46d9      	mov	r9, fp
 8004638:	4682      	mov	sl, r0
 800463a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800463e:	2e00      	cmp	r6, #0
 8004640:	d158      	bne.n	80046f4 <_dtoa_r+0x4e4>
 8004642:	4b7e      	ldr	r3, [pc, #504]	; (800483c <_dtoa_r+0x62c>)
 8004644:	2200      	movs	r2, #0
 8004646:	4640      	mov	r0, r8
 8004648:	4649      	mov	r1, r9
 800464a:	f7fb fe25 	bl	8000298 <__aeabi_dsub>
 800464e:	4652      	mov	r2, sl
 8004650:	465b      	mov	r3, fp
 8004652:	4680      	mov	r8, r0
 8004654:	4689      	mov	r9, r1
 8004656:	f7fc fa67 	bl	8000b28 <__aeabi_dcmpgt>
 800465a:	2800      	cmp	r0, #0
 800465c:	f040 8295 	bne.w	8004b8a <_dtoa_r+0x97a>
 8004660:	4652      	mov	r2, sl
 8004662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004666:	4640      	mov	r0, r8
 8004668:	4649      	mov	r1, r9
 800466a:	f7fc fa3f 	bl	8000aec <__aeabi_dcmplt>
 800466e:	2800      	cmp	r0, #0
 8004670:	f040 8289 	bne.w	8004b86 <_dtoa_r+0x976>
 8004674:	ec5b ab19 	vmov	sl, fp, d9
 8004678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800467a:	2b00      	cmp	r3, #0
 800467c:	f2c0 8148 	blt.w	8004910 <_dtoa_r+0x700>
 8004680:	9a00      	ldr	r2, [sp, #0]
 8004682:	2a0e      	cmp	r2, #14
 8004684:	f300 8144 	bgt.w	8004910 <_dtoa_r+0x700>
 8004688:	4b67      	ldr	r3, [pc, #412]	; (8004828 <_dtoa_r+0x618>)
 800468a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800468e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	f280 80d5 	bge.w	8004844 <_dtoa_r+0x634>
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f300 80d1 	bgt.w	8004844 <_dtoa_r+0x634>
 80046a2:	f040 826f 	bne.w	8004b84 <_dtoa_r+0x974>
 80046a6:	4b65      	ldr	r3, [pc, #404]	; (800483c <_dtoa_r+0x62c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	4640      	mov	r0, r8
 80046ac:	4649      	mov	r1, r9
 80046ae:	f7fb ffab 	bl	8000608 <__aeabi_dmul>
 80046b2:	4652      	mov	r2, sl
 80046b4:	465b      	mov	r3, fp
 80046b6:	f7fc fa2d 	bl	8000b14 <__aeabi_dcmpge>
 80046ba:	9e03      	ldr	r6, [sp, #12]
 80046bc:	4637      	mov	r7, r6
 80046be:	2800      	cmp	r0, #0
 80046c0:	f040 8245 	bne.w	8004b4e <_dtoa_r+0x93e>
 80046c4:	9d01      	ldr	r5, [sp, #4]
 80046c6:	2331      	movs	r3, #49	; 0x31
 80046c8:	f805 3b01 	strb.w	r3, [r5], #1
 80046cc:	9b00      	ldr	r3, [sp, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	e240      	b.n	8004b56 <_dtoa_r+0x946>
 80046d4:	07f2      	lsls	r2, r6, #31
 80046d6:	d505      	bpl.n	80046e4 <_dtoa_r+0x4d4>
 80046d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046dc:	f7fb ff94 	bl	8000608 <__aeabi_dmul>
 80046e0:	3501      	adds	r5, #1
 80046e2:	2301      	movs	r3, #1
 80046e4:	1076      	asrs	r6, r6, #1
 80046e6:	3708      	adds	r7, #8
 80046e8:	e777      	b.n	80045da <_dtoa_r+0x3ca>
 80046ea:	2502      	movs	r5, #2
 80046ec:	e779      	b.n	80045e2 <_dtoa_r+0x3d2>
 80046ee:	9f00      	ldr	r7, [sp, #0]
 80046f0:	9e03      	ldr	r6, [sp, #12]
 80046f2:	e794      	b.n	800461e <_dtoa_r+0x40e>
 80046f4:	9901      	ldr	r1, [sp, #4]
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <_dtoa_r+0x618>)
 80046f8:	4431      	add	r1, r6
 80046fa:	910d      	str	r1, [sp, #52]	; 0x34
 80046fc:	9908      	ldr	r1, [sp, #32]
 80046fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004706:	2900      	cmp	r1, #0
 8004708:	d043      	beq.n	8004792 <_dtoa_r+0x582>
 800470a:	494d      	ldr	r1, [pc, #308]	; (8004840 <_dtoa_r+0x630>)
 800470c:	2000      	movs	r0, #0
 800470e:	f7fc f8a5 	bl	800085c <__aeabi_ddiv>
 8004712:	4652      	mov	r2, sl
 8004714:	465b      	mov	r3, fp
 8004716:	f7fb fdbf 	bl	8000298 <__aeabi_dsub>
 800471a:	9d01      	ldr	r5, [sp, #4]
 800471c:	4682      	mov	sl, r0
 800471e:	468b      	mov	fp, r1
 8004720:	4649      	mov	r1, r9
 8004722:	4640      	mov	r0, r8
 8004724:	f7fc fa20 	bl	8000b68 <__aeabi_d2iz>
 8004728:	4606      	mov	r6, r0
 800472a:	f7fb ff03 	bl	8000534 <__aeabi_i2d>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4640      	mov	r0, r8
 8004734:	4649      	mov	r1, r9
 8004736:	f7fb fdaf 	bl	8000298 <__aeabi_dsub>
 800473a:	3630      	adds	r6, #48	; 0x30
 800473c:	f805 6b01 	strb.w	r6, [r5], #1
 8004740:	4652      	mov	r2, sl
 8004742:	465b      	mov	r3, fp
 8004744:	4680      	mov	r8, r0
 8004746:	4689      	mov	r9, r1
 8004748:	f7fc f9d0 	bl	8000aec <__aeabi_dcmplt>
 800474c:	2800      	cmp	r0, #0
 800474e:	d163      	bne.n	8004818 <_dtoa_r+0x608>
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	4936      	ldr	r1, [pc, #216]	; (8004830 <_dtoa_r+0x620>)
 8004756:	2000      	movs	r0, #0
 8004758:	f7fb fd9e 	bl	8000298 <__aeabi_dsub>
 800475c:	4652      	mov	r2, sl
 800475e:	465b      	mov	r3, fp
 8004760:	f7fc f9c4 	bl	8000aec <__aeabi_dcmplt>
 8004764:	2800      	cmp	r0, #0
 8004766:	f040 80b5 	bne.w	80048d4 <_dtoa_r+0x6c4>
 800476a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800476c:	429d      	cmp	r5, r3
 800476e:	d081      	beq.n	8004674 <_dtoa_r+0x464>
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <_dtoa_r+0x624>)
 8004772:	2200      	movs	r2, #0
 8004774:	4650      	mov	r0, sl
 8004776:	4659      	mov	r1, fp
 8004778:	f7fb ff46 	bl	8000608 <__aeabi_dmul>
 800477c:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <_dtoa_r+0x624>)
 800477e:	4682      	mov	sl, r0
 8004780:	468b      	mov	fp, r1
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	2200      	movs	r2, #0
 8004788:	f7fb ff3e 	bl	8000608 <__aeabi_dmul>
 800478c:	4680      	mov	r8, r0
 800478e:	4689      	mov	r9, r1
 8004790:	e7c6      	b.n	8004720 <_dtoa_r+0x510>
 8004792:	4650      	mov	r0, sl
 8004794:	4659      	mov	r1, fp
 8004796:	f7fb ff37 	bl	8000608 <__aeabi_dmul>
 800479a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800479c:	9d01      	ldr	r5, [sp, #4]
 800479e:	930f      	str	r3, [sp, #60]	; 0x3c
 80047a0:	4682      	mov	sl, r0
 80047a2:	468b      	mov	fp, r1
 80047a4:	4649      	mov	r1, r9
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7fc f9de 	bl	8000b68 <__aeabi_d2iz>
 80047ac:	4606      	mov	r6, r0
 80047ae:	f7fb fec1 	bl	8000534 <__aeabi_i2d>
 80047b2:	3630      	adds	r6, #48	; 0x30
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4640      	mov	r0, r8
 80047ba:	4649      	mov	r1, r9
 80047bc:	f7fb fd6c 	bl	8000298 <__aeabi_dsub>
 80047c0:	f805 6b01 	strb.w	r6, [r5], #1
 80047c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c6:	429d      	cmp	r5, r3
 80047c8:	4680      	mov	r8, r0
 80047ca:	4689      	mov	r9, r1
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	d124      	bne.n	800481c <_dtoa_r+0x60c>
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <_dtoa_r+0x630>)
 80047d4:	4650      	mov	r0, sl
 80047d6:	4659      	mov	r1, fp
 80047d8:	f7fb fd60 	bl	800029c <__adddf3>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4640      	mov	r0, r8
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fc f9a0 	bl	8000b28 <__aeabi_dcmpgt>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d173      	bne.n	80048d4 <_dtoa_r+0x6c4>
 80047ec:	4652      	mov	r2, sl
 80047ee:	465b      	mov	r3, fp
 80047f0:	4913      	ldr	r1, [pc, #76]	; (8004840 <_dtoa_r+0x630>)
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7fb fd50 	bl	8000298 <__aeabi_dsub>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4640      	mov	r0, r8
 80047fe:	4649      	mov	r1, r9
 8004800:	f7fc f974 	bl	8000aec <__aeabi_dcmplt>
 8004804:	2800      	cmp	r0, #0
 8004806:	f43f af35 	beq.w	8004674 <_dtoa_r+0x464>
 800480a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800480c:	1e6b      	subs	r3, r5, #1
 800480e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d0f8      	beq.n	800480a <_dtoa_r+0x5fa>
 8004818:	9700      	str	r7, [sp, #0]
 800481a:	e049      	b.n	80048b0 <_dtoa_r+0x6a0>
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <_dtoa_r+0x624>)
 800481e:	f7fb fef3 	bl	8000608 <__aeabi_dmul>
 8004822:	4680      	mov	r8, r0
 8004824:	4689      	mov	r9, r1
 8004826:	e7bd      	b.n	80047a4 <_dtoa_r+0x594>
 8004828:	08006458 	.word	0x08006458
 800482c:	08006430 	.word	0x08006430
 8004830:	3ff00000 	.word	0x3ff00000
 8004834:	40240000 	.word	0x40240000
 8004838:	401c0000 	.word	0x401c0000
 800483c:	40140000 	.word	0x40140000
 8004840:	3fe00000 	.word	0x3fe00000
 8004844:	9d01      	ldr	r5, [sp, #4]
 8004846:	4656      	mov	r6, sl
 8004848:	465f      	mov	r7, fp
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	4630      	mov	r0, r6
 8004850:	4639      	mov	r1, r7
 8004852:	f7fc f803 	bl	800085c <__aeabi_ddiv>
 8004856:	f7fc f987 	bl	8000b68 <__aeabi_d2iz>
 800485a:	4682      	mov	sl, r0
 800485c:	f7fb fe6a 	bl	8000534 <__aeabi_i2d>
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	f7fb fed0 	bl	8000608 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4630      	mov	r0, r6
 800486e:	4639      	mov	r1, r7
 8004870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004874:	f7fb fd10 	bl	8000298 <__aeabi_dsub>
 8004878:	f805 6b01 	strb.w	r6, [r5], #1
 800487c:	9e01      	ldr	r6, [sp, #4]
 800487e:	9f03      	ldr	r7, [sp, #12]
 8004880:	1bae      	subs	r6, r5, r6
 8004882:	42b7      	cmp	r7, r6
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	d135      	bne.n	80048f6 <_dtoa_r+0x6e6>
 800488a:	f7fb fd07 	bl	800029c <__adddf3>
 800488e:	4642      	mov	r2, r8
 8004890:	464b      	mov	r3, r9
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	f7fc f947 	bl	8000b28 <__aeabi_dcmpgt>
 800489a:	b9d0      	cbnz	r0, 80048d2 <_dtoa_r+0x6c2>
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fc f918 	bl	8000ad8 <__aeabi_dcmpeq>
 80048a8:	b110      	cbz	r0, 80048b0 <_dtoa_r+0x6a0>
 80048aa:	f01a 0f01 	tst.w	sl, #1
 80048ae:	d110      	bne.n	80048d2 <_dtoa_r+0x6c2>
 80048b0:	4620      	mov	r0, r4
 80048b2:	ee18 1a10 	vmov	r1, s16
 80048b6:	f000 fd05 	bl	80052c4 <_Bfree>
 80048ba:	2300      	movs	r3, #0
 80048bc:	9800      	ldr	r0, [sp, #0]
 80048be:	702b      	strb	r3, [r5, #0]
 80048c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048c2:	3001      	adds	r0, #1
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f43f acf1 	beq.w	80042b0 <_dtoa_r+0xa0>
 80048ce:	601d      	str	r5, [r3, #0]
 80048d0:	e4ee      	b.n	80042b0 <_dtoa_r+0xa0>
 80048d2:	9f00      	ldr	r7, [sp, #0]
 80048d4:	462b      	mov	r3, r5
 80048d6:	461d      	mov	r5, r3
 80048d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048dc:	2a39      	cmp	r2, #57	; 0x39
 80048de:	d106      	bne.n	80048ee <_dtoa_r+0x6de>
 80048e0:	9a01      	ldr	r2, [sp, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d1f7      	bne.n	80048d6 <_dtoa_r+0x6c6>
 80048e6:	9901      	ldr	r1, [sp, #4]
 80048e8:	2230      	movs	r2, #48	; 0x30
 80048ea:	3701      	adds	r7, #1
 80048ec:	700a      	strb	r2, [r1, #0]
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	3201      	adds	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e790      	b.n	8004818 <_dtoa_r+0x608>
 80048f6:	4ba6      	ldr	r3, [pc, #664]	; (8004b90 <_dtoa_r+0x980>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	f7fb fe85 	bl	8000608 <__aeabi_dmul>
 80048fe:	2200      	movs	r2, #0
 8004900:	2300      	movs	r3, #0
 8004902:	4606      	mov	r6, r0
 8004904:	460f      	mov	r7, r1
 8004906:	f7fc f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800490a:	2800      	cmp	r0, #0
 800490c:	d09d      	beq.n	800484a <_dtoa_r+0x63a>
 800490e:	e7cf      	b.n	80048b0 <_dtoa_r+0x6a0>
 8004910:	9a08      	ldr	r2, [sp, #32]
 8004912:	2a00      	cmp	r2, #0
 8004914:	f000 80d7 	beq.w	8004ac6 <_dtoa_r+0x8b6>
 8004918:	9a06      	ldr	r2, [sp, #24]
 800491a:	2a01      	cmp	r2, #1
 800491c:	f300 80ba 	bgt.w	8004a94 <_dtoa_r+0x884>
 8004920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004922:	2a00      	cmp	r2, #0
 8004924:	f000 80b2 	beq.w	8004a8c <_dtoa_r+0x87c>
 8004928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800492c:	9e07      	ldr	r6, [sp, #28]
 800492e:	9d04      	ldr	r5, [sp, #16]
 8004930:	9a04      	ldr	r2, [sp, #16]
 8004932:	441a      	add	r2, r3
 8004934:	9204      	str	r2, [sp, #16]
 8004936:	9a05      	ldr	r2, [sp, #20]
 8004938:	2101      	movs	r1, #1
 800493a:	441a      	add	r2, r3
 800493c:	4620      	mov	r0, r4
 800493e:	9205      	str	r2, [sp, #20]
 8004940:	f000 fd78 	bl	8005434 <__i2b>
 8004944:	4607      	mov	r7, r0
 8004946:	2d00      	cmp	r5, #0
 8004948:	dd0c      	ble.n	8004964 <_dtoa_r+0x754>
 800494a:	9b05      	ldr	r3, [sp, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	dd09      	ble.n	8004964 <_dtoa_r+0x754>
 8004950:	42ab      	cmp	r3, r5
 8004952:	9a04      	ldr	r2, [sp, #16]
 8004954:	bfa8      	it	ge
 8004956:	462b      	movge	r3, r5
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	9204      	str	r2, [sp, #16]
 800495c:	9a05      	ldr	r2, [sp, #20]
 800495e:	1aed      	subs	r5, r5, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	9305      	str	r3, [sp, #20]
 8004964:	9b07      	ldr	r3, [sp, #28]
 8004966:	b31b      	cbz	r3, 80049b0 <_dtoa_r+0x7a0>
 8004968:	9b08      	ldr	r3, [sp, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80af 	beq.w	8004ace <_dtoa_r+0x8be>
 8004970:	2e00      	cmp	r6, #0
 8004972:	dd13      	ble.n	800499c <_dtoa_r+0x78c>
 8004974:	4639      	mov	r1, r7
 8004976:	4632      	mov	r2, r6
 8004978:	4620      	mov	r0, r4
 800497a:	f000 fe1b 	bl	80055b4 <__pow5mult>
 800497e:	ee18 2a10 	vmov	r2, s16
 8004982:	4601      	mov	r1, r0
 8004984:	4607      	mov	r7, r0
 8004986:	4620      	mov	r0, r4
 8004988:	f000 fd6a 	bl	8005460 <__multiply>
 800498c:	ee18 1a10 	vmov	r1, s16
 8004990:	4680      	mov	r8, r0
 8004992:	4620      	mov	r0, r4
 8004994:	f000 fc96 	bl	80052c4 <_Bfree>
 8004998:	ee08 8a10 	vmov	s16, r8
 800499c:	9b07      	ldr	r3, [sp, #28]
 800499e:	1b9a      	subs	r2, r3, r6
 80049a0:	d006      	beq.n	80049b0 <_dtoa_r+0x7a0>
 80049a2:	ee18 1a10 	vmov	r1, s16
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 fe04 	bl	80055b4 <__pow5mult>
 80049ac:	ee08 0a10 	vmov	s16, r0
 80049b0:	2101      	movs	r1, #1
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 fd3e 	bl	8005434 <__i2b>
 80049b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	4606      	mov	r6, r0
 80049be:	f340 8088 	ble.w	8004ad2 <_dtoa_r+0x8c2>
 80049c2:	461a      	mov	r2, r3
 80049c4:	4601      	mov	r1, r0
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 fdf4 	bl	80055b4 <__pow5mult>
 80049cc:	9b06      	ldr	r3, [sp, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	4606      	mov	r6, r0
 80049d2:	f340 8081 	ble.w	8004ad8 <_dtoa_r+0x8c8>
 80049d6:	f04f 0800 	mov.w	r8, #0
 80049da:	6933      	ldr	r3, [r6, #16]
 80049dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049e0:	6918      	ldr	r0, [r3, #16]
 80049e2:	f000 fcd7 	bl	8005394 <__hi0bits>
 80049e6:	f1c0 0020 	rsb	r0, r0, #32
 80049ea:	9b05      	ldr	r3, [sp, #20]
 80049ec:	4418      	add	r0, r3
 80049ee:	f010 001f 	ands.w	r0, r0, #31
 80049f2:	f000 8092 	beq.w	8004b1a <_dtoa_r+0x90a>
 80049f6:	f1c0 0320 	rsb	r3, r0, #32
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	f340 808a 	ble.w	8004b14 <_dtoa_r+0x904>
 8004a00:	f1c0 001c 	rsb	r0, r0, #28
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	4403      	add	r3, r0
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	9b05      	ldr	r3, [sp, #20]
 8004a0c:	4403      	add	r3, r0
 8004a0e:	4405      	add	r5, r0
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dd07      	ble.n	8004a28 <_dtoa_r+0x818>
 8004a18:	ee18 1a10 	vmov	r1, s16
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 fe22 	bl	8005668 <__lshift>
 8004a24:	ee08 0a10 	vmov	s16, r0
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dd05      	ble.n	8004a3a <_dtoa_r+0x82a>
 8004a2e:	4631      	mov	r1, r6
 8004a30:	461a      	mov	r2, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 fe18 	bl	8005668 <__lshift>
 8004a38:	4606      	mov	r6, r0
 8004a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d06e      	beq.n	8004b1e <_dtoa_r+0x90e>
 8004a40:	ee18 0a10 	vmov	r0, s16
 8004a44:	4631      	mov	r1, r6
 8004a46:	f000 fe7f 	bl	8005748 <__mcmp>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	da67      	bge.n	8004b1e <_dtoa_r+0x90e>
 8004a4e:	9b00      	ldr	r3, [sp, #0]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	ee18 1a10 	vmov	r1, s16
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	220a      	movs	r2, #10
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 fc53 	bl	8005308 <__multadd>
 8004a62:	9b08      	ldr	r3, [sp, #32]
 8004a64:	ee08 0a10 	vmov	s16, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 81b1 	beq.w	8004dd0 <_dtoa_r+0xbc0>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4639      	mov	r1, r7
 8004a72:	220a      	movs	r2, #10
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 fc47 	bl	8005308 <__multadd>
 8004a7a:	9b02      	ldr	r3, [sp, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	4607      	mov	r7, r0
 8004a80:	f300 808e 	bgt.w	8004ba0 <_dtoa_r+0x990>
 8004a84:	9b06      	ldr	r3, [sp, #24]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	dc51      	bgt.n	8004b2e <_dtoa_r+0x91e>
 8004a8a:	e089      	b.n	8004ba0 <_dtoa_r+0x990>
 8004a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a92:	e74b      	b.n	800492c <_dtoa_r+0x71c>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1e5e      	subs	r6, r3, #1
 8004a98:	9b07      	ldr	r3, [sp, #28]
 8004a9a:	42b3      	cmp	r3, r6
 8004a9c:	bfbf      	itttt	lt
 8004a9e:	9b07      	ldrlt	r3, [sp, #28]
 8004aa0:	9607      	strlt	r6, [sp, #28]
 8004aa2:	1af2      	sublt	r2, r6, r3
 8004aa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004aa6:	bfb6      	itet	lt
 8004aa8:	189b      	addlt	r3, r3, r2
 8004aaa:	1b9e      	subge	r6, r3, r6
 8004aac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	bfb8      	it	lt
 8004ab2:	2600      	movlt	r6, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfb7      	itett	lt
 8004ab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004abc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004ac0:	1a9d      	sublt	r5, r3, r2
 8004ac2:	2300      	movlt	r3, #0
 8004ac4:	e734      	b.n	8004930 <_dtoa_r+0x720>
 8004ac6:	9e07      	ldr	r6, [sp, #28]
 8004ac8:	9d04      	ldr	r5, [sp, #16]
 8004aca:	9f08      	ldr	r7, [sp, #32]
 8004acc:	e73b      	b.n	8004946 <_dtoa_r+0x736>
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	e767      	b.n	80049a2 <_dtoa_r+0x792>
 8004ad2:	9b06      	ldr	r3, [sp, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	dc18      	bgt.n	8004b0a <_dtoa_r+0x8fa>
 8004ad8:	f1ba 0f00 	cmp.w	sl, #0
 8004adc:	d115      	bne.n	8004b0a <_dtoa_r+0x8fa>
 8004ade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ae2:	b993      	cbnz	r3, 8004b0a <_dtoa_r+0x8fa>
 8004ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ae8:	0d1b      	lsrs	r3, r3, #20
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	b183      	cbz	r3, 8004b10 <_dtoa_r+0x900>
 8004aee:	9b04      	ldr	r3, [sp, #16]
 8004af0:	3301      	adds	r3, #1
 8004af2:	9304      	str	r3, [sp, #16]
 8004af4:	9b05      	ldr	r3, [sp, #20]
 8004af6:	3301      	adds	r3, #1
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	f04f 0801 	mov.w	r8, #1
 8004afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f47f af6a 	bne.w	80049da <_dtoa_r+0x7ca>
 8004b06:	2001      	movs	r0, #1
 8004b08:	e76f      	b.n	80049ea <_dtoa_r+0x7da>
 8004b0a:	f04f 0800 	mov.w	r8, #0
 8004b0e:	e7f6      	b.n	8004afe <_dtoa_r+0x8ee>
 8004b10:	4698      	mov	r8, r3
 8004b12:	e7f4      	b.n	8004afe <_dtoa_r+0x8ee>
 8004b14:	f43f af7d 	beq.w	8004a12 <_dtoa_r+0x802>
 8004b18:	4618      	mov	r0, r3
 8004b1a:	301c      	adds	r0, #28
 8004b1c:	e772      	b.n	8004a04 <_dtoa_r+0x7f4>
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dc37      	bgt.n	8004b94 <_dtoa_r+0x984>
 8004b24:	9b06      	ldr	r3, [sp, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	dd34      	ble.n	8004b94 <_dtoa_r+0x984>
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	9302      	str	r3, [sp, #8]
 8004b2e:	9b02      	ldr	r3, [sp, #8]
 8004b30:	b96b      	cbnz	r3, 8004b4e <_dtoa_r+0x93e>
 8004b32:	4631      	mov	r1, r6
 8004b34:	2205      	movs	r2, #5
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 fbe6 	bl	8005308 <__multadd>
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4606      	mov	r6, r0
 8004b40:	ee18 0a10 	vmov	r0, s16
 8004b44:	f000 fe00 	bl	8005748 <__mcmp>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f73f adbb 	bgt.w	80046c4 <_dtoa_r+0x4b4>
 8004b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b50:	9d01      	ldr	r5, [sp, #4]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 fbb1 	bl	80052c4 <_Bfree>
 8004b62:	2f00      	cmp	r7, #0
 8004b64:	f43f aea4 	beq.w	80048b0 <_dtoa_r+0x6a0>
 8004b68:	f1b8 0f00 	cmp.w	r8, #0
 8004b6c:	d005      	beq.n	8004b7a <_dtoa_r+0x96a>
 8004b6e:	45b8      	cmp	r8, r7
 8004b70:	d003      	beq.n	8004b7a <_dtoa_r+0x96a>
 8004b72:	4641      	mov	r1, r8
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 fba5 	bl	80052c4 <_Bfree>
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 fba1 	bl	80052c4 <_Bfree>
 8004b82:	e695      	b.n	80048b0 <_dtoa_r+0x6a0>
 8004b84:	2600      	movs	r6, #0
 8004b86:	4637      	mov	r7, r6
 8004b88:	e7e1      	b.n	8004b4e <_dtoa_r+0x93e>
 8004b8a:	9700      	str	r7, [sp, #0]
 8004b8c:	4637      	mov	r7, r6
 8004b8e:	e599      	b.n	80046c4 <_dtoa_r+0x4b4>
 8004b90:	40240000 	.word	0x40240000
 8004b94:	9b08      	ldr	r3, [sp, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80ca 	beq.w	8004d30 <_dtoa_r+0xb20>
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	dd05      	ble.n	8004bb0 <_dtoa_r+0x9a0>
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	462a      	mov	r2, r5
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 fd5d 	bl	8005668 <__lshift>
 8004bae:	4607      	mov	r7, r0
 8004bb0:	f1b8 0f00 	cmp.w	r8, #0
 8004bb4:	d05b      	beq.n	8004c6e <_dtoa_r+0xa5e>
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fb43 	bl	8005244 <_Balloc>
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	b928      	cbnz	r0, 8004bce <_dtoa_r+0x9be>
 8004bc2:	4b87      	ldr	r3, [pc, #540]	; (8004de0 <_dtoa_r+0xbd0>)
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004bca:	f7ff bb3b 	b.w	8004244 <_dtoa_r+0x34>
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	3202      	adds	r2, #2
 8004bd2:	0092      	lsls	r2, r2, #2
 8004bd4:	f107 010c 	add.w	r1, r7, #12
 8004bd8:	300c      	adds	r0, #12
 8004bda:	f7fe fca9 	bl	8003530 <memcpy>
 8004bde:	2201      	movs	r2, #1
 8004be0:	4629      	mov	r1, r5
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fd40 	bl	8005668 <__lshift>
 8004be8:	9b01      	ldr	r3, [sp, #4]
 8004bea:	f103 0901 	add.w	r9, r3, #1
 8004bee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	9305      	str	r3, [sp, #20]
 8004bf6:	f00a 0301 	and.w	r3, sl, #1
 8004bfa:	46b8      	mov	r8, r7
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	4607      	mov	r7, r0
 8004c00:	4631      	mov	r1, r6
 8004c02:	ee18 0a10 	vmov	r0, s16
 8004c06:	f7ff fa77 	bl	80040f8 <quorem>
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004c12:	ee18 0a10 	vmov	r0, s16
 8004c16:	f000 fd97 	bl	8005748 <__mcmp>
 8004c1a:	463a      	mov	r2, r7
 8004c1c:	9003      	str	r0, [sp, #12]
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 fdad 	bl	8005780 <__mdiff>
 8004c26:	68c2      	ldr	r2, [r0, #12]
 8004c28:	f109 3bff 	add.w	fp, r9, #4294967295
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	bb02      	cbnz	r2, 8004c72 <_dtoa_r+0xa62>
 8004c30:	4601      	mov	r1, r0
 8004c32:	ee18 0a10 	vmov	r0, s16
 8004c36:	f000 fd87 	bl	8005748 <__mcmp>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4620      	mov	r0, r4
 8004c40:	9207      	str	r2, [sp, #28]
 8004c42:	f000 fb3f 	bl	80052c4 <_Bfree>
 8004c46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004c4a:	ea43 0102 	orr.w	r1, r3, r2
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	464d      	mov	r5, r9
 8004c54:	d10f      	bne.n	8004c76 <_dtoa_r+0xa66>
 8004c56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c5a:	d02a      	beq.n	8004cb2 <_dtoa_r+0xaa2>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	dd02      	ble.n	8004c68 <_dtoa_r+0xa58>
 8004c62:	9b02      	ldr	r3, [sp, #8]
 8004c64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004c68:	f88b a000 	strb.w	sl, [fp]
 8004c6c:	e775      	b.n	8004b5a <_dtoa_r+0x94a>
 8004c6e:	4638      	mov	r0, r7
 8004c70:	e7ba      	b.n	8004be8 <_dtoa_r+0x9d8>
 8004c72:	2201      	movs	r2, #1
 8004c74:	e7e2      	b.n	8004c3c <_dtoa_r+0xa2c>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db04      	blt.n	8004c86 <_dtoa_r+0xa76>
 8004c7c:	9906      	ldr	r1, [sp, #24]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	9904      	ldr	r1, [sp, #16]
 8004c82:	430b      	orrs	r3, r1
 8004c84:	d122      	bne.n	8004ccc <_dtoa_r+0xabc>
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	ddee      	ble.n	8004c68 <_dtoa_r+0xa58>
 8004c8a:	ee18 1a10 	vmov	r1, s16
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fce9 	bl	8005668 <__lshift>
 8004c96:	4631      	mov	r1, r6
 8004c98:	ee08 0a10 	vmov	s16, r0
 8004c9c:	f000 fd54 	bl	8005748 <__mcmp>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc03      	bgt.n	8004cac <_dtoa_r+0xa9c>
 8004ca4:	d1e0      	bne.n	8004c68 <_dtoa_r+0xa58>
 8004ca6:	f01a 0f01 	tst.w	sl, #1
 8004caa:	d0dd      	beq.n	8004c68 <_dtoa_r+0xa58>
 8004cac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004cb0:	d1d7      	bne.n	8004c62 <_dtoa_r+0xa52>
 8004cb2:	2339      	movs	r3, #57	; 0x39
 8004cb4:	f88b 3000 	strb.w	r3, [fp]
 8004cb8:	462b      	mov	r3, r5
 8004cba:	461d      	mov	r5, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004cc2:	2a39      	cmp	r2, #57	; 0x39
 8004cc4:	d071      	beq.n	8004daa <_dtoa_r+0xb9a>
 8004cc6:	3201      	adds	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e746      	b.n	8004b5a <_dtoa_r+0x94a>
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	dd07      	ble.n	8004ce0 <_dtoa_r+0xad0>
 8004cd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004cd4:	d0ed      	beq.n	8004cb2 <_dtoa_r+0xaa2>
 8004cd6:	f10a 0301 	add.w	r3, sl, #1
 8004cda:	f88b 3000 	strb.w	r3, [fp]
 8004cde:	e73c      	b.n	8004b5a <_dtoa_r+0x94a>
 8004ce0:	9b05      	ldr	r3, [sp, #20]
 8004ce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004ce6:	4599      	cmp	r9, r3
 8004ce8:	d047      	beq.n	8004d7a <_dtoa_r+0xb6a>
 8004cea:	ee18 1a10 	vmov	r1, s16
 8004cee:	2300      	movs	r3, #0
 8004cf0:	220a      	movs	r2, #10
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 fb08 	bl	8005308 <__multadd>
 8004cf8:	45b8      	cmp	r8, r7
 8004cfa:	ee08 0a10 	vmov	s16, r0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	f04f 020a 	mov.w	r2, #10
 8004d06:	4641      	mov	r1, r8
 8004d08:	4620      	mov	r0, r4
 8004d0a:	d106      	bne.n	8004d1a <_dtoa_r+0xb0a>
 8004d0c:	f000 fafc 	bl	8005308 <__multadd>
 8004d10:	4680      	mov	r8, r0
 8004d12:	4607      	mov	r7, r0
 8004d14:	f109 0901 	add.w	r9, r9, #1
 8004d18:	e772      	b.n	8004c00 <_dtoa_r+0x9f0>
 8004d1a:	f000 faf5 	bl	8005308 <__multadd>
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4680      	mov	r8, r0
 8004d22:	2300      	movs	r3, #0
 8004d24:	220a      	movs	r2, #10
 8004d26:	4620      	mov	r0, r4
 8004d28:	f000 faee 	bl	8005308 <__multadd>
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	e7f1      	b.n	8004d14 <_dtoa_r+0xb04>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	9d01      	ldr	r5, [sp, #4]
 8004d36:	ee18 0a10 	vmov	r0, s16
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	f7ff f9dc 	bl	80040f8 <quorem>
 8004d40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004d44:	9b01      	ldr	r3, [sp, #4]
 8004d46:	f805 ab01 	strb.w	sl, [r5], #1
 8004d4a:	1aea      	subs	r2, r5, r3
 8004d4c:	9b02      	ldr	r3, [sp, #8]
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	dd09      	ble.n	8004d66 <_dtoa_r+0xb56>
 8004d52:	ee18 1a10 	vmov	r1, s16
 8004d56:	2300      	movs	r3, #0
 8004d58:	220a      	movs	r2, #10
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 fad4 	bl	8005308 <__multadd>
 8004d60:	ee08 0a10 	vmov	s16, r0
 8004d64:	e7e7      	b.n	8004d36 <_dtoa_r+0xb26>
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bfc8      	it	gt
 8004d6c:	461d      	movgt	r5, r3
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	bfd8      	it	le
 8004d72:	2501      	movle	r5, #1
 8004d74:	441d      	add	r5, r3
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	ee18 1a10 	vmov	r1, s16
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 fc71 	bl	8005668 <__lshift>
 8004d86:	4631      	mov	r1, r6
 8004d88:	ee08 0a10 	vmov	s16, r0
 8004d8c:	f000 fcdc 	bl	8005748 <__mcmp>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	dc91      	bgt.n	8004cb8 <_dtoa_r+0xaa8>
 8004d94:	d102      	bne.n	8004d9c <_dtoa_r+0xb8c>
 8004d96:	f01a 0f01 	tst.w	sl, #1
 8004d9a:	d18d      	bne.n	8004cb8 <_dtoa_r+0xaa8>
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	461d      	mov	r5, r3
 8004da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004da4:	2a30      	cmp	r2, #48	; 0x30
 8004da6:	d0fa      	beq.n	8004d9e <_dtoa_r+0xb8e>
 8004da8:	e6d7      	b.n	8004b5a <_dtoa_r+0x94a>
 8004daa:	9a01      	ldr	r2, [sp, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d184      	bne.n	8004cba <_dtoa_r+0xaaa>
 8004db0:	9b00      	ldr	r3, [sp, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2331      	movs	r3, #49	; 0x31
 8004db8:	7013      	strb	r3, [r2, #0]
 8004dba:	e6ce      	b.n	8004b5a <_dtoa_r+0x94a>
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <_dtoa_r+0xbd4>)
 8004dbe:	f7ff ba95 	b.w	80042ec <_dtoa_r+0xdc>
 8004dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f aa6e 	bne.w	80042a6 <_dtoa_r+0x96>
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <_dtoa_r+0xbd8>)
 8004dcc:	f7ff ba8e 	b.w	80042ec <_dtoa_r+0xdc>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dcae      	bgt.n	8004d34 <_dtoa_r+0xb24>
 8004dd6:	9b06      	ldr	r3, [sp, #24]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f73f aea8 	bgt.w	8004b2e <_dtoa_r+0x91e>
 8004dde:	e7a9      	b.n	8004d34 <_dtoa_r+0xb24>
 8004de0:	0800635f 	.word	0x0800635f
 8004de4:	080062bc 	.word	0x080062bc
 8004de8:	080062e0 	.word	0x080062e0

08004dec <__sflush_r>:
 8004dec:	898a      	ldrh	r2, [r1, #12]
 8004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	0710      	lsls	r0, r2, #28
 8004df6:	460c      	mov	r4, r1
 8004df8:	d458      	bmi.n	8004eac <__sflush_r+0xc0>
 8004dfa:	684b      	ldr	r3, [r1, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc05      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dc02      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d0f9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e18:	682f      	ldr	r7, [r5, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	d032      	beq.n	8004e84 <__sflush_r+0x98>
 8004e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	075a      	lsls	r2, r3, #29
 8004e24:	d505      	bpl.n	8004e32 <__sflush_r+0x46>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2c:	b10b      	cbz	r3, 8004e32 <__sflush_r+0x46>
 8004e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	4602      	mov	r2, r0
 8004e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b0      	blx	r6
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	d106      	bne.n	8004e52 <__sflush_r+0x66>
 8004e44:	6829      	ldr	r1, [r5, #0]
 8004e46:	291d      	cmp	r1, #29
 8004e48:	d82c      	bhi.n	8004ea4 <__sflush_r+0xb8>
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <__sflush_r+0x108>)
 8004e4c:	40ca      	lsrs	r2, r1
 8004e4e:	07d6      	lsls	r6, r2, #31
 8004e50:	d528      	bpl.n	8004ea4 <__sflush_r+0xb8>
 8004e52:	2200      	movs	r2, #0
 8004e54:	6062      	str	r2, [r4, #4]
 8004e56:	04d9      	lsls	r1, r3, #19
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	d504      	bpl.n	8004e68 <__sflush_r+0x7c>
 8004e5e:	1c42      	adds	r2, r0, #1
 8004e60:	d101      	bne.n	8004e66 <__sflush_r+0x7a>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	b903      	cbnz	r3, 8004e68 <__sflush_r+0x7c>
 8004e66:	6560      	str	r0, [r4, #84]	; 0x54
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	602f      	str	r7, [r5, #0]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d0ca      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <__sflush_r+0x92>
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 fd7d 	bl	8005978 <_free_r>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	6360      	str	r0, [r4, #52]	; 0x34
 8004e82:	e7c1      	b.n	8004e08 <__sflush_r+0x1c>
 8004e84:	6a21      	ldr	r1, [r4, #32]
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	1c41      	adds	r1, r0, #1
 8004e8e:	d1c7      	bne.n	8004e20 <__sflush_r+0x34>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c4      	beq.n	8004e20 <__sflush_r+0x34>
 8004e96:	2b1d      	cmp	r3, #29
 8004e98:	d001      	beq.n	8004e9e <__sflush_r+0xb2>
 8004e9a:	2b16      	cmp	r3, #22
 8004e9c:	d101      	bne.n	8004ea2 <__sflush_r+0xb6>
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	e7b1      	b.n	8004e06 <__sflush_r+0x1a>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	e7ad      	b.n	8004e08 <__sflush_r+0x1c>
 8004eac:	690f      	ldr	r7, [r1, #16]
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	d0a9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004eb2:	0793      	lsls	r3, r2, #30
 8004eb4:	680e      	ldr	r6, [r1, #0]
 8004eb6:	bf08      	it	eq
 8004eb8:	694b      	ldreq	r3, [r1, #20]
 8004eba:	600f      	str	r7, [r1, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	eba6 0807 	sub.w	r8, r6, r7
 8004ec4:	608b      	str	r3, [r1, #8]
 8004ec6:	f1b8 0f00 	cmp.w	r8, #0
 8004eca:	dd9c      	ble.n	8004e06 <__sflush_r+0x1a>
 8004ecc:	6a21      	ldr	r1, [r4, #32]
 8004ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dc06      	bgt.n	8004eea <__sflush_r+0xfe>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e78e      	b.n	8004e08 <__sflush_r+0x1c>
 8004eea:	4407      	add	r7, r0
 8004eec:	eba8 0800 	sub.w	r8, r8, r0
 8004ef0:	e7e9      	b.n	8004ec6 <__sflush_r+0xda>
 8004ef2:	bf00      	nop
 8004ef4:	20400001 	.word	0x20400001

08004ef8 <_fflush_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	690b      	ldr	r3, [r1, #16]
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	b913      	cbnz	r3, 8004f08 <_fflush_r+0x10>
 8004f02:	2500      	movs	r5, #0
 8004f04:	4628      	mov	r0, r5
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	b118      	cbz	r0, 8004f12 <_fflush_r+0x1a>
 8004f0a:	6983      	ldr	r3, [r0, #24]
 8004f0c:	b90b      	cbnz	r3, 8004f12 <_fflush_r+0x1a>
 8004f0e:	f000 f887 	bl	8005020 <__sinit>
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <_fflush_r+0x6c>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d11b      	bne.n	8004f50 <_fflush_r+0x58>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ef      	beq.n	8004f02 <_fflush_r+0xa>
 8004f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f24:	07d0      	lsls	r0, r2, #31
 8004f26:	d404      	bmi.n	8004f32 <_fflush_r+0x3a>
 8004f28:	0599      	lsls	r1, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <_fflush_r+0x3a>
 8004f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2e:	f000 f91a 	bl	8005166 <__retarget_lock_acquire_recursive>
 8004f32:	4628      	mov	r0, r5
 8004f34:	4621      	mov	r1, r4
 8004f36:	f7ff ff59 	bl	8004dec <__sflush_r>
 8004f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f3c:	07da      	lsls	r2, r3, #31
 8004f3e:	4605      	mov	r5, r0
 8004f40:	d4e0      	bmi.n	8004f04 <_fflush_r+0xc>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	059b      	lsls	r3, r3, #22
 8004f46:	d4dd      	bmi.n	8004f04 <_fflush_r+0xc>
 8004f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4a:	f000 f90d 	bl	8005168 <__retarget_lock_release_recursive>
 8004f4e:	e7d9      	b.n	8004f04 <_fflush_r+0xc>
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <_fflush_r+0x70>)
 8004f52:	429c      	cmp	r4, r3
 8004f54:	d101      	bne.n	8004f5a <_fflush_r+0x62>
 8004f56:	68ac      	ldr	r4, [r5, #8]
 8004f58:	e7df      	b.n	8004f1a <_fflush_r+0x22>
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <_fflush_r+0x74>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	bf08      	it	eq
 8004f60:	68ec      	ldreq	r4, [r5, #12]
 8004f62:	e7da      	b.n	8004f1a <_fflush_r+0x22>
 8004f64:	08006390 	.word	0x08006390
 8004f68:	080063b0 	.word	0x080063b0
 8004f6c:	08006370 	.word	0x08006370

08004f70 <std>:
 8004f70:	2300      	movs	r3, #0
 8004f72:	b510      	push	{r4, lr}
 8004f74:	4604      	mov	r4, r0
 8004f76:	e9c0 3300 	strd	r3, r3, [r0]
 8004f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7e:	6083      	str	r3, [r0, #8]
 8004f80:	8181      	strh	r1, [r0, #12]
 8004f82:	6643      	str	r3, [r0, #100]	; 0x64
 8004f84:	81c2      	strh	r2, [r0, #14]
 8004f86:	6183      	str	r3, [r0, #24]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	305c      	adds	r0, #92	; 0x5c
 8004f8e:	f7fe fadd 	bl	800354c <memset>
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <std+0x38>)
 8004f94:	6263      	str	r3, [r4, #36]	; 0x24
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <std+0x3c>)
 8004f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <std+0x40>)
 8004f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <std+0x44>)
 8004fa0:	6224      	str	r4, [r4, #32]
 8004fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	08005e9d 	.word	0x08005e9d
 8004fac:	08005ebf 	.word	0x08005ebf
 8004fb0:	08005ef7 	.word	0x08005ef7
 8004fb4:	08005f1b 	.word	0x08005f1b

08004fb8 <_cleanup_r>:
 8004fb8:	4901      	ldr	r1, [pc, #4]	; (8004fc0 <_cleanup_r+0x8>)
 8004fba:	f000 b8af 	b.w	800511c <_fwalk_reent>
 8004fbe:	bf00      	nop
 8004fc0:	08004ef9 	.word	0x08004ef9

08004fc4 <__sfmoreglue>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	2268      	movs	r2, #104	; 0x68
 8004fc8:	1e4d      	subs	r5, r1, #1
 8004fca:	4355      	muls	r5, r2
 8004fcc:	460e      	mov	r6, r1
 8004fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fd2:	f000 fd3d 	bl	8005a50 <_malloc_r>
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b140      	cbz	r0, 8004fec <__sfmoreglue+0x28>
 8004fda:	2100      	movs	r1, #0
 8004fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8004fe0:	300c      	adds	r0, #12
 8004fe2:	60a0      	str	r0, [r4, #8]
 8004fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fe8:	f7fe fab0 	bl	800354c <memset>
 8004fec:	4620      	mov	r0, r4
 8004fee:	bd70      	pop	{r4, r5, r6, pc}

08004ff0 <__sfp_lock_acquire>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__sfp_lock_acquire+0x8>)
 8004ff2:	f000 b8b8 	b.w	8005166 <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	20000485 	.word	0x20000485

08004ffc <__sfp_lock_release>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__sfp_lock_release+0x8>)
 8004ffe:	f000 b8b3 	b.w	8005168 <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	20000485 	.word	0x20000485

08005008 <__sinit_lock_acquire>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__sinit_lock_acquire+0x8>)
 800500a:	f000 b8ac 	b.w	8005166 <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	20000486 	.word	0x20000486

08005014 <__sinit_lock_release>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__sinit_lock_release+0x8>)
 8005016:	f000 b8a7 	b.w	8005168 <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	20000486 	.word	0x20000486

08005020 <__sinit>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4604      	mov	r4, r0
 8005024:	f7ff fff0 	bl	8005008 <__sinit_lock_acquire>
 8005028:	69a3      	ldr	r3, [r4, #24]
 800502a:	b11b      	cbz	r3, 8005034 <__sinit+0x14>
 800502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005030:	f7ff bff0 	b.w	8005014 <__sinit_lock_release>
 8005034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005038:	6523      	str	r3, [r4, #80]	; 0x50
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <__sinit+0x68>)
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <__sinit+0x6c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	62a2      	str	r2, [r4, #40]	; 0x28
 8005042:	42a3      	cmp	r3, r4
 8005044:	bf04      	itt	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	61a3      	streq	r3, [r4, #24]
 800504a:	4620      	mov	r0, r4
 800504c:	f000 f820 	bl	8005090 <__sfp>
 8005050:	6060      	str	r0, [r4, #4]
 8005052:	4620      	mov	r0, r4
 8005054:	f000 f81c 	bl	8005090 <__sfp>
 8005058:	60a0      	str	r0, [r4, #8]
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f818 	bl	8005090 <__sfp>
 8005060:	2200      	movs	r2, #0
 8005062:	60e0      	str	r0, [r4, #12]
 8005064:	2104      	movs	r1, #4
 8005066:	6860      	ldr	r0, [r4, #4]
 8005068:	f7ff ff82 	bl	8004f70 <std>
 800506c:	68a0      	ldr	r0, [r4, #8]
 800506e:	2201      	movs	r2, #1
 8005070:	2109      	movs	r1, #9
 8005072:	f7ff ff7d 	bl	8004f70 <std>
 8005076:	68e0      	ldr	r0, [r4, #12]
 8005078:	2202      	movs	r2, #2
 800507a:	2112      	movs	r1, #18
 800507c:	f7ff ff78 	bl	8004f70 <std>
 8005080:	2301      	movs	r3, #1
 8005082:	61a3      	str	r3, [r4, #24]
 8005084:	e7d2      	b.n	800502c <__sinit+0xc>
 8005086:	bf00      	nop
 8005088:	080062a8 	.word	0x080062a8
 800508c:	08004fb9 	.word	0x08004fb9

08005090 <__sfp>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4607      	mov	r7, r0
 8005094:	f7ff ffac 	bl	8004ff0 <__sfp_lock_acquire>
 8005098:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <__sfp+0x84>)
 800509a:	681e      	ldr	r6, [r3, #0]
 800509c:	69b3      	ldr	r3, [r6, #24]
 800509e:	b913      	cbnz	r3, 80050a6 <__sfp+0x16>
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff ffbd 	bl	8005020 <__sinit>
 80050a6:	3648      	adds	r6, #72	; 0x48
 80050a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	d503      	bpl.n	80050b8 <__sfp+0x28>
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	b30b      	cbz	r3, 80050f8 <__sfp+0x68>
 80050b4:	6836      	ldr	r6, [r6, #0]
 80050b6:	e7f7      	b.n	80050a8 <__sfp+0x18>
 80050b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050bc:	b9d5      	cbnz	r5, 80050f4 <__sfp+0x64>
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <__sfp+0x88>)
 80050c0:	60e3      	str	r3, [r4, #12]
 80050c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050c6:	6665      	str	r5, [r4, #100]	; 0x64
 80050c8:	f000 f84c 	bl	8005164 <__retarget_lock_init_recursive>
 80050cc:	f7ff ff96 	bl	8004ffc <__sfp_lock_release>
 80050d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050d8:	6025      	str	r5, [r4, #0]
 80050da:	61a5      	str	r5, [r4, #24]
 80050dc:	2208      	movs	r2, #8
 80050de:	4629      	mov	r1, r5
 80050e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050e4:	f7fe fa32 	bl	800354c <memset>
 80050e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050f0:	4620      	mov	r0, r4
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	3468      	adds	r4, #104	; 0x68
 80050f6:	e7d9      	b.n	80050ac <__sfp+0x1c>
 80050f8:	2104      	movs	r1, #4
 80050fa:	4638      	mov	r0, r7
 80050fc:	f7ff ff62 	bl	8004fc4 <__sfmoreglue>
 8005100:	4604      	mov	r4, r0
 8005102:	6030      	str	r0, [r6, #0]
 8005104:	2800      	cmp	r0, #0
 8005106:	d1d5      	bne.n	80050b4 <__sfp+0x24>
 8005108:	f7ff ff78 	bl	8004ffc <__sfp_lock_release>
 800510c:	230c      	movs	r3, #12
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	e7ee      	b.n	80050f0 <__sfp+0x60>
 8005112:	bf00      	nop
 8005114:	080062a8 	.word	0x080062a8
 8005118:	ffff0001 	.word	0xffff0001

0800511c <_fwalk_reent>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	4606      	mov	r6, r0
 8005122:	4688      	mov	r8, r1
 8005124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005128:	2700      	movs	r7, #0
 800512a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800512e:	f1b9 0901 	subs.w	r9, r9, #1
 8005132:	d505      	bpl.n	8005140 <_fwalk_reent+0x24>
 8005134:	6824      	ldr	r4, [r4, #0]
 8005136:	2c00      	cmp	r4, #0
 8005138:	d1f7      	bne.n	800512a <_fwalk_reent+0xe>
 800513a:	4638      	mov	r0, r7
 800513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d907      	bls.n	8005156 <_fwalk_reent+0x3a>
 8005146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800514a:	3301      	adds	r3, #1
 800514c:	d003      	beq.n	8005156 <_fwalk_reent+0x3a>
 800514e:	4629      	mov	r1, r5
 8005150:	4630      	mov	r0, r6
 8005152:	47c0      	blx	r8
 8005154:	4307      	orrs	r7, r0
 8005156:	3568      	adds	r5, #104	; 0x68
 8005158:	e7e9      	b.n	800512e <_fwalk_reent+0x12>
	...

0800515c <_localeconv_r>:
 800515c:	4800      	ldr	r0, [pc, #0]	; (8005160 <_localeconv_r+0x4>)
 800515e:	4770      	bx	lr
 8005160:	20000164 	.word	0x20000164

08005164 <__retarget_lock_init_recursive>:
 8005164:	4770      	bx	lr

08005166 <__retarget_lock_acquire_recursive>:
 8005166:	4770      	bx	lr

08005168 <__retarget_lock_release_recursive>:
 8005168:	4770      	bx	lr

0800516a <__swhatbuf_r>:
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	460e      	mov	r6, r1
 800516e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005172:	2900      	cmp	r1, #0
 8005174:	b096      	sub	sp, #88	; 0x58
 8005176:	4614      	mov	r4, r2
 8005178:	461d      	mov	r5, r3
 800517a:	da08      	bge.n	800518e <__swhatbuf_r+0x24>
 800517c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	061a      	lsls	r2, r3, #24
 8005186:	d410      	bmi.n	80051aa <__swhatbuf_r+0x40>
 8005188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518c:	e00e      	b.n	80051ac <__swhatbuf_r+0x42>
 800518e:	466a      	mov	r2, sp
 8005190:	f000 ff1a 	bl	8005fc8 <_fstat_r>
 8005194:	2800      	cmp	r0, #0
 8005196:	dbf1      	blt.n	800517c <__swhatbuf_r+0x12>
 8005198:	9a01      	ldr	r2, [sp, #4]
 800519a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800519e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051a2:	425a      	negs	r2, r3
 80051a4:	415a      	adcs	r2, r3
 80051a6:	602a      	str	r2, [r5, #0]
 80051a8:	e7ee      	b.n	8005188 <__swhatbuf_r+0x1e>
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	2000      	movs	r0, #0
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	b016      	add	sp, #88	; 0x58
 80051b2:	bd70      	pop	{r4, r5, r6, pc}

080051b4 <__smakebuf_r>:
 80051b4:	898b      	ldrh	r3, [r1, #12]
 80051b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b8:	079d      	lsls	r5, r3, #30
 80051ba:	4606      	mov	r6, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	d507      	bpl.n	80051d0 <__smakebuf_r+0x1c>
 80051c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	2301      	movs	r3, #1
 80051ca:	6163      	str	r3, [r4, #20]
 80051cc:	b002      	add	sp, #8
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	ab01      	add	r3, sp, #4
 80051d2:	466a      	mov	r2, sp
 80051d4:	f7ff ffc9 	bl	800516a <__swhatbuf_r>
 80051d8:	9900      	ldr	r1, [sp, #0]
 80051da:	4605      	mov	r5, r0
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 fc37 	bl	8005a50 <_malloc_r>
 80051e2:	b948      	cbnz	r0, 80051f8 <__smakebuf_r+0x44>
 80051e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e8:	059a      	lsls	r2, r3, #22
 80051ea:	d4ef      	bmi.n	80051cc <__smakebuf_r+0x18>
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	e7e3      	b.n	80051c0 <__smakebuf_r+0xc>
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <__smakebuf_r+0x7c>)
 80051fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	6020      	str	r0, [r4, #0]
 8005200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	9b00      	ldr	r3, [sp, #0]
 8005208:	6163      	str	r3, [r4, #20]
 800520a:	9b01      	ldr	r3, [sp, #4]
 800520c:	6120      	str	r0, [r4, #16]
 800520e:	b15b      	cbz	r3, 8005228 <__smakebuf_r+0x74>
 8005210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005214:	4630      	mov	r0, r6
 8005216:	f000 fee9 	bl	8005fec <_isatty_r>
 800521a:	b128      	cbz	r0, 8005228 <__smakebuf_r+0x74>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	89a0      	ldrh	r0, [r4, #12]
 800522a:	4305      	orrs	r5, r0
 800522c:	81a5      	strh	r5, [r4, #12]
 800522e:	e7cd      	b.n	80051cc <__smakebuf_r+0x18>
 8005230:	08004fb9 	.word	0x08004fb9

08005234 <malloc>:
 8005234:	4b02      	ldr	r3, [pc, #8]	; (8005240 <malloc+0xc>)
 8005236:	4601      	mov	r1, r0
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f000 bc09 	b.w	8005a50 <_malloc_r>
 800523e:	bf00      	nop
 8005240:	20000010 	.word	0x20000010

08005244 <_Balloc>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005248:	4604      	mov	r4, r0
 800524a:	460d      	mov	r5, r1
 800524c:	b976      	cbnz	r6, 800526c <_Balloc+0x28>
 800524e:	2010      	movs	r0, #16
 8005250:	f7ff fff0 	bl	8005234 <malloc>
 8005254:	4602      	mov	r2, r0
 8005256:	6260      	str	r0, [r4, #36]	; 0x24
 8005258:	b920      	cbnz	r0, 8005264 <_Balloc+0x20>
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <_Balloc+0x78>)
 800525c:	4818      	ldr	r0, [pc, #96]	; (80052c0 <_Balloc+0x7c>)
 800525e:	2166      	movs	r1, #102	; 0x66
 8005260:	f000 fe72 	bl	8005f48 <__assert_func>
 8005264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005268:	6006      	str	r6, [r0, #0]
 800526a:	60c6      	str	r6, [r0, #12]
 800526c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800526e:	68f3      	ldr	r3, [r6, #12]
 8005270:	b183      	cbz	r3, 8005294 <_Balloc+0x50>
 8005272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800527a:	b9b8      	cbnz	r0, 80052ac <_Balloc+0x68>
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f605 	lsl.w	r6, r1, r5
 8005282:	1d72      	adds	r2, r6, #5
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	4620      	mov	r0, r4
 8005288:	f000 fb60 	bl	800594c <_calloc_r>
 800528c:	b160      	cbz	r0, 80052a8 <_Balloc+0x64>
 800528e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005292:	e00e      	b.n	80052b2 <_Balloc+0x6e>
 8005294:	2221      	movs	r2, #33	; 0x21
 8005296:	2104      	movs	r1, #4
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fb57 	bl	800594c <_calloc_r>
 800529e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a0:	60f0      	str	r0, [r6, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e4      	bne.n	8005272 <_Balloc+0x2e>
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	6802      	ldr	r2, [r0, #0]
 80052ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052b2:	2300      	movs	r3, #0
 80052b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052b8:	e7f7      	b.n	80052aa <_Balloc+0x66>
 80052ba:	bf00      	nop
 80052bc:	080062ed 	.word	0x080062ed
 80052c0:	080063d0 	.word	0x080063d0

080052c4 <_Bfree>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052c8:	4605      	mov	r5, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	b976      	cbnz	r6, 80052ec <_Bfree+0x28>
 80052ce:	2010      	movs	r0, #16
 80052d0:	f7ff ffb0 	bl	8005234 <malloc>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6268      	str	r0, [r5, #36]	; 0x24
 80052d8:	b920      	cbnz	r0, 80052e4 <_Bfree+0x20>
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <_Bfree+0x3c>)
 80052dc:	4809      	ldr	r0, [pc, #36]	; (8005304 <_Bfree+0x40>)
 80052de:	218a      	movs	r1, #138	; 0x8a
 80052e0:	f000 fe32 	bl	8005f48 <__assert_func>
 80052e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052e8:	6006      	str	r6, [r0, #0]
 80052ea:	60c6      	str	r6, [r0, #12]
 80052ec:	b13c      	cbz	r4, 80052fe <_Bfree+0x3a>
 80052ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052f8:	6021      	str	r1, [r4, #0]
 80052fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	080062ed 	.word	0x080062ed
 8005304:	080063d0 	.word	0x080063d0

08005308 <__multadd>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	690d      	ldr	r5, [r1, #16]
 800530e:	4607      	mov	r7, r0
 8005310:	460c      	mov	r4, r1
 8005312:	461e      	mov	r6, r3
 8005314:	f101 0c14 	add.w	ip, r1, #20
 8005318:	2000      	movs	r0, #0
 800531a:	f8dc 3000 	ldr.w	r3, [ip]
 800531e:	b299      	uxth	r1, r3
 8005320:	fb02 6101 	mla	r1, r2, r1, r6
 8005324:	0c1e      	lsrs	r6, r3, #16
 8005326:	0c0b      	lsrs	r3, r1, #16
 8005328:	fb02 3306 	mla	r3, r2, r6, r3
 800532c:	b289      	uxth	r1, r1
 800532e:	3001      	adds	r0, #1
 8005330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005334:	4285      	cmp	r5, r0
 8005336:	f84c 1b04 	str.w	r1, [ip], #4
 800533a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800533e:	dcec      	bgt.n	800531a <__multadd+0x12>
 8005340:	b30e      	cbz	r6, 8005386 <__multadd+0x7e>
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	42ab      	cmp	r3, r5
 8005346:	dc19      	bgt.n	800537c <__multadd+0x74>
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	4638      	mov	r0, r7
 800534c:	3101      	adds	r1, #1
 800534e:	f7ff ff79 	bl	8005244 <_Balloc>
 8005352:	4680      	mov	r8, r0
 8005354:	b928      	cbnz	r0, 8005362 <__multadd+0x5a>
 8005356:	4602      	mov	r2, r0
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <__multadd+0x84>)
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <__multadd+0x88>)
 800535c:	21b5      	movs	r1, #181	; 0xb5
 800535e:	f000 fdf3 	bl	8005f48 <__assert_func>
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	3202      	adds	r2, #2
 8005366:	f104 010c 	add.w	r1, r4, #12
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	300c      	adds	r0, #12
 800536e:	f7fe f8df 	bl	8003530 <memcpy>
 8005372:	4621      	mov	r1, r4
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ffa5 	bl	80052c4 <_Bfree>
 800537a:	4644      	mov	r4, r8
 800537c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005380:	3501      	adds	r5, #1
 8005382:	615e      	str	r6, [r3, #20]
 8005384:	6125      	str	r5, [r4, #16]
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	0800635f 	.word	0x0800635f
 8005390:	080063d0 	.word	0x080063d0

08005394 <__hi0bits>:
 8005394:	0c03      	lsrs	r3, r0, #16
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	b9d3      	cbnz	r3, 80053d0 <__hi0bits+0x3c>
 800539a:	0400      	lsls	r0, r0, #16
 800539c:	2310      	movs	r3, #16
 800539e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80053a2:	bf04      	itt	eq
 80053a4:	0200      	lsleq	r0, r0, #8
 80053a6:	3308      	addeq	r3, #8
 80053a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80053ac:	bf04      	itt	eq
 80053ae:	0100      	lsleq	r0, r0, #4
 80053b0:	3304      	addeq	r3, #4
 80053b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80053b6:	bf04      	itt	eq
 80053b8:	0080      	lsleq	r0, r0, #2
 80053ba:	3302      	addeq	r3, #2
 80053bc:	2800      	cmp	r0, #0
 80053be:	db05      	blt.n	80053cc <__hi0bits+0x38>
 80053c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80053c4:	f103 0301 	add.w	r3, r3, #1
 80053c8:	bf08      	it	eq
 80053ca:	2320      	moveq	r3, #32
 80053cc:	4618      	mov	r0, r3
 80053ce:	4770      	bx	lr
 80053d0:	2300      	movs	r3, #0
 80053d2:	e7e4      	b.n	800539e <__hi0bits+0xa>

080053d4 <__lo0bits>:
 80053d4:	6803      	ldr	r3, [r0, #0]
 80053d6:	f013 0207 	ands.w	r2, r3, #7
 80053da:	4601      	mov	r1, r0
 80053dc:	d00b      	beq.n	80053f6 <__lo0bits+0x22>
 80053de:	07da      	lsls	r2, r3, #31
 80053e0:	d423      	bmi.n	800542a <__lo0bits+0x56>
 80053e2:	0798      	lsls	r0, r3, #30
 80053e4:	bf49      	itett	mi
 80053e6:	085b      	lsrmi	r3, r3, #1
 80053e8:	089b      	lsrpl	r3, r3, #2
 80053ea:	2001      	movmi	r0, #1
 80053ec:	600b      	strmi	r3, [r1, #0]
 80053ee:	bf5c      	itt	pl
 80053f0:	600b      	strpl	r3, [r1, #0]
 80053f2:	2002      	movpl	r0, #2
 80053f4:	4770      	bx	lr
 80053f6:	b298      	uxth	r0, r3
 80053f8:	b9a8      	cbnz	r0, 8005426 <__lo0bits+0x52>
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	2010      	movs	r0, #16
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	b90a      	cbnz	r2, 8005406 <__lo0bits+0x32>
 8005402:	3008      	adds	r0, #8
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	071a      	lsls	r2, r3, #28
 8005408:	bf04      	itt	eq
 800540a:	091b      	lsreq	r3, r3, #4
 800540c:	3004      	addeq	r0, #4
 800540e:	079a      	lsls	r2, r3, #30
 8005410:	bf04      	itt	eq
 8005412:	089b      	lsreq	r3, r3, #2
 8005414:	3002      	addeq	r0, #2
 8005416:	07da      	lsls	r2, r3, #31
 8005418:	d403      	bmi.n	8005422 <__lo0bits+0x4e>
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	f100 0001 	add.w	r0, r0, #1
 8005420:	d005      	beq.n	800542e <__lo0bits+0x5a>
 8005422:	600b      	str	r3, [r1, #0]
 8005424:	4770      	bx	lr
 8005426:	4610      	mov	r0, r2
 8005428:	e7e9      	b.n	80053fe <__lo0bits+0x2a>
 800542a:	2000      	movs	r0, #0
 800542c:	4770      	bx	lr
 800542e:	2020      	movs	r0, #32
 8005430:	4770      	bx	lr
	...

08005434 <__i2b>:
 8005434:	b510      	push	{r4, lr}
 8005436:	460c      	mov	r4, r1
 8005438:	2101      	movs	r1, #1
 800543a:	f7ff ff03 	bl	8005244 <_Balloc>
 800543e:	4602      	mov	r2, r0
 8005440:	b928      	cbnz	r0, 800544e <__i2b+0x1a>
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <__i2b+0x24>)
 8005444:	4805      	ldr	r0, [pc, #20]	; (800545c <__i2b+0x28>)
 8005446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800544a:	f000 fd7d 	bl	8005f48 <__assert_func>
 800544e:	2301      	movs	r3, #1
 8005450:	6144      	str	r4, [r0, #20]
 8005452:	6103      	str	r3, [r0, #16]
 8005454:	bd10      	pop	{r4, pc}
 8005456:	bf00      	nop
 8005458:	0800635f 	.word	0x0800635f
 800545c:	080063d0 	.word	0x080063d0

08005460 <__multiply>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	4691      	mov	r9, r2
 8005466:	690a      	ldr	r2, [r1, #16]
 8005468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	bfb8      	it	lt
 8005470:	460b      	movlt	r3, r1
 8005472:	460c      	mov	r4, r1
 8005474:	bfbc      	itt	lt
 8005476:	464c      	movlt	r4, r9
 8005478:	4699      	movlt	r9, r3
 800547a:	6927      	ldr	r7, [r4, #16]
 800547c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	6861      	ldr	r1, [r4, #4]
 8005484:	eb07 060a 	add.w	r6, r7, sl
 8005488:	42b3      	cmp	r3, r6
 800548a:	b085      	sub	sp, #20
 800548c:	bfb8      	it	lt
 800548e:	3101      	addlt	r1, #1
 8005490:	f7ff fed8 	bl	8005244 <_Balloc>
 8005494:	b930      	cbnz	r0, 80054a4 <__multiply+0x44>
 8005496:	4602      	mov	r2, r0
 8005498:	4b44      	ldr	r3, [pc, #272]	; (80055ac <__multiply+0x14c>)
 800549a:	4845      	ldr	r0, [pc, #276]	; (80055b0 <__multiply+0x150>)
 800549c:	f240 115d 	movw	r1, #349	; 0x15d
 80054a0:	f000 fd52 	bl	8005f48 <__assert_func>
 80054a4:	f100 0514 	add.w	r5, r0, #20
 80054a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054ac:	462b      	mov	r3, r5
 80054ae:	2200      	movs	r2, #0
 80054b0:	4543      	cmp	r3, r8
 80054b2:	d321      	bcc.n	80054f8 <__multiply+0x98>
 80054b4:	f104 0314 	add.w	r3, r4, #20
 80054b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054bc:	f109 0314 	add.w	r3, r9, #20
 80054c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054c4:	9202      	str	r2, [sp, #8]
 80054c6:	1b3a      	subs	r2, r7, r4
 80054c8:	3a15      	subs	r2, #21
 80054ca:	f022 0203 	bic.w	r2, r2, #3
 80054ce:	3204      	adds	r2, #4
 80054d0:	f104 0115 	add.w	r1, r4, #21
 80054d4:	428f      	cmp	r7, r1
 80054d6:	bf38      	it	cc
 80054d8:	2204      	movcc	r2, #4
 80054da:	9201      	str	r2, [sp, #4]
 80054dc:	9a02      	ldr	r2, [sp, #8]
 80054de:	9303      	str	r3, [sp, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d80c      	bhi.n	80054fe <__multiply+0x9e>
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	dd03      	ble.n	80054f0 <__multiply+0x90>
 80054e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d05a      	beq.n	80055a6 <__multiply+0x146>
 80054f0:	6106      	str	r6, [r0, #16]
 80054f2:	b005      	add	sp, #20
 80054f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f8:	f843 2b04 	str.w	r2, [r3], #4
 80054fc:	e7d8      	b.n	80054b0 <__multiply+0x50>
 80054fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8005502:	f1ba 0f00 	cmp.w	sl, #0
 8005506:	d024      	beq.n	8005552 <__multiply+0xf2>
 8005508:	f104 0e14 	add.w	lr, r4, #20
 800550c:	46a9      	mov	r9, r5
 800550e:	f04f 0c00 	mov.w	ip, #0
 8005512:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005516:	f8d9 1000 	ldr.w	r1, [r9]
 800551a:	fa1f fb82 	uxth.w	fp, r2
 800551e:	b289      	uxth	r1, r1
 8005520:	fb0a 110b 	mla	r1, sl, fp, r1
 8005524:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005528:	f8d9 2000 	ldr.w	r2, [r9]
 800552c:	4461      	add	r1, ip
 800552e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005532:	fb0a c20b 	mla	r2, sl, fp, ip
 8005536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800553a:	b289      	uxth	r1, r1
 800553c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005540:	4577      	cmp	r7, lr
 8005542:	f849 1b04 	str.w	r1, [r9], #4
 8005546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800554a:	d8e2      	bhi.n	8005512 <__multiply+0xb2>
 800554c:	9a01      	ldr	r2, [sp, #4]
 800554e:	f845 c002 	str.w	ip, [r5, r2]
 8005552:	9a03      	ldr	r2, [sp, #12]
 8005554:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005558:	3304      	adds	r3, #4
 800555a:	f1b9 0f00 	cmp.w	r9, #0
 800555e:	d020      	beq.n	80055a2 <__multiply+0x142>
 8005560:	6829      	ldr	r1, [r5, #0]
 8005562:	f104 0c14 	add.w	ip, r4, #20
 8005566:	46ae      	mov	lr, r5
 8005568:	f04f 0a00 	mov.w	sl, #0
 800556c:	f8bc b000 	ldrh.w	fp, [ip]
 8005570:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005574:	fb09 220b 	mla	r2, r9, fp, r2
 8005578:	4492      	add	sl, r2
 800557a:	b289      	uxth	r1, r1
 800557c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005580:	f84e 1b04 	str.w	r1, [lr], #4
 8005584:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005588:	f8be 1000 	ldrh.w	r1, [lr]
 800558c:	0c12      	lsrs	r2, r2, #16
 800558e:	fb09 1102 	mla	r1, r9, r2, r1
 8005592:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005596:	4567      	cmp	r7, ip
 8005598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800559c:	d8e6      	bhi.n	800556c <__multiply+0x10c>
 800559e:	9a01      	ldr	r2, [sp, #4]
 80055a0:	50a9      	str	r1, [r5, r2]
 80055a2:	3504      	adds	r5, #4
 80055a4:	e79a      	b.n	80054dc <__multiply+0x7c>
 80055a6:	3e01      	subs	r6, #1
 80055a8:	e79c      	b.n	80054e4 <__multiply+0x84>
 80055aa:	bf00      	nop
 80055ac:	0800635f 	.word	0x0800635f
 80055b0:	080063d0 	.word	0x080063d0

080055b4 <__pow5mult>:
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	4615      	mov	r5, r2
 80055ba:	f012 0203 	ands.w	r2, r2, #3
 80055be:	4606      	mov	r6, r0
 80055c0:	460f      	mov	r7, r1
 80055c2:	d007      	beq.n	80055d4 <__pow5mult+0x20>
 80055c4:	4c25      	ldr	r4, [pc, #148]	; (800565c <__pow5mult+0xa8>)
 80055c6:	3a01      	subs	r2, #1
 80055c8:	2300      	movs	r3, #0
 80055ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055ce:	f7ff fe9b 	bl	8005308 <__multadd>
 80055d2:	4607      	mov	r7, r0
 80055d4:	10ad      	asrs	r5, r5, #2
 80055d6:	d03d      	beq.n	8005654 <__pow5mult+0xa0>
 80055d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80055da:	b97c      	cbnz	r4, 80055fc <__pow5mult+0x48>
 80055dc:	2010      	movs	r0, #16
 80055de:	f7ff fe29 	bl	8005234 <malloc>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6270      	str	r0, [r6, #36]	; 0x24
 80055e6:	b928      	cbnz	r0, 80055f4 <__pow5mult+0x40>
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <__pow5mult+0xac>)
 80055ea:	481e      	ldr	r0, [pc, #120]	; (8005664 <__pow5mult+0xb0>)
 80055ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80055f0:	f000 fcaa 	bl	8005f48 <__assert_func>
 80055f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055f8:	6004      	str	r4, [r0, #0]
 80055fa:	60c4      	str	r4, [r0, #12]
 80055fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005604:	b94c      	cbnz	r4, 800561a <__pow5mult+0x66>
 8005606:	f240 2171 	movw	r1, #625	; 0x271
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff ff12 	bl	8005434 <__i2b>
 8005610:	2300      	movs	r3, #0
 8005612:	f8c8 0008 	str.w	r0, [r8, #8]
 8005616:	4604      	mov	r4, r0
 8005618:	6003      	str	r3, [r0, #0]
 800561a:	f04f 0900 	mov.w	r9, #0
 800561e:	07eb      	lsls	r3, r5, #31
 8005620:	d50a      	bpl.n	8005638 <__pow5mult+0x84>
 8005622:	4639      	mov	r1, r7
 8005624:	4622      	mov	r2, r4
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ff1a 	bl	8005460 <__multiply>
 800562c:	4639      	mov	r1, r7
 800562e:	4680      	mov	r8, r0
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff fe47 	bl	80052c4 <_Bfree>
 8005636:	4647      	mov	r7, r8
 8005638:	106d      	asrs	r5, r5, #1
 800563a:	d00b      	beq.n	8005654 <__pow5mult+0xa0>
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	b938      	cbnz	r0, 8005650 <__pow5mult+0x9c>
 8005640:	4622      	mov	r2, r4
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	f7ff ff0b 	bl	8005460 <__multiply>
 800564a:	6020      	str	r0, [r4, #0]
 800564c:	f8c0 9000 	str.w	r9, [r0]
 8005650:	4604      	mov	r4, r0
 8005652:	e7e4      	b.n	800561e <__pow5mult+0x6a>
 8005654:	4638      	mov	r0, r7
 8005656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800565a:	bf00      	nop
 800565c:	08006520 	.word	0x08006520
 8005660:	080062ed 	.word	0x080062ed
 8005664:	080063d0 	.word	0x080063d0

08005668 <__lshift>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	460c      	mov	r4, r1
 800566e:	6849      	ldr	r1, [r1, #4]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	4607      	mov	r7, r0
 800567a:	4691      	mov	r9, r2
 800567c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005680:	f108 0601 	add.w	r6, r8, #1
 8005684:	42b3      	cmp	r3, r6
 8005686:	db0b      	blt.n	80056a0 <__lshift+0x38>
 8005688:	4638      	mov	r0, r7
 800568a:	f7ff fddb 	bl	8005244 <_Balloc>
 800568e:	4605      	mov	r5, r0
 8005690:	b948      	cbnz	r0, 80056a6 <__lshift+0x3e>
 8005692:	4602      	mov	r2, r0
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <__lshift+0xd8>)
 8005696:	482b      	ldr	r0, [pc, #172]	; (8005744 <__lshift+0xdc>)
 8005698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800569c:	f000 fc54 	bl	8005f48 <__assert_func>
 80056a0:	3101      	adds	r1, #1
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	e7ee      	b.n	8005684 <__lshift+0x1c>
 80056a6:	2300      	movs	r3, #0
 80056a8:	f100 0114 	add.w	r1, r0, #20
 80056ac:	f100 0210 	add.w	r2, r0, #16
 80056b0:	4618      	mov	r0, r3
 80056b2:	4553      	cmp	r3, sl
 80056b4:	db37      	blt.n	8005726 <__lshift+0xbe>
 80056b6:	6920      	ldr	r0, [r4, #16]
 80056b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056bc:	f104 0314 	add.w	r3, r4, #20
 80056c0:	f019 091f 	ands.w	r9, r9, #31
 80056c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80056cc:	d02f      	beq.n	800572e <__lshift+0xc6>
 80056ce:	f1c9 0e20 	rsb	lr, r9, #32
 80056d2:	468a      	mov	sl, r1
 80056d4:	f04f 0c00 	mov.w	ip, #0
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	fa02 f209 	lsl.w	r2, r2, r9
 80056de:	ea42 020c 	orr.w	r2, r2, ip
 80056e2:	f84a 2b04 	str.w	r2, [sl], #4
 80056e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ea:	4298      	cmp	r0, r3
 80056ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80056f0:	d8f2      	bhi.n	80056d8 <__lshift+0x70>
 80056f2:	1b03      	subs	r3, r0, r4
 80056f4:	3b15      	subs	r3, #21
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	3304      	adds	r3, #4
 80056fc:	f104 0215 	add.w	r2, r4, #21
 8005700:	4290      	cmp	r0, r2
 8005702:	bf38      	it	cc
 8005704:	2304      	movcc	r3, #4
 8005706:	f841 c003 	str.w	ip, [r1, r3]
 800570a:	f1bc 0f00 	cmp.w	ip, #0
 800570e:	d001      	beq.n	8005714 <__lshift+0xac>
 8005710:	f108 0602 	add.w	r6, r8, #2
 8005714:	3e01      	subs	r6, #1
 8005716:	4638      	mov	r0, r7
 8005718:	612e      	str	r6, [r5, #16]
 800571a:	4621      	mov	r1, r4
 800571c:	f7ff fdd2 	bl	80052c4 <_Bfree>
 8005720:	4628      	mov	r0, r5
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	f842 0f04 	str.w	r0, [r2, #4]!
 800572a:	3301      	adds	r3, #1
 800572c:	e7c1      	b.n	80056b2 <__lshift+0x4a>
 800572e:	3904      	subs	r1, #4
 8005730:	f853 2b04 	ldr.w	r2, [r3], #4
 8005734:	f841 2f04 	str.w	r2, [r1, #4]!
 8005738:	4298      	cmp	r0, r3
 800573a:	d8f9      	bhi.n	8005730 <__lshift+0xc8>
 800573c:	e7ea      	b.n	8005714 <__lshift+0xac>
 800573e:	bf00      	nop
 8005740:	0800635f 	.word	0x0800635f
 8005744:	080063d0 	.word	0x080063d0

08005748 <__mcmp>:
 8005748:	b530      	push	{r4, r5, lr}
 800574a:	6902      	ldr	r2, [r0, #16]
 800574c:	690c      	ldr	r4, [r1, #16]
 800574e:	1b12      	subs	r2, r2, r4
 8005750:	d10e      	bne.n	8005770 <__mcmp+0x28>
 8005752:	f100 0314 	add.w	r3, r0, #20
 8005756:	3114      	adds	r1, #20
 8005758:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800575c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005760:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005764:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005768:	42a5      	cmp	r5, r4
 800576a:	d003      	beq.n	8005774 <__mcmp+0x2c>
 800576c:	d305      	bcc.n	800577a <__mcmp+0x32>
 800576e:	2201      	movs	r2, #1
 8005770:	4610      	mov	r0, r2
 8005772:	bd30      	pop	{r4, r5, pc}
 8005774:	4283      	cmp	r3, r0
 8005776:	d3f3      	bcc.n	8005760 <__mcmp+0x18>
 8005778:	e7fa      	b.n	8005770 <__mcmp+0x28>
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	e7f7      	b.n	8005770 <__mcmp+0x28>

08005780 <__mdiff>:
 8005780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	460c      	mov	r4, r1
 8005786:	4606      	mov	r6, r0
 8005788:	4611      	mov	r1, r2
 800578a:	4620      	mov	r0, r4
 800578c:	4690      	mov	r8, r2
 800578e:	f7ff ffdb 	bl	8005748 <__mcmp>
 8005792:	1e05      	subs	r5, r0, #0
 8005794:	d110      	bne.n	80057b8 <__mdiff+0x38>
 8005796:	4629      	mov	r1, r5
 8005798:	4630      	mov	r0, r6
 800579a:	f7ff fd53 	bl	8005244 <_Balloc>
 800579e:	b930      	cbnz	r0, 80057ae <__mdiff+0x2e>
 80057a0:	4b3a      	ldr	r3, [pc, #232]	; (800588c <__mdiff+0x10c>)
 80057a2:	4602      	mov	r2, r0
 80057a4:	f240 2132 	movw	r1, #562	; 0x232
 80057a8:	4839      	ldr	r0, [pc, #228]	; (8005890 <__mdiff+0x110>)
 80057aa:	f000 fbcd 	bl	8005f48 <__assert_func>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	bfa4      	itt	ge
 80057ba:	4643      	movge	r3, r8
 80057bc:	46a0      	movge	r8, r4
 80057be:	4630      	mov	r0, r6
 80057c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057c4:	bfa6      	itte	ge
 80057c6:	461c      	movge	r4, r3
 80057c8:	2500      	movge	r5, #0
 80057ca:	2501      	movlt	r5, #1
 80057cc:	f7ff fd3a 	bl	8005244 <_Balloc>
 80057d0:	b920      	cbnz	r0, 80057dc <__mdiff+0x5c>
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <__mdiff+0x10c>)
 80057d4:	4602      	mov	r2, r0
 80057d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80057da:	e7e5      	b.n	80057a8 <__mdiff+0x28>
 80057dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80057e0:	6926      	ldr	r6, [r4, #16]
 80057e2:	60c5      	str	r5, [r0, #12]
 80057e4:	f104 0914 	add.w	r9, r4, #20
 80057e8:	f108 0514 	add.w	r5, r8, #20
 80057ec:	f100 0e14 	add.w	lr, r0, #20
 80057f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80057f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80057f8:	f108 0210 	add.w	r2, r8, #16
 80057fc:	46f2      	mov	sl, lr
 80057fe:	2100      	movs	r1, #0
 8005800:	f859 3b04 	ldr.w	r3, [r9], #4
 8005804:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005808:	fa1f f883 	uxth.w	r8, r3
 800580c:	fa11 f18b 	uxtah	r1, r1, fp
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	eba1 0808 	sub.w	r8, r1, r8
 8005816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800581a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800581e:	fa1f f888 	uxth.w	r8, r8
 8005822:	1419      	asrs	r1, r3, #16
 8005824:	454e      	cmp	r6, r9
 8005826:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800582a:	f84a 3b04 	str.w	r3, [sl], #4
 800582e:	d8e7      	bhi.n	8005800 <__mdiff+0x80>
 8005830:	1b33      	subs	r3, r6, r4
 8005832:	3b15      	subs	r3, #21
 8005834:	f023 0303 	bic.w	r3, r3, #3
 8005838:	3304      	adds	r3, #4
 800583a:	3415      	adds	r4, #21
 800583c:	42a6      	cmp	r6, r4
 800583e:	bf38      	it	cc
 8005840:	2304      	movcc	r3, #4
 8005842:	441d      	add	r5, r3
 8005844:	4473      	add	r3, lr
 8005846:	469e      	mov	lr, r3
 8005848:	462e      	mov	r6, r5
 800584a:	4566      	cmp	r6, ip
 800584c:	d30e      	bcc.n	800586c <__mdiff+0xec>
 800584e:	f10c 0203 	add.w	r2, ip, #3
 8005852:	1b52      	subs	r2, r2, r5
 8005854:	f022 0203 	bic.w	r2, r2, #3
 8005858:	3d03      	subs	r5, #3
 800585a:	45ac      	cmp	ip, r5
 800585c:	bf38      	it	cc
 800585e:	2200      	movcc	r2, #0
 8005860:	441a      	add	r2, r3
 8005862:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005866:	b17b      	cbz	r3, 8005888 <__mdiff+0x108>
 8005868:	6107      	str	r7, [r0, #16]
 800586a:	e7a3      	b.n	80057b4 <__mdiff+0x34>
 800586c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005870:	fa11 f288 	uxtah	r2, r1, r8
 8005874:	1414      	asrs	r4, r2, #16
 8005876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800587a:	b292      	uxth	r2, r2
 800587c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005880:	f84e 2b04 	str.w	r2, [lr], #4
 8005884:	1421      	asrs	r1, r4, #16
 8005886:	e7e0      	b.n	800584a <__mdiff+0xca>
 8005888:	3f01      	subs	r7, #1
 800588a:	e7ea      	b.n	8005862 <__mdiff+0xe2>
 800588c:	0800635f 	.word	0x0800635f
 8005890:	080063d0 	.word	0x080063d0

08005894 <__d2b>:
 8005894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005898:	4689      	mov	r9, r1
 800589a:	2101      	movs	r1, #1
 800589c:	ec57 6b10 	vmov	r6, r7, d0
 80058a0:	4690      	mov	r8, r2
 80058a2:	f7ff fccf 	bl	8005244 <_Balloc>
 80058a6:	4604      	mov	r4, r0
 80058a8:	b930      	cbnz	r0, 80058b8 <__d2b+0x24>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <__d2b+0xb0>)
 80058ae:	4826      	ldr	r0, [pc, #152]	; (8005948 <__d2b+0xb4>)
 80058b0:	f240 310a 	movw	r1, #778	; 0x30a
 80058b4:	f000 fb48 	bl	8005f48 <__assert_func>
 80058b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80058bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058c0:	bb35      	cbnz	r5, 8005910 <__d2b+0x7c>
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	d028      	beq.n	800591a <__d2b+0x86>
 80058c8:	4668      	mov	r0, sp
 80058ca:	9600      	str	r6, [sp, #0]
 80058cc:	f7ff fd82 	bl	80053d4 <__lo0bits>
 80058d0:	9900      	ldr	r1, [sp, #0]
 80058d2:	b300      	cbz	r0, 8005916 <__d2b+0x82>
 80058d4:	9a01      	ldr	r2, [sp, #4]
 80058d6:	f1c0 0320 	rsb	r3, r0, #32
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	430b      	orrs	r3, r1
 80058e0:	40c2      	lsrs	r2, r0
 80058e2:	6163      	str	r3, [r4, #20]
 80058e4:	9201      	str	r2, [sp, #4]
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	61a3      	str	r3, [r4, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf14      	ite	ne
 80058ee:	2202      	movne	r2, #2
 80058f0:	2201      	moveq	r2, #1
 80058f2:	6122      	str	r2, [r4, #16]
 80058f4:	b1d5      	cbz	r5, 800592c <__d2b+0x98>
 80058f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80058fa:	4405      	add	r5, r0
 80058fc:	f8c9 5000 	str.w	r5, [r9]
 8005900:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005904:	f8c8 0000 	str.w	r0, [r8]
 8005908:	4620      	mov	r0, r4
 800590a:	b003      	add	sp, #12
 800590c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005914:	e7d5      	b.n	80058c2 <__d2b+0x2e>
 8005916:	6161      	str	r1, [r4, #20]
 8005918:	e7e5      	b.n	80058e6 <__d2b+0x52>
 800591a:	a801      	add	r0, sp, #4
 800591c:	f7ff fd5a 	bl	80053d4 <__lo0bits>
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	6163      	str	r3, [r4, #20]
 8005924:	2201      	movs	r2, #1
 8005926:	6122      	str	r2, [r4, #16]
 8005928:	3020      	adds	r0, #32
 800592a:	e7e3      	b.n	80058f4 <__d2b+0x60>
 800592c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005930:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005934:	f8c9 0000 	str.w	r0, [r9]
 8005938:	6918      	ldr	r0, [r3, #16]
 800593a:	f7ff fd2b 	bl	8005394 <__hi0bits>
 800593e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005942:	e7df      	b.n	8005904 <__d2b+0x70>
 8005944:	0800635f 	.word	0x0800635f
 8005948:	080063d0 	.word	0x080063d0

0800594c <_calloc_r>:
 800594c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800594e:	fba1 2402 	umull	r2, r4, r1, r2
 8005952:	b94c      	cbnz	r4, 8005968 <_calloc_r+0x1c>
 8005954:	4611      	mov	r1, r2
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	f000 f87a 	bl	8005a50 <_malloc_r>
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	4605      	mov	r5, r0
 8005960:	b930      	cbnz	r0, 8005970 <_calloc_r+0x24>
 8005962:	4628      	mov	r0, r5
 8005964:	b003      	add	sp, #12
 8005966:	bd30      	pop	{r4, r5, pc}
 8005968:	220c      	movs	r2, #12
 800596a:	6002      	str	r2, [r0, #0]
 800596c:	2500      	movs	r5, #0
 800596e:	e7f8      	b.n	8005962 <_calloc_r+0x16>
 8005970:	4621      	mov	r1, r4
 8005972:	f7fd fdeb 	bl	800354c <memset>
 8005976:	e7f4      	b.n	8005962 <_calloc_r+0x16>

08005978 <_free_r>:
 8005978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800597a:	2900      	cmp	r1, #0
 800597c:	d044      	beq.n	8005a08 <_free_r+0x90>
 800597e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005982:	9001      	str	r0, [sp, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f1a1 0404 	sub.w	r4, r1, #4
 800598a:	bfb8      	it	lt
 800598c:	18e4      	addlt	r4, r4, r3
 800598e:	f000 fb61 	bl	8006054 <__malloc_lock>
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <_free_r+0x94>)
 8005994:	9801      	ldr	r0, [sp, #4]
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	b933      	cbnz	r3, 80059a8 <_free_r+0x30>
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6014      	str	r4, [r2, #0]
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a4:	f000 bb5c 	b.w	8006060 <__malloc_unlock>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d908      	bls.n	80059be <_free_r+0x46>
 80059ac:	6825      	ldr	r5, [r4, #0]
 80059ae:	1961      	adds	r1, r4, r5
 80059b0:	428b      	cmp	r3, r1
 80059b2:	bf01      	itttt	eq
 80059b4:	6819      	ldreq	r1, [r3, #0]
 80059b6:	685b      	ldreq	r3, [r3, #4]
 80059b8:	1949      	addeq	r1, r1, r5
 80059ba:	6021      	streq	r1, [r4, #0]
 80059bc:	e7ed      	b.n	800599a <_free_r+0x22>
 80059be:	461a      	mov	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b10b      	cbz	r3, 80059c8 <_free_r+0x50>
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d9fa      	bls.n	80059be <_free_r+0x46>
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	1855      	adds	r5, r2, r1
 80059cc:	42a5      	cmp	r5, r4
 80059ce:	d10b      	bne.n	80059e8 <_free_r+0x70>
 80059d0:	6824      	ldr	r4, [r4, #0]
 80059d2:	4421      	add	r1, r4
 80059d4:	1854      	adds	r4, r2, r1
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	d1e0      	bne.n	800599e <_free_r+0x26>
 80059dc:	681c      	ldr	r4, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	6053      	str	r3, [r2, #4]
 80059e2:	4421      	add	r1, r4
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	e7da      	b.n	800599e <_free_r+0x26>
 80059e8:	d902      	bls.n	80059f0 <_free_r+0x78>
 80059ea:	230c      	movs	r3, #12
 80059ec:	6003      	str	r3, [r0, #0]
 80059ee:	e7d6      	b.n	800599e <_free_r+0x26>
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf04      	itt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	bf04      	itt	eq
 8005a00:	1949      	addeq	r1, r1, r5
 8005a02:	6021      	streq	r1, [r4, #0]
 8005a04:	6054      	str	r4, [r2, #4]
 8005a06:	e7ca      	b.n	800599e <_free_r+0x26>
 8005a08:	b003      	add	sp, #12
 8005a0a:	bd30      	pop	{r4, r5, pc}
 8005a0c:	20000488 	.word	0x20000488

08005a10 <sbrk_aligned>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4e0e      	ldr	r6, [pc, #56]	; (8005a4c <sbrk_aligned+0x3c>)
 8005a14:	460c      	mov	r4, r1
 8005a16:	6831      	ldr	r1, [r6, #0]
 8005a18:	4605      	mov	r5, r0
 8005a1a:	b911      	cbnz	r1, 8005a22 <sbrk_aligned+0x12>
 8005a1c:	f000 fa2e 	bl	8005e7c <_sbrk_r>
 8005a20:	6030      	str	r0, [r6, #0]
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 fa29 	bl	8005e7c <_sbrk_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d00a      	beq.n	8005a44 <sbrk_aligned+0x34>
 8005a2e:	1cc4      	adds	r4, r0, #3
 8005a30:	f024 0403 	bic.w	r4, r4, #3
 8005a34:	42a0      	cmp	r0, r4
 8005a36:	d007      	beq.n	8005a48 <sbrk_aligned+0x38>
 8005a38:	1a21      	subs	r1, r4, r0
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 fa1e 	bl	8005e7c <_sbrk_r>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d101      	bne.n	8005a48 <sbrk_aligned+0x38>
 8005a44:	f04f 34ff 	mov.w	r4, #4294967295
 8005a48:	4620      	mov	r0, r4
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	2000048c 	.word	0x2000048c

08005a50 <_malloc_r>:
 8005a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a54:	1ccd      	adds	r5, r1, #3
 8005a56:	f025 0503 	bic.w	r5, r5, #3
 8005a5a:	3508      	adds	r5, #8
 8005a5c:	2d0c      	cmp	r5, #12
 8005a5e:	bf38      	it	cc
 8005a60:	250c      	movcc	r5, #12
 8005a62:	2d00      	cmp	r5, #0
 8005a64:	4607      	mov	r7, r0
 8005a66:	db01      	blt.n	8005a6c <_malloc_r+0x1c>
 8005a68:	42a9      	cmp	r1, r5
 8005a6a:	d905      	bls.n	8005a78 <_malloc_r+0x28>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	2600      	movs	r6, #0
 8005a72:	4630      	mov	r0, r6
 8005a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a78:	4e2e      	ldr	r6, [pc, #184]	; (8005b34 <_malloc_r+0xe4>)
 8005a7a:	f000 faeb 	bl	8006054 <__malloc_lock>
 8005a7e:	6833      	ldr	r3, [r6, #0]
 8005a80:	461c      	mov	r4, r3
 8005a82:	bb34      	cbnz	r4, 8005ad2 <_malloc_r+0x82>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4638      	mov	r0, r7
 8005a88:	f7ff ffc2 	bl	8005a10 <sbrk_aligned>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	4604      	mov	r4, r0
 8005a90:	d14d      	bne.n	8005b2e <_malloc_r+0xde>
 8005a92:	6834      	ldr	r4, [r6, #0]
 8005a94:	4626      	mov	r6, r4
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d140      	bne.n	8005b1c <_malloc_r+0xcc>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	eb04 0803 	add.w	r8, r4, r3
 8005aa4:	f000 f9ea 	bl	8005e7c <_sbrk_r>
 8005aa8:	4580      	cmp	r8, r0
 8005aaa:	d13a      	bne.n	8005b22 <_malloc_r+0xd2>
 8005aac:	6821      	ldr	r1, [r4, #0]
 8005aae:	3503      	adds	r5, #3
 8005ab0:	1a6d      	subs	r5, r5, r1
 8005ab2:	f025 0503 	bic.w	r5, r5, #3
 8005ab6:	3508      	adds	r5, #8
 8005ab8:	2d0c      	cmp	r5, #12
 8005aba:	bf38      	it	cc
 8005abc:	250c      	movcc	r5, #12
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ffa5 	bl	8005a10 <sbrk_aligned>
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d02b      	beq.n	8005b22 <_malloc_r+0xd2>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	442b      	add	r3, r5
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	e00e      	b.n	8005af0 <_malloc_r+0xa0>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	1b52      	subs	r2, r2, r5
 8005ad6:	d41e      	bmi.n	8005b16 <_malloc_r+0xc6>
 8005ad8:	2a0b      	cmp	r2, #11
 8005ada:	d916      	bls.n	8005b0a <_malloc_r+0xba>
 8005adc:	1961      	adds	r1, r4, r5
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	6025      	str	r5, [r4, #0]
 8005ae2:	bf18      	it	ne
 8005ae4:	6059      	strne	r1, [r3, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	bf08      	it	eq
 8005aea:	6031      	streq	r1, [r6, #0]
 8005aec:	5162      	str	r2, [r4, r5]
 8005aee:	604b      	str	r3, [r1, #4]
 8005af0:	4638      	mov	r0, r7
 8005af2:	f104 060b 	add.w	r6, r4, #11
 8005af6:	f000 fab3 	bl	8006060 <__malloc_unlock>
 8005afa:	f026 0607 	bic.w	r6, r6, #7
 8005afe:	1d23      	adds	r3, r4, #4
 8005b00:	1af2      	subs	r2, r6, r3
 8005b02:	d0b6      	beq.n	8005a72 <_malloc_r+0x22>
 8005b04:	1b9b      	subs	r3, r3, r6
 8005b06:	50a3      	str	r3, [r4, r2]
 8005b08:	e7b3      	b.n	8005a72 <_malloc_r+0x22>
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	bf0c      	ite	eq
 8005b10:	6032      	streq	r2, [r6, #0]
 8005b12:	605a      	strne	r2, [r3, #4]
 8005b14:	e7ec      	b.n	8005af0 <_malloc_r+0xa0>
 8005b16:	4623      	mov	r3, r4
 8005b18:	6864      	ldr	r4, [r4, #4]
 8005b1a:	e7b2      	b.n	8005a82 <_malloc_r+0x32>
 8005b1c:	4634      	mov	r4, r6
 8005b1e:	6876      	ldr	r6, [r6, #4]
 8005b20:	e7b9      	b.n	8005a96 <_malloc_r+0x46>
 8005b22:	230c      	movs	r3, #12
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4638      	mov	r0, r7
 8005b28:	f000 fa9a 	bl	8006060 <__malloc_unlock>
 8005b2c:	e7a1      	b.n	8005a72 <_malloc_r+0x22>
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	e7de      	b.n	8005af0 <_malloc_r+0xa0>
 8005b32:	bf00      	nop
 8005b34:	20000488 	.word	0x20000488

08005b38 <__sfputc_r>:
 8005b38:	6893      	ldr	r3, [r2, #8]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	b410      	push	{r4}
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	da08      	bge.n	8005b56 <__sfputc_r+0x1e>
 8005b44:	6994      	ldr	r4, [r2, #24]
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	db01      	blt.n	8005b4e <__sfputc_r+0x16>
 8005b4a:	290a      	cmp	r1, #10
 8005b4c:	d103      	bne.n	8005b56 <__sfputc_r+0x1e>
 8005b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b52:	f7fe ba11 	b.w	8003f78 <__swbuf_r>
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	1c58      	adds	r0, r3, #1
 8005b5a:	6010      	str	r0, [r2, #0]
 8005b5c:	7019      	strb	r1, [r3, #0]
 8005b5e:	4608      	mov	r0, r1
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <__sfputs_r>:
 8005b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	18d5      	adds	r5, r2, r3
 8005b70:	42ac      	cmp	r4, r5
 8005b72:	d101      	bne.n	8005b78 <__sfputs_r+0x12>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e007      	b.n	8005b88 <__sfputs_r+0x22>
 8005b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7c:	463a      	mov	r2, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ffda 	bl	8005b38 <__sfputc_r>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d1f3      	bne.n	8005b70 <__sfputs_r+0xa>
 8005b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b8c <_vfiprintf_r>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	460d      	mov	r5, r1
 8005b92:	b09d      	sub	sp, #116	; 0x74
 8005b94:	4614      	mov	r4, r2
 8005b96:	4698      	mov	r8, r3
 8005b98:	4606      	mov	r6, r0
 8005b9a:	b118      	cbz	r0, 8005ba4 <_vfiprintf_r+0x18>
 8005b9c:	6983      	ldr	r3, [r0, #24]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x18>
 8005ba0:	f7ff fa3e 	bl	8005020 <__sinit>
 8005ba4:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <_vfiprintf_r+0x240>)
 8005ba6:	429d      	cmp	r5, r3
 8005ba8:	d11b      	bne.n	8005be2 <_vfiprintf_r+0x56>
 8005baa:	6875      	ldr	r5, [r6, #4]
 8005bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	d405      	bmi.n	8005bbe <_vfiprintf_r+0x32>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	059a      	lsls	r2, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_vfiprintf_r+0x32>
 8005bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bba:	f7ff fad4 	bl	8005166 <__retarget_lock_acquire_recursive>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	d501      	bpl.n	8005bc8 <_vfiprintf_r+0x3c>
 8005bc4:	692b      	ldr	r3, [r5, #16]
 8005bc6:	b9eb      	cbnz	r3, 8005c04 <_vfiprintf_r+0x78>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7fe fa26 	bl	800401c <__swsetup_r>
 8005bd0:	b1c0      	cbz	r0, 8005c04 <_vfiprintf_r+0x78>
 8005bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd4:	07dc      	lsls	r4, r3, #31
 8005bd6:	d50e      	bpl.n	8005bf6 <_vfiprintf_r+0x6a>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	b01d      	add	sp, #116	; 0x74
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	4b7b      	ldr	r3, [pc, #492]	; (8005dd0 <_vfiprintf_r+0x244>)
 8005be4:	429d      	cmp	r5, r3
 8005be6:	d101      	bne.n	8005bec <_vfiprintf_r+0x60>
 8005be8:	68b5      	ldr	r5, [r6, #8]
 8005bea:	e7df      	b.n	8005bac <_vfiprintf_r+0x20>
 8005bec:	4b79      	ldr	r3, [pc, #484]	; (8005dd4 <_vfiprintf_r+0x248>)
 8005bee:	429d      	cmp	r5, r3
 8005bf0:	bf08      	it	eq
 8005bf2:	68f5      	ldreq	r5, [r6, #12]
 8005bf4:	e7da      	b.n	8005bac <_vfiprintf_r+0x20>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	0598      	lsls	r0, r3, #22
 8005bfa:	d4ed      	bmi.n	8005bd8 <_vfiprintf_r+0x4c>
 8005bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bfe:	f7ff fab3 	bl	8005168 <__retarget_lock_release_recursive>
 8005c02:	e7e9      	b.n	8005bd8 <_vfiprintf_r+0x4c>
 8005c04:	2300      	movs	r3, #0
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c12:	2330      	movs	r3, #48	; 0x30
 8005c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005dd8 <_vfiprintf_r+0x24c>
 8005c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c1c:	f04f 0901 	mov.w	r9, #1
 8005c20:	4623      	mov	r3, r4
 8005c22:	469a      	mov	sl, r3
 8005c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c28:	b10a      	cbz	r2, 8005c2e <_vfiprintf_r+0xa2>
 8005c2a:	2a25      	cmp	r2, #37	; 0x25
 8005c2c:	d1f9      	bne.n	8005c22 <_vfiprintf_r+0x96>
 8005c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c32:	d00b      	beq.n	8005c4c <_vfiprintf_r+0xc0>
 8005c34:	465b      	mov	r3, fp
 8005c36:	4622      	mov	r2, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ff93 	bl	8005b66 <__sfputs_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	f000 80aa 	beq.w	8005d9a <_vfiprintf_r+0x20e>
 8005c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c48:	445a      	add	r2, fp
 8005c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a2 	beq.w	8005d9a <_vfiprintf_r+0x20e>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c60:	f10a 0a01 	add.w	sl, sl, #1
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	9307      	str	r3, [sp, #28]
 8005c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c6e:	4654      	mov	r4, sl
 8005c70:	2205      	movs	r2, #5
 8005c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c76:	4858      	ldr	r0, [pc, #352]	; (8005dd8 <_vfiprintf_r+0x24c>)
 8005c78:	f7fa faba 	bl	80001f0 <memchr>
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	b9d8      	cbnz	r0, 8005cb8 <_vfiprintf_r+0x12c>
 8005c80:	06d1      	lsls	r1, r2, #27
 8005c82:	bf44      	itt	mi
 8005c84:	2320      	movmi	r3, #32
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8a:	0713      	lsls	r3, r2, #28
 8005c8c:	bf44      	itt	mi
 8005c8e:	232b      	movmi	r3, #43	; 0x2b
 8005c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c94:	f89a 3000 	ldrb.w	r3, [sl]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d015      	beq.n	8005cc8 <_vfiprintf_r+0x13c>
 8005c9c:	9a07      	ldr	r2, [sp, #28]
 8005c9e:	4654      	mov	r4, sl
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f04f 0c0a 	mov.w	ip, #10
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cac:	3b30      	subs	r3, #48	; 0x30
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d94e      	bls.n	8005d50 <_vfiprintf_r+0x1c4>
 8005cb2:	b1b0      	cbz	r0, 8005ce2 <_vfiprintf_r+0x156>
 8005cb4:	9207      	str	r2, [sp, #28]
 8005cb6:	e014      	b.n	8005ce2 <_vfiprintf_r+0x156>
 8005cb8:	eba0 0308 	sub.w	r3, r0, r8
 8005cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	46a2      	mov	sl, r4
 8005cc6:	e7d2      	b.n	8005c6e <_vfiprintf_r+0xe2>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d19      	adds	r1, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9103      	str	r1, [sp, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfbb      	ittet	lt
 8005cd4:	425b      	neglt	r3, r3
 8005cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cda:	9307      	strge	r3, [sp, #28]
 8005cdc:	9307      	strlt	r3, [sp, #28]
 8005cde:	bfb8      	it	lt
 8005ce0:	9204      	strlt	r2, [sp, #16]
 8005ce2:	7823      	ldrb	r3, [r4, #0]
 8005ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce6:	d10c      	bne.n	8005d02 <_vfiprintf_r+0x176>
 8005ce8:	7863      	ldrb	r3, [r4, #1]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d135      	bne.n	8005d5a <_vfiprintf_r+0x1ce>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9203      	str	r2, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb8      	it	lt
 8005cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cfe:	3402      	adds	r4, #2
 8005d00:	9305      	str	r3, [sp, #20]
 8005d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005de8 <_vfiprintf_r+0x25c>
 8005d06:	7821      	ldrb	r1, [r4, #0]
 8005d08:	2203      	movs	r2, #3
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	f7fa fa70 	bl	80001f0 <memchr>
 8005d10:	b140      	cbz	r0, 8005d24 <_vfiprintf_r+0x198>
 8005d12:	2340      	movs	r3, #64	; 0x40
 8005d14:	eba0 000a 	sub.w	r0, r0, sl
 8005d18:	fa03 f000 	lsl.w	r0, r3, r0
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	4303      	orrs	r3, r0
 8005d20:	3401      	adds	r4, #1
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d28:	482c      	ldr	r0, [pc, #176]	; (8005ddc <_vfiprintf_r+0x250>)
 8005d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d2e:	2206      	movs	r2, #6
 8005d30:	f7fa fa5e 	bl	80001f0 <memchr>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d03f      	beq.n	8005db8 <_vfiprintf_r+0x22c>
 8005d38:	4b29      	ldr	r3, [pc, #164]	; (8005de0 <_vfiprintf_r+0x254>)
 8005d3a:	bb1b      	cbnz	r3, 8005d84 <_vfiprintf_r+0x1f8>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	3307      	adds	r3, #7
 8005d40:	f023 0307 	bic.w	r3, r3, #7
 8005d44:	3308      	adds	r3, #8
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	443b      	add	r3, r7
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	e767      	b.n	8005c20 <_vfiprintf_r+0x94>
 8005d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d54:	460c      	mov	r4, r1
 8005d56:	2001      	movs	r0, #1
 8005d58:	e7a5      	b.n	8005ca6 <_vfiprintf_r+0x11a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	3401      	adds	r4, #1
 8005d5e:	9305      	str	r3, [sp, #20]
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 0c0a 	mov.w	ip, #10
 8005d66:	4620      	mov	r0, r4
 8005d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6c:	3a30      	subs	r2, #48	; 0x30
 8005d6e:	2a09      	cmp	r2, #9
 8005d70:	d903      	bls.n	8005d7a <_vfiprintf_r+0x1ee>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c5      	beq.n	8005d02 <_vfiprintf_r+0x176>
 8005d76:	9105      	str	r1, [sp, #20]
 8005d78:	e7c3      	b.n	8005d02 <_vfiprintf_r+0x176>
 8005d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d7e:	4604      	mov	r4, r0
 8005d80:	2301      	movs	r3, #1
 8005d82:	e7f0      	b.n	8005d66 <_vfiprintf_r+0x1da>
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <_vfiprintf_r+0x258>)
 8005d8c:	a904      	add	r1, sp, #16
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f7fd fc84 	bl	800369c <_printf_float>
 8005d94:	4607      	mov	r7, r0
 8005d96:	1c78      	adds	r0, r7, #1
 8005d98:	d1d6      	bne.n	8005d48 <_vfiprintf_r+0x1bc>
 8005d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d9c:	07d9      	lsls	r1, r3, #31
 8005d9e:	d405      	bmi.n	8005dac <_vfiprintf_r+0x220>
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	059a      	lsls	r2, r3, #22
 8005da4:	d402      	bmi.n	8005dac <_vfiprintf_r+0x220>
 8005da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da8:	f7ff f9de 	bl	8005168 <__retarget_lock_release_recursive>
 8005dac:	89ab      	ldrh	r3, [r5, #12]
 8005dae:	065b      	lsls	r3, r3, #25
 8005db0:	f53f af12 	bmi.w	8005bd8 <_vfiprintf_r+0x4c>
 8005db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db6:	e711      	b.n	8005bdc <_vfiprintf_r+0x50>
 8005db8:	ab03      	add	r3, sp, #12
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <_vfiprintf_r+0x258>)
 8005dc0:	a904      	add	r1, sp, #16
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7fd ff0e 	bl	8003be4 <_printf_i>
 8005dc8:	e7e4      	b.n	8005d94 <_vfiprintf_r+0x208>
 8005dca:	bf00      	nop
 8005dcc:	08006390 	.word	0x08006390
 8005dd0:	080063b0 	.word	0x080063b0
 8005dd4:	08006370 	.word	0x08006370
 8005dd8:	0800652c 	.word	0x0800652c
 8005ddc:	08006536 	.word	0x08006536
 8005de0:	0800369d 	.word	0x0800369d
 8005de4:	08005b67 	.word	0x08005b67
 8005de8:	08006532 	.word	0x08006532

08005dec <_putc_r>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	460d      	mov	r5, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	4606      	mov	r6, r0
 8005df4:	b118      	cbz	r0, 8005dfe <_putc_r+0x12>
 8005df6:	6983      	ldr	r3, [r0, #24]
 8005df8:	b90b      	cbnz	r3, 8005dfe <_putc_r+0x12>
 8005dfa:	f7ff f911 	bl	8005020 <__sinit>
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <_putc_r+0x84>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	d124      	bne.n	8005e4e <_putc_r+0x62>
 8005e04:	6874      	ldr	r4, [r6, #4]
 8005e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e08:	07d8      	lsls	r0, r3, #31
 8005e0a:	d405      	bmi.n	8005e18 <_putc_r+0x2c>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	0599      	lsls	r1, r3, #22
 8005e10:	d402      	bmi.n	8005e18 <_putc_r+0x2c>
 8005e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e14:	f7ff f9a7 	bl	8005166 <__retarget_lock_acquire_recursive>
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	60a3      	str	r3, [r4, #8]
 8005e20:	da05      	bge.n	8005e2e <_putc_r+0x42>
 8005e22:	69a2      	ldr	r2, [r4, #24]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	db1c      	blt.n	8005e62 <_putc_r+0x76>
 8005e28:	b2eb      	uxtb	r3, r5
 8005e2a:	2b0a      	cmp	r3, #10
 8005e2c:	d019      	beq.n	8005e62 <_putc_r+0x76>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	701d      	strb	r5, [r3, #0]
 8005e36:	b2ed      	uxtb	r5, r5
 8005e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e3a:	07da      	lsls	r2, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_putc_r+0x5e>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	059b      	lsls	r3, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_putc_r+0x5e>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f7ff f98f 	bl	8005168 <__retarget_lock_release_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <_putc_r+0x88>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d101      	bne.n	8005e58 <_putc_r+0x6c>
 8005e54:	68b4      	ldr	r4, [r6, #8]
 8005e56:	e7d6      	b.n	8005e06 <_putc_r+0x1a>
 8005e58:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <_putc_r+0x8c>)
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	bf08      	it	eq
 8005e5e:	68f4      	ldreq	r4, [r6, #12]
 8005e60:	e7d1      	b.n	8005e06 <_putc_r+0x1a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4622      	mov	r2, r4
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7fe f886 	bl	8003f78 <__swbuf_r>
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	e7e3      	b.n	8005e38 <_putc_r+0x4c>
 8005e70:	08006390 	.word	0x08006390
 8005e74:	080063b0 	.word	0x080063b0
 8005e78:	08006370 	.word	0x08006370

08005e7c <_sbrk_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d06      	ldr	r5, [pc, #24]	; (8005e98 <_sbrk_r+0x1c>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	f7fb fdea 	bl	8001a60 <_sbrk>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_sbrk_r+0x1a>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_sbrk_r+0x1a>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20000490 	.word	0x20000490

08005e9c <__sread>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea4:	f000 f8e2 	bl	800606c <_read_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	bfab      	itete	ge
 8005eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eae:	89a3      	ldrhlt	r3, [r4, #12]
 8005eb0:	181b      	addge	r3, r3, r0
 8005eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eb6:	bfac      	ite	ge
 8005eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eba:	81a3      	strhlt	r3, [r4, #12]
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <__swrite>:
 8005ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	05db      	lsls	r3, r3, #23
 8005ec8:	4605      	mov	r5, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4616      	mov	r6, r2
 8005ece:	d505      	bpl.n	8005edc <__swrite+0x1e>
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f000 f898 	bl	800600c <_lseek_r>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	f000 b817 	b.w	8005f24 <_write_r>

08005ef6 <__sseek>:
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	460c      	mov	r4, r1
 8005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efe:	f000 f885 	bl	800600c <_lseek_r>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	bf15      	itete	ne
 8005f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f12:	81a3      	strheq	r3, [r4, #12]
 8005f14:	bf18      	it	ne
 8005f16:	81a3      	strhne	r3, [r4, #12]
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <__sclose>:
 8005f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1e:	f000 b831 	b.w	8005f84 <_close_r>
	...

08005f24 <_write_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_write_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fb fd7a 	bl	8001a2c <_write>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_write_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_write_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000490 	.word	0x20000490

08005f48 <__assert_func>:
 8005f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <__assert_func+0x2c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4605      	mov	r5, r0
 8005f54:	68d8      	ldr	r0, [r3, #12]
 8005f56:	b14c      	cbz	r4, 8005f6c <__assert_func+0x24>
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <__assert_func+0x30>)
 8005f5a:	9100      	str	r1, [sp, #0]
 8005f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f60:	4906      	ldr	r1, [pc, #24]	; (8005f7c <__assert_func+0x34>)
 8005f62:	462b      	mov	r3, r5
 8005f64:	f000 f81e 	bl	8005fa4 <fiprintf>
 8005f68:	f000 f89f 	bl	80060aa <abort>
 8005f6c:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <__assert_func+0x38>)
 8005f6e:	461c      	mov	r4, r3
 8005f70:	e7f3      	b.n	8005f5a <__assert_func+0x12>
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010
 8005f78:	0800653d 	.word	0x0800653d
 8005f7c:	0800654a 	.word	0x0800654a
 8005f80:	08006578 	.word	0x08006578

08005f84 <_close_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	; (8005fa0 <_close_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb fd5a 	bl	8001a48 <_close>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_close_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_close_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000490 	.word	0x20000490

08005fa4 <fiprintf>:
 8005fa4:	b40e      	push	{r1, r2, r3}
 8005fa6:	b503      	push	{r0, r1, lr}
 8005fa8:	4601      	mov	r1, r0
 8005faa:	ab03      	add	r3, sp, #12
 8005fac:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <fiprintf+0x20>)
 8005fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb2:	6800      	ldr	r0, [r0, #0]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	f7ff fde9 	bl	8005b8c <_vfiprintf_r>
 8005fba:	b002      	add	sp, #8
 8005fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc0:	b003      	add	sp, #12
 8005fc2:	4770      	bx	lr
 8005fc4:	20000010 	.word	0x20000010

08005fc8 <_fstat_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	; (8005fe8 <_fstat_r+0x20>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	f7fb fd3a 	bl	8001a4e <_fstat>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d102      	bne.n	8005fe4 <_fstat_r+0x1c>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	b103      	cbz	r3, 8005fe4 <_fstat_r+0x1c>
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000490 	.word	0x20000490

08005fec <_isatty_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d06      	ldr	r5, [pc, #24]	; (8006008 <_isatty_r+0x1c>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fb fd2e 	bl	8001a58 <_isatty>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_isatty_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_isatty_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20000490 	.word	0x20000490

0800600c <_lseek_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d07      	ldr	r5, [pc, #28]	; (800602c <_lseek_r+0x20>)
 8006010:	4604      	mov	r4, r0
 8006012:	4608      	mov	r0, r1
 8006014:	4611      	mov	r1, r2
 8006016:	2200      	movs	r2, #0
 8006018:	602a      	str	r2, [r5, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f7fb fd1e 	bl	8001a5c <_lseek>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_lseek_r+0x1e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_lseek_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20000490 	.word	0x20000490

08006030 <__ascii_mbtowc>:
 8006030:	b082      	sub	sp, #8
 8006032:	b901      	cbnz	r1, 8006036 <__ascii_mbtowc+0x6>
 8006034:	a901      	add	r1, sp, #4
 8006036:	b142      	cbz	r2, 800604a <__ascii_mbtowc+0x1a>
 8006038:	b14b      	cbz	r3, 800604e <__ascii_mbtowc+0x1e>
 800603a:	7813      	ldrb	r3, [r2, #0]
 800603c:	600b      	str	r3, [r1, #0]
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	1e10      	subs	r0, r2, #0
 8006042:	bf18      	it	ne
 8006044:	2001      	movne	r0, #1
 8006046:	b002      	add	sp, #8
 8006048:	4770      	bx	lr
 800604a:	4610      	mov	r0, r2
 800604c:	e7fb      	b.n	8006046 <__ascii_mbtowc+0x16>
 800604e:	f06f 0001 	mvn.w	r0, #1
 8006052:	e7f8      	b.n	8006046 <__ascii_mbtowc+0x16>

08006054 <__malloc_lock>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__malloc_lock+0x8>)
 8006056:	f7ff b886 	b.w	8005166 <__retarget_lock_acquire_recursive>
 800605a:	bf00      	nop
 800605c:	20000484 	.word	0x20000484

08006060 <__malloc_unlock>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__malloc_unlock+0x8>)
 8006062:	f7ff b881 	b.w	8005168 <__retarget_lock_release_recursive>
 8006066:	bf00      	nop
 8006068:	20000484 	.word	0x20000484

0800606c <_read_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	; (800608c <_read_r+0x20>)
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fb fcc6 	bl	8001a0c <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_read_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_read_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000490 	.word	0x20000490

08006090 <__ascii_wctomb>:
 8006090:	b149      	cbz	r1, 80060a6 <__ascii_wctomb+0x16>
 8006092:	2aff      	cmp	r2, #255	; 0xff
 8006094:	bf85      	ittet	hi
 8006096:	238a      	movhi	r3, #138	; 0x8a
 8006098:	6003      	strhi	r3, [r0, #0]
 800609a:	700a      	strbls	r2, [r1, #0]
 800609c:	f04f 30ff 	movhi.w	r0, #4294967295
 80060a0:	bf98      	it	ls
 80060a2:	2001      	movls	r0, #1
 80060a4:	4770      	bx	lr
 80060a6:	4608      	mov	r0, r1
 80060a8:	4770      	bx	lr

080060aa <abort>:
 80060aa:	b508      	push	{r3, lr}
 80060ac:	2006      	movs	r0, #6
 80060ae:	f000 f82b 	bl	8006108 <raise>
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fb fca4 	bl	8001a00 <_exit>

080060b8 <_raise_r>:
 80060b8:	291f      	cmp	r1, #31
 80060ba:	b538      	push	{r3, r4, r5, lr}
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	d904      	bls.n	80060cc <_raise_r+0x14>
 80060c2:	2316      	movs	r3, #22
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060ce:	b112      	cbz	r2, 80060d6 <_raise_r+0x1e>
 80060d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060d4:	b94b      	cbnz	r3, 80060ea <_raise_r+0x32>
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 f830 	bl	800613c <_getpid_r>
 80060dc:	462a      	mov	r2, r5
 80060de:	4601      	mov	r1, r0
 80060e0:	4620      	mov	r0, r4
 80060e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e6:	f000 b817 	b.w	8006118 <_kill_r>
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d00a      	beq.n	8006104 <_raise_r+0x4c>
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	d103      	bne.n	80060fa <_raise_r+0x42>
 80060f2:	2316      	movs	r3, #22
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	2001      	movs	r0, #1
 80060f8:	e7e7      	b.n	80060ca <_raise_r+0x12>
 80060fa:	2400      	movs	r4, #0
 80060fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006100:	4628      	mov	r0, r5
 8006102:	4798      	blx	r3
 8006104:	2000      	movs	r0, #0
 8006106:	e7e0      	b.n	80060ca <_raise_r+0x12>

08006108 <raise>:
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <raise+0xc>)
 800610a:	4601      	mov	r1, r0
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f7ff bfd3 	b.w	80060b8 <_raise_r>
 8006112:	bf00      	nop
 8006114:	20000010 	.word	0x20000010

08006118 <_kill_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_kill_r+0x20>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f7fb fc63 	bl	80019f0 <_kill>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d102      	bne.n	8006134 <_kill_r+0x1c>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b103      	cbz	r3, 8006134 <_kill_r+0x1c>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	bf00      	nop
 8006138:	20000490 	.word	0x20000490

0800613c <_getpid_r>:
 800613c:	f7fb bc56 	b.w	80019ec <_getpid>

08006140 <_init>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr

0800614c <_fini>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr
