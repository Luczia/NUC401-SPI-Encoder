
CubeMx_SPI_AS5048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006500  08006500  00016500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08006b00  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006b00  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe01  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002617  00000000  00000000  0003000d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013e7  00000000  00000000  00032624  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b18  00000000  00000000  00033a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a10  00000000  00000000  00034528  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a33d  00000000  00000000  00034f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009d67  00000000  00000000  0004f275  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00091f26  00000000  00000000  00058fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000eaf02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f8  00000000  00000000  000eaf80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064e4 	.word	0x080064e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080064e4 	.word	0x080064e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <_ZN8IcHausMuC1Eh>:
#include "IcHausMu.hpp"


// ############################### Constructors ###############################

IcHausMu::IcHausMu(const unsigned char hwRev)
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	4d14      	ldr	r5, [pc, #80]	; (8000fb0 <_ZN8IcHausMuC1Eh+0x58>)
 8000f60:	267f      	movs	r6, #127	; 0x7f
 8000f62:	4632      	mov	r2, r6
 8000f64:	4629      	mov	r1, r5
 8000f66:	3001      	adds	r0, #1
 8000f68:	f002 fede 	bl	8003d28 <memcpy>
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8000f72:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8000f76:	f002 fed7 	bl	8003d28 <memcpy>
//  : _address(0x00) // can be used to initialize as list method
{
    debugVal = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	7023      	strb	r3, [r4, #0]
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 8000f7e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 8000f82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    _address = 0x00;
 8000f86:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
    _hardRev = hwRev;
 8000f8a:	f884 7109 	strb.w	r7, [r4, #265]	; 0x109
    _csFct_ptr = NULL;
 8000f8e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    _streamFct_ptr = NULL;
 8000f92:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    _initStatus = RET_W_UNINIT;
 8000f96:	220a      	movs	r2, #10
 8000f98:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
    _sdadOutMsb = 0;
 8000f9c:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
    _sdadOutLsb = 0;
 8000fa0:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
    _sdadOutSize = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
}
 8000faa:	4620      	mov	r0, r4
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08006500 	.word	0x08006500

08000fb4 <_ZN8IcHausMu16csFunctionAttachEPFvbE>:
// ############################### Public Methods ###############################

// ---------------- low level functions ----------------

void IcHausMu::csFunctionAttach(void (*fct_ptr)(const bool)) {
    _csFct_ptr = fct_ptr;
 8000fb4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
}
 8000fb8:	4770      	bx	lr

08000fba <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>:

void IcHausMu::streamFunctionAttach(void (*fct_ptr)(unsigned char* const, unsigned char*, const unsigned int)) {
    _streamFct_ptr = fct_ptr;
 8000fba:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
}
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>:
}

unsigned char IcHausMu::icMuRegSize(const icMuRegister_t reg) {
    unsigned char tmpVal = 0;

    tmpVal = _icMuRegisterMask[reg];                    // this tab contains masks and register unions size (x), identified by 0x8x (x!=0, mask must be contiguous by definition)
 8000fc0:	4401      	add	r1, r0
 8000fc2:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
    if (0x80<tmpVal && 0x90>tmpVal) {tmpVal &= 0x0F;}   // the union size is returned.
 8000fc6:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b0e      	cmp	r3, #14
 8000fce:	d802      	bhi.n	8000fd6 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister+0x16>
 8000fd0:	f000 000f 	and.w	r0, r0, #15
 8000fd4:	4770      	bx	lr
    else {tmpVal = 1;}                                  // single register, size = 1
 8000fd6:	2001      	movs	r0, #1
    return tmpVal;
}
 8000fd8:	4770      	bx	lr

08000fda <_ZN8IcHausMu16getLastByteValueEv>:

unsigned char IcHausMu::getLastByteValue(void) {
    return _tmpBuff64.bytes_le.lsb;
}
 8000fda:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 8000fde:	4770      	bx	lr

08000fe0 <_ZN8IcHausMu19getLastUint_16ValueEv>:

uint16_u IcHausMu::getLastUint_16Value(void) {
    uint16_u tmp;
    tmp.bytes.msb = _tmpBuff64.bytes_le.byte1;
 8000fe0:	f890 2101 	ldrb.w	r2, [r0, #257]	; 0x101
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	f362 0307 	bfi	r3, r2, #0, #8
    tmp.bytes.lsb = _tmpBuff64.bytes_le.lsb;
 8000fec:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
 8000ff0:	f362 230f 	bfi	r3, r2, #8, #8
    return tmp;
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4770      	bx	lr

08000ff8 <_ZN8IcHausMu14_readRegStatusEv>:
    return retVal;
}

// ############################### Private Methods ###############################

fctStatus IcHausMu::_readRegStatus(void) {
 8000ff8:	b500      	push	{lr}
 8000ffa:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {STATUS_DATA, 0x00};
 8000ffc:	23ad      	movs	r3, #173	; 0xad
 8000ffe:	f88d 3004 	strb.w	r3, [sp, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	f88d 3005 	strb.w	r3, [sp, #5]

    // Do the transfert and get the STATUS register
    _streamFct_ptr((unsigned char*)&internalBuffer, (unsigned char*)&internalBuffer, 2);
 8001008:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800100c:	2202      	movs	r2, #2
 800100e:	a901      	add	r1, sp, #4
 8001010:	4608      	mov	r0, r1
 8001012:	4798      	blx	r3

    if (STATUS_DATA == internalBuffer[0]) {
 8001014:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001018:	2bad      	cmp	r3, #173	; 0xad
 800101a:	d10f      	bne.n	800103c <_ZN8IcHausMu14_readRegStatusEv+0x44>
       // Register is correctly addressed
       // Decode the status byte
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 800101c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001020:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001024:	d10e      	bne.n	8001044 <_ZN8IcHausMu14_readRegStatusEv+0x4c>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 8001026:	2b07      	cmp	r3, #7
 8001028:	d80e      	bhi.n	8001048 <_ZN8IcHausMu14_readRegStatusEv+0x50>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 800102a:	2b03      	cmp	r3, #3
 800102c:	d80e      	bhi.n	800104c <_ZN8IcHausMu14_readRegStatusEv+0x54>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 800102e:	2b01      	cmp	r3, #1
 8001030:	d80e      	bhi.n	8001050 <_ZN8IcHausMu14_readRegStatusEv+0x58>
       else if (0x00 == internalBuffer[1]) {retVal = RET_E_NOK;}
 8001032:	b90b      	cbnz	r3, 8001038 <_ZN8IcHausMu14_readRegStatusEv+0x40>
 8001034:	2001      	movs	r0, #1
 8001036:	e002      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>
    fctStatus retVal = RET_OK;
 8001038:	2000      	movs	r0, #0
 800103a:	e000      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else { /* data is valid. retVal=RET_OK */ }
    }
    else {
        retVal = RET_E_OPCODE;
 800103c:	2005      	movs	r0, #5
    }
    return retVal;
}
 800103e:	b003      	add	sp, #12
 8001040:	f85d fb04 	ldr.w	pc, [sp], #4
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 8001044:	2001      	movs	r0, #1
 8001046:	e7fa      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 8001048:	2004      	movs	r0, #4
 800104a:	e7f8      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 800104c:	2003      	movs	r0, #3
 800104e:	e7f6      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 8001050:	2002      	movs	r0, #2
 8001052:	e7f4      	b.n	800103e <_ZN8IcHausMu14_readRegStatusEv+0x46>

08001054 <_ZN8IcHausMu13_readRegisterEhjPh>:

fctStatus IcHausMu::_readRegister(const unsigned char registerToRead, const unsigned int bytesToRead, unsigned char* buffPtr) {
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 8001058:	2400      	movs	r4, #0
 800105a:	f8ad 4004 	strh.w	r4, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 800105e:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 8001062:	bb85      	cbnz	r5, 80010c6 <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
 8001064:	b37b      	cbz	r3, 80010c6 <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
 8001066:	461e      	mov	r6, r3
 8001068:	4617      	mov	r7, r2
 800106a:	460d      	mov	r5, r1
 800106c:	4604      	mov	r4, r0
        // select the device
        _csFct_ptr(true);
 800106e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001072:	2001      	movs	r0, #1
 8001074:	4798      	blx	r3

        // send the read command with the register address to read:
        internalBuffer[0] = READ_REG;
 8001076:	2397      	movs	r3, #151	; 0x97
 8001078:	f88d 3004 	strb.w	r3, [sp, #4]
        internalBuffer[1] = registerToRead;
 800107c:	f88d 5005 	strb.w	r5, [sp, #5]
        _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 8001080:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8001084:	2202      	movs	r2, #2
 8001086:	a901      	add	r1, sp, #4
 8001088:	4608      	mov	r0, r1
 800108a:	4798      	blx	r3
        // Check if the register read command has been sent as expected
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 800108c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001090:	2b97      	cmp	r3, #151	; 0x97
 8001092:	d01b      	beq.n	80010cc <_ZN8IcHausMu13_readRegisterEhjPh+0x78>
            retVal = RET_E_OPCODE;
 8001094:	2505      	movs	r5, #5
        }

        // unselect the device
        _csFct_ptr(false);
 8001096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800109a:	2000      	movs	r0, #0
 800109c:	4798      	blx	r3

        if (RET_OK == retVal) {
 800109e:	b995      	cbnz	r5, 80010c6 <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
            // select the device
            _csFct_ptr(true);
 80010a0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80010a4:	2001      	movs	r0, #1
 80010a6:	4798      	blx	r3

            retVal = _readRegStatus();    // same function is used to read status and data
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff ffa5 	bl	8000ff8 <_ZN8IcHausMu14_readRegStatusEv>
            if (RET_OK == retVal) {
 80010ae:	4605      	mov	r5, r0
 80010b0:	b928      	cbnz	r0, 80010be <_ZN8IcHausMu13_readRegisterEhjPh+0x6a>
                _streamFct_ptr(buffPtr, buffPtr, bytesToRead);
 80010b2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80010b6:	463a      	mov	r2, r7
 80010b8:	4631      	mov	r1, r6
 80010ba:	4630      	mov	r0, r6
 80010bc:	4798      	blx	r3
            }

            // unselect the device
            _csFct_ptr(false);
 80010be:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80010c2:	2000      	movs	r0, #0
 80010c4:	4798      	blx	r3
        retVal = _initStatus;
    }

    // return the function status:
    return retVal;
}
 80010c6:	4628      	mov	r0, r5
 80010c8:	b003      	add	sp, #12
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 80010cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d001      	beq.n	80010d8 <_ZN8IcHausMu13_readRegisterEhjPh+0x84>
            retVal = RET_E_OPCODE;
 80010d4:	2505      	movs	r5, #5
 80010d6:	e7de      	b.n	8001096 <_ZN8IcHausMu13_readRegisterEhjPh+0x42>
    fctStatus retVal = RET_OK;
 80010d8:	2500      	movs	r5, #0
 80010da:	e7dc      	b.n	8001096 <_ZN8IcHausMu13_readRegisterEhjPh+0x42>

080010dc <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::readIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	4606      	mov	r6, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	4617      	mov	r7, r2
    regSize = icMuRegSize(reg);
 80010e6:	f7ff ff6b 	bl	8000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 80010ea:	4605      	mov	r5, r0
    if (1 < regSize) {
 80010ec:	2801      	cmp	r0, #1
 80010ee:	d901      	bls.n	80010f4 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x18>
        tmpRegAddr = reg+1;
 80010f0:	3401      	adds	r4, #1
 80010f2:	b2e4      	uxtb	r4, r4
    retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 80010f4:	46a0      	mov	r8, r4
 80010f6:	1931      	adds	r1, r6, r4
 80010f8:	463b      	mov	r3, r7
 80010fa:	462a      	mov	r2, r5
 80010fc:	7849      	ldrb	r1, [r1, #1]
 80010fe:	4630      	mov	r0, r6
 8001100:	f7ff ffa8 	bl	8001054 <_ZN8IcHausMu13_readRegisterEhjPh>
    if (1 < regSize) {
 8001104:	2d01      	cmp	r5, #1
 8001106:	d908      	bls.n	800111a <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x3e>
        regSize--;
 8001108:	3d01      	subs	r5, #1
 800110a:	b2ed      	uxtb	r5, r5
        *(buffPtr->tab+regSize) &= _icMuRegisterMask[tmpRegAddr+regSize];
 800110c:	442c      	add	r4, r5
 800110e:	4434      	add	r4, r6
 8001110:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8001114:	5d7a      	ldrb	r2, [r7, r5]
 8001116:	4013      	ands	r3, r2
 8001118:	557b      	strb	r3, [r7, r5]
    *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 800111a:	4446      	add	r6, r8
 800111c:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
 8001120:	783a      	ldrb	r2, [r7, #0]
 8001122:	4013      	ands	r3, r2
 8001124:	703b      	strb	r3, [r7, #0]
}
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800112a <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>:
fctStatus IcHausMu::readIcMuRegister(const icMuRegister_t reg) {
 800112a:	b508      	push	{r3, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 8001132:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    retVal = readIcMuRegister_leu(reg, &_tmpBuff64);
 8001136:	f500 7280 	add.w	r2, r0, #256	; 0x100
 800113a:	f7ff ffcf 	bl	80010dc <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 800113e:	bd08      	pop	{r3, pc}

08001140 <_ZN8IcHausMu4initEv>:
fctStatus IcHausMu::init(void) {
 8001140:	b510      	push	{r4, lr}
 8001142:	4604      	mov	r4, r0
    if (NULL!=_csFct_ptr && NULL!=_streamFct_ptr) {
 8001144:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001148:	b133      	cbz	r3, 8001158 <_ZN8IcHausMu4initEv+0x18>
 800114a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800114e:	b11b      	cbz	r3, 8001158 <_ZN8IcHausMu4initEv+0x18>
        _initStatus = RET_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
 8001156:	e002      	b.n	800115e <_ZN8IcHausMu4initEv+0x1e>
        _initStatus = RET_E_NULLPTR;
 8001158:	2309      	movs	r3, #9
 800115a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
    if (RET_OK == _initStatus) {
 800115e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8001162:	b17b      	cbz	r3, 8001184 <_ZN8IcHausMu4initEv+0x44>
    if (RET_OK == _initStatus) {
 8001164:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8001168:	b94b      	cbnz	r3, 800117e <_ZN8IcHausMu4initEv+0x3e>
        if(getLastByteValue() != _hardRev) {    // compare the value read.
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ff35 	bl	8000fda <_ZN8IcHausMu16getLastByteValueEv>
 8001170:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 8001174:	4298      	cmp	r0, r3
 8001176:	d002      	beq.n	800117e <_ZN8IcHausMu4initEv+0x3e>
            _initStatus = RET_E_DATA;
 8001178:	2307      	movs	r3, #7
 800117a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
}
 800117e:	f894 010d 	ldrb.w	r0, [r4, #269]	; 0x10d
 8001182:	bd10      	pop	{r4, pc}
        _initStatus = readIcMuRegister(HARD_REV);
 8001184:	211c      	movs	r1, #28
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff ffcf 	bl	800112a <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>
 800118c:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
 8001190:	e7e8      	b.n	8001164 <_ZN8IcHausMu4initEv+0x24>

08001192 <_ZN8IcHausMu14_writeRegisterEhjPh>:

fctStatus IcHausMu::_writeRegister(const unsigned char registerToWrite, const unsigned int bytesToWrite, unsigned char* buffPtr) {
 8001192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001194:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 8001196:	2400      	movs	r4, #0
 8001198:	f8ad 4004 	strh.w	r4, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 800119c:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 80011a0:	b9e5      	cbnz	r5, 80011dc <_ZN8IcHausMu14_writeRegisterEhjPh+0x4a>
 80011a2:	b1db      	cbz	r3, 80011dc <_ZN8IcHausMu14_writeRegisterEhjPh+0x4a>
 80011a4:	461d      	mov	r5, r3
 80011a6:	4617      	mov	r7, r2
 80011a8:	460e      	mov	r6, r1
 80011aa:	4604      	mov	r4, r0
      // select the device
      _csFct_ptr(true);
 80011ac:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80011b0:	2001      	movs	r0, #1
 80011b2:	4798      	blx	r3

      // send the read command with the register address to read:
      internalBuffer[0] = WRITE_REG;
 80011b4:	23d2      	movs	r3, #210	; 0xd2
 80011b6:	f88d 3004 	strb.w	r3, [sp, #4]
      internalBuffer[1] = registerToWrite;
 80011ba:	f88d 6005 	strb.w	r6, [sp, #5]

      _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 80011be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011c2:	2202      	movs	r2, #2
 80011c4:	a901      	add	r1, sp, #4
 80011c6:	4608      	mov	r0, r1
 80011c8:	4798      	blx	r3
      // Check if the register write command has been sent as expected
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011ce:	2bd2      	cmp	r3, #210	; 0xd2
 80011d0:	d007      	beq.n	80011e2 <_ZN8IcHausMu14_writeRegisterEhjPh+0x50>
 80011d2:	2505      	movs	r5, #5
          _csFct_ptr(true);
          retVal = _readRegStatus();          // check the validity of the writing operation
      }

      // unselect the device
      _csFct_ptr(false);
 80011d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011d8:	2000      	movs	r0, #0
 80011da:	4798      	blx	r3
      retVal = _initStatus;
    }

    // return the result:
    return retVal;
}
 80011dc:	4628      	mov	r0, r5
 80011de:	b003      	add	sp, #12
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011e6:	42b3      	cmp	r3, r6
 80011e8:	d112      	bne.n	8001210 <_ZN8IcHausMu14_writeRegisterEhjPh+0x7e>
          _streamFct_ptr(buffPtr, buffPtr, bytesToWrite);
 80011ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011ee:	463a      	mov	r2, r7
 80011f0:	4629      	mov	r1, r5
 80011f2:	4628      	mov	r0, r5
 80011f4:	4798      	blx	r3
          _csFct_ptr(false);
 80011f6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011fa:	2000      	movs	r0, #0
 80011fc:	4798      	blx	r3
          _csFct_ptr(true);
 80011fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001202:	2001      	movs	r0, #1
 8001204:	4798      	blx	r3
          retVal = _readRegStatus();          // check the validity of the writing operation
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fef6 	bl	8000ff8 <_ZN8IcHausMu14_readRegStatusEv>
 800120c:	4605      	mov	r5, r0
 800120e:	e7e1      	b.n	80011d4 <_ZN8IcHausMu14_writeRegisterEhjPh+0x42>
 8001210:	2505      	movs	r5, #5
 8001212:	e7df      	b.n	80011d4 <_ZN8IcHausMu14_writeRegisterEhjPh+0x42>

08001214 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::writeIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 8001214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	4606      	mov	r6, r0
 800121c:	460c      	mov	r4, r1
 800121e:	4615      	mov	r5, r2
    unsigned char tmpData = 0x00;
 8001220:	2300      	movs	r3, #0
 8001222:	f88d 3007 	strb.w	r3, [sp, #7]
    regSize = icMuRegSize(reg);
 8001226:	f7ff fecb 	bl	8000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 800122a:	4607      	mov	r7, r0
    if (1 < regSize) {
 800122c:	2801      	cmp	r0, #1
 800122e:	d91f      	bls.n	8001270 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x5c>
        tmpRegAddr = reg+regSize;
 8001230:	eb04 0800 	add.w	r8, r4, r0
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 8001234:	fa56 f888 	uxtab	r8, r6, r8
 8001238:	f10d 0307 	add.w	r3, sp, #7
 800123c:	2201      	movs	r2, #1
 800123e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001242:	4630      	mov	r0, r6
 8001244:	f7ff ff06 	bl	8001054 <_ZN8IcHausMu13_readRegisterEhjPh>
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 8001248:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 800124c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001250:	ea22 0203 	bic.w	r2, r2, r3
 8001254:	f88d 2007 	strb.w	r2, [sp, #7]
        *(buffPtr->tab+regSize-1) &= _icMuRegisterMask[tmpRegAddr];
 8001258:	1e7a      	subs	r2, r7, #1
 800125a:	5ca9      	ldrb	r1, [r5, r2]
 800125c:	400b      	ands	r3, r1
 800125e:	54ab      	strb	r3, [r5, r2]
        *(buffPtr->tab+regSize-1) |= tmpData;
 8001260:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001264:	430b      	orrs	r3, r1
 8001266:	54ab      	strb	r3, [r5, r2]
        tmpRegAddr = reg+1;
 8001268:	3401      	adds	r4, #1
 800126a:	b2e4      	uxtb	r4, r4
    if (RET_OK == retVal) {
 800126c:	4602      	mov	r2, r0
 800126e:	b9c0      	cbnz	r0, 80012a2 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x8e>
        tmpData = 0x00;
 8001270:	ab02      	add	r3, sp, #8
 8001272:	2200      	movs	r2, #0
 8001274:	f803 2d01 	strb.w	r2, [r3, #-1]!
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 8001278:	eb06 0804 	add.w	r8, r6, r4
 800127c:	2201      	movs	r2, #1
 800127e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fee6 	bl	8001054 <_ZN8IcHausMu13_readRegisterEhjPh>
 8001288:	4602      	mov	r2, r0
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 800128a:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 800128e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001292:	ea21 0103 	bic.w	r1, r1, r3
 8001296:	f88d 1007 	strb.w	r1, [sp, #7]
        *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 800129a:	7828      	ldrb	r0, [r5, #0]
 800129c:	4003      	ands	r3, r0
        *(buffPtr->tab) |= tmpData;
 800129e:	430b      	orrs	r3, r1
 80012a0:	702b      	strb	r3, [r5, #0]
    if (RET_OK == retVal) {
 80012a2:	b11a      	cbz	r2, 80012ac <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x98>
}
 80012a4:	4610      	mov	r0, r2
 80012a6:	b002      	add	sp, #8
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        retVal = _writeRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 80012ac:	4434      	add	r4, r6
 80012ae:	462b      	mov	r3, r5
 80012b0:	463a      	mov	r2, r7
 80012b2:	7861      	ldrb	r1, [r4, #1]
 80012b4:	4630      	mov	r0, r6
 80012b6:	f7ff ff6c 	bl	8001192 <_ZN8IcHausMu14_writeRegisterEhjPh>
 80012ba:	4602      	mov	r2, r0
 80012bc:	e7f2      	b.n	80012a4 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x90>

080012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>:
fctStatus IcHausMu::writeIcMuRegister(const icMuRegister_t reg, const unsigned char val) {
 80012be:	b510      	push	{r4, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 80012c0:	2400      	movs	r4, #0
 80012c2:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 80012c6:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
    _tmpBuff64.bytes_le.lsb = val;
 80012ca:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
    return writeIcMuRegister_leu(reg, &_tmpBuff64);
 80012ce:	f500 7280 	add.w	r2, r0, #256	; 0x100
 80012d2:	f7ff ff9f 	bl	8001214 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 80012d6:	bd10      	pop	{r4, pc}

080012d8 <_ZN8IcHausMu16setAutomaticGainEh>:
fctStatus IcHausMu::setAutomaticGain(const unsigned char autoGainEnabled) {
 80012d8:	b508      	push	{r3, lr}
    if (0x00 != autoGainEnabled) {tmpBuff = 0x80;}
 80012da:	b121      	cbz	r1, 80012e6 <_ZN8IcHausMu16setAutomaticGainEh+0xe>
 80012dc:	2280      	movs	r2, #128	; 0x80
    retVal = writeIcMuRegister(ENAC, tmpBuff);
 80012de:	2101      	movs	r1, #1
 80012e0:	f7ff ffed 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
}
 80012e4:	bd08      	pop	{r3, pc}
    unsigned char tmpBuff = 0x00;
 80012e6:	2200      	movs	r2, #0
 80012e8:	e7f9      	b.n	80012de <_ZN8IcHausMu16setAutomaticGainEh+0x6>

080012ea <_ZN8IcHausMu14changeSdadModeEhhh>:
    if(3>stMode && 38>sdadMsb && 12<sdadMsb && 16>sdadLsb && sdadLsb<sdadMsb) {
 80012ea:	2902      	cmp	r1, #2
 80012ec:	d83e      	bhi.n	800136c <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
 80012ee:	2a25      	cmp	r2, #37	; 0x25
 80012f0:	d83f      	bhi.n	8001372 <_ZN8IcHausMu14changeSdadModeEhhh+0x88>
 80012f2:	2a0c      	cmp	r2, #12
 80012f4:	d93f      	bls.n	8001376 <_ZN8IcHausMu14changeSdadModeEhhh+0x8c>
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d83f      	bhi.n	800137a <_ZN8IcHausMu14changeSdadModeEhhh+0x90>
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d93f      	bls.n	800137e <_ZN8IcHausMu14changeSdadModeEhhh+0x94>
fctStatus IcHausMu::changeSdadMode(unsigned char stMode, unsigned char sdadMsb, unsigned char sdadLsb) {
 80012fe:	b570      	push	{r4, r5, r6, lr}
 8001300:	461d      	mov	r5, r3
 8001302:	4614      	mov	r4, r2
 8001304:	4606      	mov	r6, r0
        retVal = writeIcMuRegister(MODE_ST, stMode<<4);
 8001306:	0109      	lsls	r1, r1, #4
 8001308:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
 800130c:	2124      	movs	r1, #36	; 0x24
 800130e:	f7ff ffd6 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
        if (RET_OK == retVal) {
 8001312:	4602      	mov	r2, r0
 8001314:	b118      	cbz	r0, 800131e <_ZN8IcHausMu14changeSdadModeEhhh+0x34>
        if (RET_OK == retVal) {
 8001316:	b15a      	cbz	r2, 8001330 <_ZN8IcHausMu14changeSdadModeEhhh+0x46>
        if (RET_OK == retVal) {
 8001318:	b1ea      	cbz	r2, 8001356 <_ZN8IcHausMu14changeSdadModeEhhh+0x6c>
}
 800131a:	4610      	mov	r0, r2
 800131c:	bd70      	pop	{r4, r5, r6, pc}
            retVal = writeIcMuRegister(OUT_LSB, sdadLsb);
 800131e:	462a      	mov	r2, r5
 8001320:	2122      	movs	r1, #34	; 0x22
 8001322:	4630      	mov	r0, r6
 8001324:	f7ff ffcb 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001328:	4602      	mov	r2, r0
            _sdadOutLsb = sdadLsb;
 800132a:	f886 510b 	strb.w	r5, [r6, #267]	; 0x10b
 800132e:	e7f2      	b.n	8001316 <_ZN8IcHausMu14changeSdadModeEhhh+0x2c>
            sdadLsb = 1+sdadMsb-sdadLsb;        // reuse sdadLsb variable for SDAD length and OUT_ZERO computing
 8001330:	1b63      	subs	r3, r4, r5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d2      	uxtb	r2, r2
            _sdadOutSize = (sdadLsb+7)/8;       // SDAD length in bytes
 8001338:	3207      	adds	r2, #7
 800133a:	10d2      	asrs	r2, r2, #3
 800133c:	f886 210c 	strb.w	r2, [r6, #268]	; 0x10c
            sdadLsb = 7-(0x07&(sdadLsb-1));     // nb of zeros to reach a complete byte format for SDAD
 8001340:	43da      	mvns	r2, r3
 8001342:	b2d2      	uxtb	r2, r2
            retVal = writeIcMuRegister(OUT_ZERO, sdadLsb<<5);   // alignment with datasheet
 8001344:	0152      	lsls	r2, r2, #5
 8001346:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800134a:	2123      	movs	r1, #35	; 0x23
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff ffb6 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001352:	4602      	mov	r2, r0
 8001354:	e7e0      	b.n	8001318 <_ZN8IcHausMu14changeSdadModeEhhh+0x2e>
            sdadMsb -= 13;                      // offset defined in datasheet
 8001356:	3c0d      	subs	r4, #13
 8001358:	b2e4      	uxtb	r4, r4
            retVal = writeIcMuRegister(OUT_MSB, sdadMsb);
 800135a:	4622      	mov	r2, r4
 800135c:	2121      	movs	r1, #33	; 0x21
 800135e:	4630      	mov	r0, r6
 8001360:	f7ff ffad 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001364:	4602      	mov	r2, r0
            _sdadOutMsb = sdadMsb;
 8001366:	f886 410a 	strb.w	r4, [r6, #266]	; 0x10a
 800136a:	e7d6      	b.n	800131a <_ZN8IcHausMu14changeSdadModeEhhh+0x30>
        retVal = RET_E_PARAMETER;
 800136c:	2206      	movs	r2, #6
}
 800136e:	4610      	mov	r0, r2
 8001370:	4770      	bx	lr
        retVal = RET_E_PARAMETER;
 8001372:	2206      	movs	r2, #6
 8001374:	e7fb      	b.n	800136e <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 8001376:	2206      	movs	r2, #6
 8001378:	e7f9      	b.n	800136e <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 800137a:	2206      	movs	r2, #6
 800137c:	e7f7      	b.n	800136e <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 800137e:	2206      	movs	r2, #6
 8001380:	e7f5      	b.n	800136e <_ZN8IcHausMu14changeSdadModeEhhh+0x84>

08001382 <_ZN8IcHausMu9_readSdadEjPh>:

fctStatus IcHausMu::_readSdad(const unsigned int bytesToRead, unsigned char* buffPtr) {
 8001382:	b570      	push	{r4, r5, r6, lr}
 8001384:	b082      	sub	sp, #8
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer = 0x00;           // incoming byte from the SPI
 8001386:	2300      	movs	r3, #0
 8001388:	f88d 3007 	strb.w	r3, [sp, #7]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 800138c:	f890 410d 	ldrb.w	r4, [r0, #269]	; 0x10d
 8001390:	b9fc      	cbnz	r4, 80013d2 <_ZN8IcHausMu9_readSdadEjPh+0x50>
 8001392:	b1f2      	cbz	r2, 80013d2 <_ZN8IcHausMu9_readSdadEjPh+0x50>
 8001394:	4614      	mov	r4, r2
 8001396:	460e      	mov	r6, r1
 8001398:	4605      	mov	r5, r0
        // select the device
        _csFct_ptr(true);
 800139a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800139e:	2001      	movs	r0, #1
 80013a0:	4798      	blx	r3

        // send the read command with the register address to read:
        internalBuffer = SDAD_TRANSMIT;
 80013a2:	a802      	add	r0, sp, #8
 80013a4:	23a6      	movs	r3, #166	; 0xa6
 80013a6:	f800 3d01 	strb.w	r3, [r0, #-1]!
        _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 1);
 80013aa:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80013ae:	2201      	movs	r2, #1
 80013b0:	4601      	mov	r1, r0
 80013b2:	4798      	blx	r3
        // Check if the register read command has been sent as expected
        if (SDAD_TRANSMIT != internalBuffer) {
 80013b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013b8:	2ba6      	cmp	r3, #166	; 0xa6
 80013ba:	d10d      	bne.n	80013d8 <_ZN8IcHausMu9_readSdadEjPh+0x56>
            retVal = RET_E_OPCODE;
        }
        else {
            _streamFct_ptr(buffPtr, buffPtr, bytesToRead);
 80013bc:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80013c0:	4632      	mov	r2, r6
 80013c2:	4621      	mov	r1, r4
 80013c4:	4620      	mov	r0, r4
 80013c6:	4798      	blx	r3
    fctStatus retVal = RET_OK;
 80013c8:	2400      	movs	r4, #0
        }
        // unselect the device
        _csFct_ptr(false);
 80013ca:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 80013ce:	2000      	movs	r0, #0
 80013d0:	4798      	blx	r3
        retVal = _initStatus;
    }

    // return the function status:
    return retVal;
}
 80013d2:	4620      	mov	r0, r4
 80013d4:	b002      	add	sp, #8
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
            retVal = RET_E_OPCODE;
 80013d8:	2405      	movs	r4, #5
 80013da:	e7f6      	b.n	80013ca <_ZN8IcHausMu9_readSdadEjPh+0x48>

080013dc <_ZN8IcHausMu7readPosEP8uint16_u>:
fctStatus IcHausMu::readPos(uint16_u* posPtr) {
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	4604      	mov	r4, r0
 80013e0:	460e      	mov	r6, r1
    retVal = _readSdad(_sdadOutSize, (unsigned char*)&_tmpBuff64);
 80013e2:	f500 7280 	add.w	r2, r0, #256	; 0x100
 80013e6:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
 80013ea:	f7ff ffca 	bl	8001382 <_ZN8IcHausMu9_readSdadEjPh>
    if (RET_OK == retVal) { *(posPtr)= getLastUint_16Value(); }
 80013ee:	4605      	mov	r5, r0
 80013f0:	b918      	cbnz	r0, 80013fa <_ZN8IcHausMu7readPosEP8uint16_u+0x1e>
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff fdf4 	bl	8000fe0 <_ZN8IcHausMu19getLastUint_16ValueEv>
 80013f8:	8030      	strh	r0, [r6, #0]
}
 80013fa:	4628      	mov	r0, r5
 80013fc:	bd70      	pop	{r4, r5, r6, pc}

080013fe <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include <as5048a.h>

/**
 * Constructor
 */
AS5048A::AS5048A(SPI_HandleTypeDef* hspi, GPIO_TypeDef* arg_ps, uint16_t arg_cs){
 80013fe:	b430      	push	{r4, r5}
 8001400:	2500      	movs	r5, #0
 8001402:	7005      	strb	r5, [r0, #0]
	_cs = arg_cs;
 8001404:	8043      	strh	r3, [r0, #2]
	_ps = arg_ps;
 8001406:	6082      	str	r2, [r0, #8]
	_spi = hspi;
 8001408:	60c1      	str	r1, [r0, #12]
	errorFlag = 0;
	position = 0;
 800140a:	8285      	strh	r5, [r0, #20]
}
 800140c:	bc30      	pop	{r4, r5}
 800140e:	4770      	bx	lr

08001410 <ChangeCS>:
  return status;
}

// Function to select the slave (in this case ic-MU)
void ChangeCS(bool state)
{
 8001410:	b508      	push	{r3, lr}

  if(state)
 8001412:	b928      	cbnz	r0, 8001420 <ChangeCS+0x10>
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_RESET);
  else
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2102      	movs	r1, #2
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <ChangeCS+0x1c>)
 800141a:	f000 ff49 	bl	80022b0 <HAL_GPIO_WritePin>
 }
 800141e:	bd08      	pop	{r3, pc}
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4801      	ldr	r0, [pc, #4]	; (800142c <ChangeCS+0x1c>)
 8001426:	f000 ff43 	bl	80022b0 <HAL_GPIO_WritePin>
 800142a:	e7f8      	b.n	800141e <ChangeCS+0xe>
 800142c:	40020400 	.word	0x40020400

08001430 <_ZL12MX_GPIO_Initv>:
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	2400      	movs	r4, #0
 8001436:	9405      	str	r4, [sp, #20]
 8001438:	9406      	str	r4, [sp, #24]
 800143a:	9407      	str	r4, [sp, #28]
 800143c:	9408      	str	r4, [sp, #32]
 800143e:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	9401      	str	r4, [sp, #4]
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <_ZL12MX_GPIO_Initv+0xc0>)
 8001444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144e:	f002 0204 	and.w	r2, r2, #4
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	9402      	str	r4, [sp, #8]
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001466:	9202      	str	r2, [sp, #8]
 8001468:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	9403      	str	r4, [sp, #12]
 800146c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
 8001474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001476:	f002 0201 	and.w	r2, r2, #1
 800147a:	9203      	str	r2, [sp, #12]
 800147c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	9404      	str	r4, [sp, #16]
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	f042 0202 	orr.w	r2, r2, #2
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	9304      	str	r3, [sp, #16]
 8001490:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001492:	4f18      	ldr	r7, [pc, #96]	; (80014f4 <_ZL12MX_GPIO_Initv+0xc4>)
 8001494:	4622      	mov	r2, r4
 8001496:	2120      	movs	r1, #32
 8001498:	4638      	mov	r0, r7
 800149a:	f000 ff09 	bl	80022b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI2_ICMU_CS_Pin|SPI2_AS5048_CS_Pin, GPIO_PIN_RESET);
 800149e:	4e16      	ldr	r6, [pc, #88]	; (80014f8 <_ZL12MX_GPIO_Initv+0xc8>)
 80014a0:	4622      	mov	r2, r4
 80014a2:	f241 0102 	movw	r1, #4098	; 0x1002
 80014a6:	4630      	mov	r0, r6
 80014a8:	f000 ff02 	bl	80022b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <_ZL12MX_GPIO_Initv+0xcc>)
 80014b4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b8:	a905      	add	r1, sp, #20
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <_ZL12MX_GPIO_Initv+0xd0>)
 80014bc:	f000 fd76 	bl	8001fac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2501      	movs	r5, #1
 80014c6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014cc:	a905      	add	r1, sp, #20
 80014ce:	4638      	mov	r0, r7
 80014d0:	f000 fd6c 	bl	8001fac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_ICMU_CS_Pin|SPI2_AS5048_CS_Pin;
 80014d4:	f241 0302 	movw	r3, #4098	; 0x1002
 80014d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2302      	movs	r3, #2
 80014e0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	a905      	add	r1, sp, #20
 80014e4:	4630      	mov	r0, r6
 80014e6:	f000 fd61 	bl	8001fac <HAL_GPIO_Init>
}
 80014ea:	b00b      	add	sp, #44	; 0x2c
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	10210000 	.word	0x10210000
 8001500:	40020800 	.word	0x40020800

08001504 <_ZL12MX_SPI2_Initv>:
{
 8001504:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <_ZL12MX_SPI2_Initv+0x34>)
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <_ZL12MX_SPI2_Initv+0x38>)
 800150a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800150c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001510:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	2300      	movs	r3, #0
 8001514:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001516:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001518:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001522:	2230      	movs	r2, #48	; 0x30
 8001524:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001526:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001528:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800152c:	230a      	movs	r3, #10
 800152e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001530:	f001 fb54 	bl	8002bdc <HAL_SPI_Init>
}
 8001534:	bd08      	pop	{r3, pc}
 8001536:	bf00      	nop
 8001538:	20000210 	.word	0x20000210
 800153c:	40003800 	.word	0x40003800

08001540 <_ZL19MX_USART2_UART_Initv>:
{
 8001540:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <_ZL19MX_USART2_UART_Initv+0x24>)
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <_ZL19MX_USART2_UART_Initv+0x28>)
 8001546:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001548:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800154c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	2300      	movs	r3, #0
 8001550:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001552:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001554:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001556:	220c      	movs	r2, #12
 8001558:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	f001 ff0d 	bl	800337c <HAL_UART_Init>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	20000268 	.word	0x20000268
 8001568:	40004400 	.word	0x40004400

0800156c <TransferIcMU>:

// Function to echange data the slave (in this case ic-MU)
void TransferIcMU(unsigned char* const txBuffer, unsigned char* rxBuffer, const unsigned int bufferLen)
{
 800156c:	b500      	push	{lr}
 800156e:	b083      	sub	sp, #12
  //spiExchange(&SPID1, bufferLen, txBuffer, rxBuffer);
  HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxBuffer, bufferLen, 1);
 8001570:	2301      	movs	r3, #1
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	b293      	uxth	r3, r2
 8001576:	460a      	mov	r2, r1
 8001578:	4601      	mov	r1, r0
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <TransferIcMU+0x1c>)
 800157c:	f001 fb92 	bl	8002ca4 <HAL_SPI_TransmitReceive>

}
 8001580:	b003      	add	sp, #12
 8001582:	f85d fb04 	ldr.w	pc, [sp], #4
 8001586:	bf00      	nop
 8001588:	20000210 	.word	0x20000210

0800158c <_Z41__static_initialization_and_destruction_0ii>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800158c:	2801      	cmp	r0, #1
 800158e:	d000      	beq.n	8001592 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8001590:	4770      	bx	lr
 8001592:	b508      	push	{r3, lr}
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	4299      	cmp	r1, r3
 800159a:	d000      	beq.n	800159e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800159c:	bd08      	pop	{r3, pc}
AS5048A angleSensor(&hspi2, SPI2_AS5048_CS_GPIO_Port, SPI2_AS5048_CS_Pin);
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80015a4:	4905      	ldr	r1, [pc, #20]	; (80015bc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80015a8:	f7ff ff29 	bl	80013fe <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
IcHausMu ichausmu_enc(ICHAUSMU_HW_REV);
 80015ac:	2107      	movs	r1, #7
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80015b0:	f7ff fcd2 	bl	8000f58 <_ZN8IcHausMuC1Eh>
}
 80015b4:	e7f2      	b.n	800159c <_Z41__static_initialization_and_destruction_0ii+0x10>
 80015b6:	bf00      	nop
 80015b8:	40020400 	.word	0x40020400
 80015bc:	20000210 	.word	0x20000210
 80015c0:	200001f8 	.word	0x200001f8
 80015c4:	200002a8 	.word	0x200002a8

080015c8 <__io_putchar>:
		{
 80015c8:	b500      	push	{lr}
 80015ca:	b083      	sub	sp, #12
 80015cc:	a902      	add	r1, sp, #8
 80015ce:	f841 0d04 	str.w	r0, [r1, #-4]!
		 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80015d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d6:	2201      	movs	r2, #1
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <__io_putchar+0x20>)
 80015da:	f001 ff1c 	bl	8003416 <HAL_UART_Transmit>
		}
 80015de:	9801      	ldr	r0, [sp, #4]
 80015e0:	b003      	add	sp, #12
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015e6:	bf00      	nop
 80015e8:	20000268 	.word	0x20000268

080015ec <_Z18SystemClock_Configv>:
{
 80015ec:	b530      	push	{r4, r5, lr}
 80015ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f0:	2230      	movs	r2, #48	; 0x30
 80015f2:	2100      	movs	r1, #0
 80015f4:	a808      	add	r0, sp, #32
 80015f6:	f002 fba2 	bl	8003d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fa:	2400      	movs	r4, #0
 80015fc:	9403      	str	r4, [sp, #12]
 80015fe:	9404      	str	r4, [sp, #16]
 8001600:	9405      	str	r4, [sp, #20]
 8001602:	9406      	str	r4, [sp, #24]
 8001604:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	9401      	str	r4, [sp, #4]
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <_Z18SystemClock_Configv+0x8c>)
 800160a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800161c:	9402      	str	r4, [sp, #8]
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <_Z18SystemClock_Configv+0x90>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001636:	2502      	movs	r5, #2
 8001638:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163e:	2310      	movs	r3, #16
 8001640:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001646:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001648:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800164c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800164e:	2304      	movs	r3, #4
 8001650:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001652:	2307      	movs	r3, #7
 8001654:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	a808      	add	r0, sp, #32
 8001658:	f000 fe5e 	bl	8002318 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166c:	4629      	mov	r1, r5
 800166e:	a803      	add	r0, sp, #12
 8001670:	f001 f8c2 	bl	80027f8 <HAL_RCC_ClockConfig>
}
 8001674:	b015      	add	sp, #84	; 0x54
 8001676:	bd30      	pop	{r4, r5, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <encoder_init_ichaus>:
void encoder_init_ichaus(uint8_t* init_seq){
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4604      	mov	r4, r0
HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2102      	movs	r1, #2
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <encoder_init_ichaus+0x58>)
 800168a:	f000 fe11 	bl	80022b0 <HAL_GPIO_WritePin>
init_seq[0] = (uint8_t)ichausmu_enc.init();
 800168e:	4d13      	ldr	r5, [pc, #76]	; (80016dc <encoder_init_ichaus+0x5c>)
 8001690:	4628      	mov	r0, r5
 8001692:	f7ff fd55 	bl	8001140 <_ZN8IcHausMu4initEv>
 8001696:	7020      	strb	r0, [r4, #0]
init_seq[1] = (uint8_t)ichausmu_enc.writeIcMuRegister(CIBM, 0x08);       // set bias current, Determined by firstTimeSetup()
 8001698:	2208      	movs	r2, #8
 800169a:	2100      	movs	r1, #0
 800169c:	4628      	mov	r0, r5
 800169e:	f7ff fe0e 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 80016a2:	7060      	strb	r0, [r4, #1]
init_seq[2] = (uint8_t)ichausmu_enc.writeIcMuRegister(LIN, 0x00);       // set the target type as rotative
 80016a4:	2200      	movs	r2, #0
 80016a6:	2130      	movs	r1, #48	; 0x30
 80016a8:	4628      	mov	r0, r5
 80016aa:	f7ff fe08 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 80016ae:	70a0      	strb	r0, [r4, #2]
init_seq[3] = (uint8_t)ichausmu_enc.writeIcMuRegister(MPC, 0x05);       // magnetic target is a 32master/31Nonius period
 80016b0:	2205      	movs	r2, #5
 80016b2:	212f      	movs	r1, #47	; 0x2f
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fe02 	bl	80012be <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 80016ba:	70e0      	strb	r0, [r4, #3]
init_seq[4] = (uint8_t)ichausmu_enc.changeSdadMode(0x00, 18, 3);        // define the SDAD output
 80016bc:	2303      	movs	r3, #3
 80016be:	2212      	movs	r2, #18
 80016c0:	2100      	movs	r1, #0
 80016c2:	4628      	mov	r0, r5
 80016c4:	f7ff fe11 	bl	80012ea <_ZN8IcHausMu14changeSdadModeEhhh>
 80016c8:	7120      	strb	r0, [r4, #4]
init_seq[5] = (uint8_t)ichausmu_enc.setAutomaticGain(true);
 80016ca:	2101      	movs	r1, #1
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff fe03 	bl	80012d8 <_ZN8IcHausMu16setAutomaticGainEh>
 80016d2:	7160      	strb	r0, [r4, #5]
}
 80016d4:	bd38      	pop	{r3, r4, r5, pc}
 80016d6:	bf00      	nop
 80016d8:	40020400 	.word	0x40020400
 80016dc:	200002a8 	.word	0x200002a8

080016e0 <read_pos_ichaus>:
uint8_t read_pos_ichaus(uint16_t* pos){
 80016e0:	b510      	push	{r4, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	4604      	mov	r4, r0
  status = (uint8_t)ichausmu_enc.readPos(&posICMU);
 80016e6:	a901      	add	r1, sp, #4
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <read_pos_ichaus+0x18>)
 80016ea:	f7ff fe77 	bl	80013dc <_ZN8IcHausMu7readPosEP8uint16_u>
  *pos = (uint16_t)posICMU.word;
 80016ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80016f2:	8023      	strh	r3, [r4, #0]
}
 80016f4:	b002      	add	sp, #8
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	200002a8 	.word	0x200002a8

080016fc <main>:
{
 80016fc:	b530      	push	{r4, r5, lr}
 80016fe:	b087      	sub	sp, #28
  HAL_Init();
 8001700:	f000 fa8c 	bl	8001c1c <HAL_Init>
  SystemClock_Config();
 8001704:	f7ff ff72 	bl	80015ec <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001708:	f7ff fe92 	bl	8001430 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 800170c:	f7ff fefa 	bl	8001504 <_ZL12MX_SPI2_Initv>
  MX_USART2_UART_Init();
 8001710:	f7ff ff16 	bl	8001540 <_ZL19MX_USART2_UART_Initv>
  DWT_Init();  // Init the Data Watchpoint and Trace Unit on TIM4 to enable delays in µs
 8001714:	f000 fa26 	bl	8001b64 <DWT_Init>
  ichausmu_enc.csFunctionAttach(ChangeCS);
 8001718:	4c23      	ldr	r4, [pc, #140]	; (80017a8 <main+0xac>)
 800171a:	4924      	ldr	r1, [pc, #144]	; (80017ac <main+0xb0>)
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fc49 	bl	8000fb4 <_ZN8IcHausMu16csFunctionAttachEPFvbE>
  ichausmu_enc.streamFunctionAttach(TransferIcMU);
 8001722:	4923      	ldr	r1, [pc, #140]	; (80017b0 <main+0xb4>)
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fc48 	bl	8000fba <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>
  printf("IcMU Init\n");
 800172a:	4822      	ldr	r0, [pc, #136]	; (80017b4 <main+0xb8>)
 800172c:	f002 fff4 	bl	8004718 <puts>
  encoder_init_ichaus(init_seq);
 8001730:	a804      	add	r0, sp, #16
 8001732:	f7ff ffa5 	bl	8001680 <encoder_init_ichaus>
  for(int i = 0; i < sizeof(init_seq); i++)
 8001736:	2400      	movs	r4, #0
 8001738:	2c05      	cmp	r4, #5
 800173a:	d808      	bhi.n	800174e <main+0x52>
        printf(" %d ,", init_seq[i]);
 800173c:	ab06      	add	r3, sp, #24
 800173e:	4423      	add	r3, r4
 8001740:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <main+0xbc>)
 8001746:	f002 ff5f 	bl	8004608 <iprintf>
  for(int i = 0; i < sizeof(init_seq); i++)
 800174a:	3401      	adds	r4, #1
 800174c:	e7f4      	b.n	8001738 <main+0x3c>
  printf("\n");
 800174e:	200a      	movs	r0, #10
 8001750:	f002 ff72 	bl	8004638 <putchar>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001754:	2120      	movs	r1, #32
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <main+0xc0>)
 8001758:	f000 fdc3 	bl	80022e2 <HAL_GPIO_TogglePin>
	  uint16_t pos = 28;
 800175c:	a806      	add	r0, sp, #24
 800175e:	231c      	movs	r3, #28
 8001760:	f820 3d0a 	strh.w	r3, [r0, #-10]!
	  uint8_t status = read_pos_ichaus(&pos);
 8001764:	f7ff ffbc 	bl	80016e0 <read_pos_ichaus>
 8001768:	4605      	mov	r5, r0
	  float posDeg = pos*360/65536.0;
 800176a:	f8bd 400e 	ldrh.w	r4, [sp, #14]
 800176e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001772:	fb00 f004 	mul.w	r0, r0, r4
 8001776:	f7fe fedd 	bl	8000534 <__aeabi_i2d>
 800177a:	2200      	movs	r2, #0
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <main+0xc4>)
 800177e:	f7fe ff43 	bl	8000608 <__aeabi_dmul>
 8001782:	f7ff fa19 	bl	8000bb8 <__aeabi_d2f>
	  printf("Current Angle: %.3f | %d | %d \n", posDeg, pos, status);
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_f2d>
 800178a:	9501      	str	r5, [sp, #4]
 800178c:	9400      	str	r4, [sp, #0]
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <main+0xc8>)
 8001794:	f002 ff38 	bl	8004608 <iprintf>
	  DWT_Delay(10);
 8001798:	200a      	movs	r0, #10
 800179a:	f000 fa03 	bl	8001ba4 <DWT_Delay>
	  HAL_Delay(1000);
 800179e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a2:	f000 faad 	bl	8001d00 <HAL_Delay>
 80017a6:	e7d5      	b.n	8001754 <main+0x58>
 80017a8:	200002a8 	.word	0x200002a8
 80017ac:	08001411 	.word	0x08001411
 80017b0:	0800156d 	.word	0x0800156d
 80017b4:	08006600 	.word	0x08006600
 80017b8:	0800660c 	.word	0x0800660c
 80017bc:	40020000 	.word	0x40020000
 80017c0:	3ef00000 	.word	0x3ef00000
 80017c4:	08006614 	.word	0x08006614

080017c8 <_GLOBAL__sub_I_hspi2>:
}
 80017c8:	b508      	push	{r3, lr}
 80017ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fedc 	bl	800158c <_Z41__static_initialization_and_destruction_0ii>
 80017d4:	bd08      	pop	{r3, pc}
	...

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001816:	2007      	movs	r0, #7
 8001818:	f000 fb64 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_SPI_MspInit+0x94>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d134      	bne.n	80018b4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_SPI_MspInit+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001882:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001894:	2305      	movs	r3, #5
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <HAL_SPI_MspInit+0x9c>)
 80018a0:	f000 fb84 	bl	8001fac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2024      	movs	r0, #36	; 0x24
 80018aa:	f000 fb26 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018ae:	2024      	movs	r0, #36	; 0x24
 80018b0:	f000 fb3f 	bl	8001f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40003800 	.word	0x40003800
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_UART_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12b      	bne.n	8001942 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_UART_MspInit+0x88>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001922:	230c      	movs	r3, #12
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001932:	2307      	movs	r3, #7
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0x8c>)
 800193e:	f000 fb35 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40004400 	.word	0x40004400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f988 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <SPI2_IRQHandler+0x10>)
 80019ba:	f001 fb15 	bl	8002fe8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000210 	.word	0x20000210

080019c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
	}

return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fdd3 	bl	80015c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
	}
	return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f002 f8fe 	bl	8003cd4 <__errno>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	230c      	movs	r3, #12
 8001adc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20018000 	.word	0x20018000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	200003c0 	.word	0x200003c0
 8001b0c:	200003d8 	.word	0x200003d8

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b16:	e003      	b.n	8001b20 <LoopCopyDataInit>

08001b18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b1e:	3104      	adds	r1, #4

08001b20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b28:	d3f6      	bcc.n	8001b18 <CopyDataInit>
  ldr  r2, =_sbss
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b2c:	e002      	b.n	8001b34 <LoopFillZerobss>

08001b2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b30:	f842 3b04 	str.w	r3, [r2], #4

08001b34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b38:	d3f9      	bcc.n	8001b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3a:	f000 f859 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f002 f8cf 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff fddb 	bl	80016fc <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b48:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b4c:	08006924 	.word	0x08006924
  ldr  r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b54:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001b58:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001b5c:	200003d4 	.word	0x200003d4

08001b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <DWT_Init+0x38>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10e      	bne.n	8001b92 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <DWT_Init+0x38>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <DWT_Init+0x38>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <DWT_Init+0x3c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <DWT_Init+0x3c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <DWT_Init+0x3c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
    }
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000edf0 	.word	0xe000edf0
 8001ba0:	e0001000 	.word	0xe0001000

08001ba4 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <DWT_Delay+0x40>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <DWT_Delay+0x44>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <DWT_Delay+0x48>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001bc6:	bf00      	nop
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <DWT_Delay+0x40>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d8f8      	bhi.n	8001bc8 <DWT_Delay+0x24>
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e0001000 	.word	0xe0001000
 8001be8:	20000000 	.word	0x20000000
 8001bec:	431bde83 	.word	0x431bde83

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <SystemInit+0x28>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <SystemInit+0x28>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0x28>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f94d 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff fdc2 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f965 	bl	8001f4e <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f92d 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200003cc 	.word	0x200003cc

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200003cc 	.word	0x200003cc

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_Delay+0x40>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000008 	.word	0x20000008

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d004      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00c      	b.n	8001f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2205      	movs	r2, #5
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e159      	b.n	800227c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 8148 	bne.w	8002276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d00b      	beq.n	8002006 <HAL_GPIO_Init+0x5a>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffa:	2b11      	cmp	r3, #17
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b12      	cmp	r3, #18
 8002004:	d130      	bne.n	8002068 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0201 	and.w	r2, r3, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0xfc>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b12      	cmp	r3, #18
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a2 	beq.w	8002276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_GPIO_Init+0x2e4>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_GPIO_Init+0x2e4>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_GPIO_Init+0x2e4>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a51      	ldr	r2, [pc, #324]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2ec>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x202>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a47      	ldr	r2, [pc, #284]	; (800229c <HAL_GPIO_Init+0x2f0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x1fe>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_GPIO_Init+0x2f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x1fa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_GPIO_Init+0x2f8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x1f6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a44      	ldr	r2, [pc, #272]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x1f2>
 800219a:	2304      	movs	r3, #4
 800219c:	e008      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 800219e:	2307      	movs	r3, #7
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e004      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x204>
 80021ae:	2300      	movs	r3, #0
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f002 0203 	and.w	r2, r2, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4093      	lsls	r3, r2
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c0:	4934      	ldr	r1, [pc, #208]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_GPIO_Init+0x300>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f2:	4a2e      	ldr	r2, [pc, #184]	; (80022ac <HAL_GPIO_Init+0x300>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_GPIO_Init+0x300>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x300>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_GPIO_Init+0x300>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	f67f aea2 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002284:	bf00      	nop
 8002286:	3724      	adds	r7, #36	; 0x24
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40013c00 	.word	0x40013c00

080022b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022cc:	e003      	b.n	80022d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	619a      	str	r2, [r3, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	401a      	ands	r2, r3
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d104      	bne.n	8002306 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002304:	e002      	b.n	800230c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e25b      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d075      	beq.n	8002422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002336:	4ba3      	ldr	r3, [pc, #652]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b04      	cmp	r3, #4
 8002340:	d00c      	beq.n	800235c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b9d      	ldr	r3, [pc, #628]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235a:	d10b      	bne.n	8002374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4b99      	ldr	r3, [pc, #612]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d05b      	beq.n	8002420 <HAL_RCC_OscConfig+0x108>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d157      	bne.n	8002420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e236      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x74>
 800237e:	4b91      	ldr	r3, [pc, #580]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a90      	ldr	r2, [pc, #576]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xb0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x98>
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a8a      	ldr	r2, [pc, #552]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xb0>
 80023b0:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a80      	ldr	r2, [pc, #512]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fc8a 	bl	8001ce8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff fc86 	bl	8001ce8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1fb      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xc0>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fc76 	bl	8001ce8 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fc72 	bl	8001ce8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1e7      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b6c      	ldr	r3, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0xe8>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x152>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1bb      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4952      	ldr	r1, [pc, #328]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e03a      	b.n	80024f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <HAL_RCC_OscConfig+0x2b0>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7ff fc2b 	bl	8001ce8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002496:	f7ff fc27 	bl	8001ce8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e19c      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4940      	ldr	r1, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x2b0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fc0a 	bl	8001ce8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d8:	f7ff fc06 	bl	8001ce8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e17b      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d030      	beq.n	8002564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_OscConfig+0x2b4>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7ff fbea 	bl	8001ce8 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fbe6 	bl	8001ce8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e15b      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x200>
 8002536:	e015      	b.n	8002564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x2b4>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fbd3 	bl	8001ce8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002546:	f7ff fbcf 	bl	8001ce8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e144      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a0 	beq.w	80026b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_OscConfig+0x2b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d121      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_RCC_OscConfig+0x2b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_RCC_OscConfig+0x2b8>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fb95 	bl	8001ce8 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e011      	b.n	80025e6 <HAL_RCC_OscConfig+0x2ce>
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	42470000 	.word	0x42470000
 80025cc:	42470e80 	.word	0x42470e80
 80025d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7ff fb88 	bl	8001ce8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0fd      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x4d4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x2f0>
 80025fa:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a7c      	ldr	r2, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e01c      	b.n	8002642 <HAL_RCC_OscConfig+0x32a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x312>
 8002610:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a76      	ldr	r2, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a73      	ldr	r2, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x32a>
 800262a:	4b71      	ldr	r3, [pc, #452]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	4a70      	ldr	r2, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6713      	str	r3, [r2, #112]	; 0x70
 8002636:	4b6e      	ldr	r3, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a6d      	ldr	r2, [pc, #436]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d015      	beq.n	8002676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7ff fb4d 	bl	8001ce8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fb49 	bl	8001ce8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0bc      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <HAL_RCC_OscConfig+0x33a>
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fb37 	bl	8001ce8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff fb33 	bl	8001ce8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0a6      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8092 	beq.w	80027e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d05c      	beq.n	8002782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d141      	bne.n	8002754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff fb07 	bl	8001ce8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff fb03 	bl	8001ce8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e078      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	019b      	lsls	r3, r3, #6
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	3b01      	subs	r3, #1
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	4933      	ldr	r1, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_OscConfig+0x4dc>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fadc 	bl	8001ce8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff fad8 	bl	8001ce8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e04d      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x41c>
 8002752:	e045      	b.n	80027e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x4dc>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fac5 	bl	8001ce8 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7ff fac1 	bl	8001ce8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e036      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x44a>
 8002780:	e02e      	b.n	80027e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e029      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d115      	bne.n	80027dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40007000 	.word	0x40007000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470060 	.word	0x42470060

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0cc      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d90c      	bls.n	8002834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b63      	ldr	r3, [pc, #396]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	494d      	ldr	r1, [pc, #308]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d044      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e067      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4934      	ldr	r1, [pc, #208]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7ff f9fe 	bl	8001ce8 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7ff f9fa 	bl	8001ce8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e04f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d20c      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e032      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4916      	ldr	r1, [pc, #88]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800297e:	f000 f821 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002982:	4601      	mov	r1, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	fa21 f303 	lsr.w	r3, r1, r3
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f95e 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08006634 	.word	0x08006634
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d007      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x32>
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d008      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x38>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80b4 	bne.w	8002b58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029f2:	60bb      	str	r3, [r7, #8]
       break;
 80029f4:	e0b3      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f6:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029f8:	60bb      	str	r3, [r7, #8]
      break;
 80029fa:	e0b0      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04a      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a12:	4b55      	ldr	r3, [pc, #340]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	f04f 0400 	mov.w	r4, #0
 8002a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	ea03 0501 	and.w	r5, r3, r1
 8002a28:	ea04 0602 	and.w	r6, r4, r2
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	4632      	mov	r2, r6
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	0154      	lsls	r4, r2, #5
 8002a3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a3e:	014b      	lsls	r3, r1, #5
 8002a40:	4619      	mov	r1, r3
 8002a42:	4622      	mov	r2, r4
 8002a44:	1b49      	subs	r1, r1, r5
 8002a46:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f04f 0400 	mov.w	r4, #0
 8002a52:	0194      	lsls	r4, r2, #6
 8002a54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a58:	018b      	lsls	r3, r1, #6
 8002a5a:	1a5b      	subs	r3, r3, r1
 8002a5c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	00e2      	lsls	r2, r4, #3
 8002a6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a6e:	00d9      	lsls	r1, r3, #3
 8002a70:	460b      	mov	r3, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	195b      	adds	r3, r3, r5
 8002a76:	eb44 0406 	adc.w	r4, r4, r6
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	0262      	lsls	r2, r4, #9
 8002a84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a88:	0259      	lsls	r1, r3, #9
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	4621      	mov	r1, r4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	f7fe f8dc 	bl	8000c58 <__aeabi_uldivmod>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e049      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	f04f 0400 	mov.w	r4, #0
 8002ab2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	ea03 0501 	and.w	r5, r3, r1
 8002abe:	ea04 0602 	and.w	r6, r4, r2
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	0154      	lsls	r4, r2, #5
 8002ad0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ad4:	014b      	lsls	r3, r1, #5
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4622      	mov	r2, r4
 8002ada:	1b49      	subs	r1, r1, r5
 8002adc:	eb62 0206 	sbc.w	r2, r2, r6
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	f04f 0400 	mov.w	r4, #0
 8002ae8:	0194      	lsls	r4, r2, #6
 8002aea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aee:	018b      	lsls	r3, r1, #6
 8002af0:	1a5b      	subs	r3, r3, r1
 8002af2:	eb64 0402 	sbc.w	r4, r4, r2
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	00e2      	lsls	r2, r4, #3
 8002b00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b04:	00d9      	lsls	r1, r3, #3
 8002b06:	460b      	mov	r3, r1
 8002b08:	4614      	mov	r4, r2
 8002b0a:	195b      	adds	r3, r3, r5
 8002b0c:	eb44 0406 	adc.w	r4, r4, r6
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	02a2      	lsls	r2, r4, #10
 8002b1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b1e:	0299      	lsls	r1, r3, #10
 8002b20:	460b      	mov	r3, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	4621      	mov	r1, r4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4623      	mov	r3, r4
 8002b32:	f7fe f891 	bl	8000c58 <__aeabi_uldivmod>
 8002b36:	4603      	mov	r3, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	60bb      	str	r3, [r7, #8]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b5a:	60bb      	str	r3, [r7, #8]
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b94:	4601      	mov	r1, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0a9b      	lsrs	r3, r3, #10
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08006644 	.word	0x08006644

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bb8:	f7ff ffdc 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0b5b      	lsrs	r3, r3, #13
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08006644 	.word	0x08006644

08002bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e056      	b.n	8002c9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fe fe0d 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0104 	and.w	r1, r3, #4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e18a      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x33c>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd2:	f7ff f809 	bl	8001ce8 <HAL_GetTick>
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00f      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x70>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfa:	d107      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x68>
 8002d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d003      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d12:	e15b      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_SPI_TransmitReceive+0x82>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_TransmitReceive+0x82>
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d2c:	e14e      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d003      	beq.n	8002d42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	887a      	ldrh	r2, [r7, #2]
 8002d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	887a      	ldrh	r2, [r7, #2]
 8002d6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d007      	beq.n	8002d96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9e:	d178      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x10a>
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d166      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd2:	e053      	b.n	8002e7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11b      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x176>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x176>
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d113      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d119      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x1b8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e5c:	f7fe ff44 	bl	8001ce8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d807      	bhi.n	8002e7c <HAL_SPI_TransmitReceive+0x1d8>
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d003      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e7a:	e0a7      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1a6      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x130>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1a1      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x130>
 8002e90:	e07c      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x1fc>
 8002e9a:	8b7b      	ldrh	r3, [r7, #26]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d16b      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec6:	e057      	b.n	8002f78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11c      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x26c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x26c>
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d114      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d119      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x2ae>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d014      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f52:	f7fe fec9 	bl	8001ce8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d803      	bhi.n	8002f6a <HAL_SPI_TransmitReceive+0x2c6>
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x2cc>
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f76:	e029      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1a2      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x224>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d19d      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9b1 	bl	80032f8 <SPI_EndRxTxTransaction>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fa8:	e010      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	e000      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3730      	adds	r7, #48	; 0x30
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10f      	bne.n	800302c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
    return;
 800302a:	e0d8      	b.n	80031de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_SPI_IRQHandler+0x66>
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	09db      	lsrs	r3, r3, #7
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    return;
 800304c:	e0c7      	b.n	80031de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_SPI_IRQHandler+0x8c>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80b5 	beq.w	80031de <HAL_SPI_IRQHandler+0x1f6>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80ae 	beq.w	80031de <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d023      	beq.n	80030d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d011      	beq.n	80030be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f043 0204 	orr.w	r2, r3, #4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	e00b      	b.n	80030d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
        return;
 80030d4:	e083      	b.n	80031de <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d014      	beq.n	800310c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0208 	orr.w	r2, r3, #8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	2b00      	cmp	r3, #0
 8003138:	d050      	beq.n	80031dc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003148:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_SPI_IRQHandler+0x17e>
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d034      	beq.n	80031d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0203 	bic.w	r2, r2, #3
 8003174:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_SPI_IRQHandler+0x1fc>)
 8003184:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe feeb 	bl	8001f66 <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ae:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_SPI_IRQHandler+0x1fc>)
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fed5 	bl	8001f66 <HAL_DMA_Abort_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80031ce:	e003      	b.n	80031d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f809 	bl	80031e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031d6:	e000      	b.n	80031da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80031d8:	bf00      	nop
    return;
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
  }
}
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	080031fd 	.word	0x080031fd

080031e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ffe6 	bl	80031e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003234:	e04c      	b.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d048      	beq.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800323e:	f7fe fd53 	bl	8001ce8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d902      	bls.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x30>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13d      	bne.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003262:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326c:	d111      	bne.n	8003292 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	d004      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d107      	bne.n	8003292 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003290:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329a:	d10f      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e00f      	b.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d1a3      	bne.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <SPI_EndRxTxTransaction+0x7c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <SPI_EndRxTxTransaction+0x80>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0d5b      	lsrs	r3, r3, #21
 8003310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003322:	d112      	bne.n	800334a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2200      	movs	r2, #0
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff ff78 	bl	8003224 <SPI_WaitFlagStateUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d0f2      	beq.n	800334a <SPI_EndRxTxTransaction+0x52>
 8003364:	e000      	b.n	8003368 <SPI_EndRxTxTransaction+0x70>
        break;
 8003366:	bf00      	nop
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	165e9f81 	.word	0x165e9f81

0800337c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e03f      	b.n	800340e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fa90 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f90b 	bl	80035dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b088      	sub	sp, #32
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 8083 	bne.w	800353e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Transmit+0x2e>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e07b      	b.n	8003540 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_UART_Transmit+0x40>
 8003452:	2302      	movs	r3, #2
 8003454:	e074      	b.n	8003540 <HAL_UART_Transmit+0x12a>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800346c:	f7fe fc3c 	bl	8001ce8 <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003486:	e042      	b.n	800350e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d122      	bne.n	80034e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f84c 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e042      	b.n	8003540 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3302      	adds	r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e017      	b.n	800350e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	e013      	b.n	800350e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f829 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e01f      	b.n	8003540 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	60ba      	str	r2, [r7, #8]
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1b7      	bne.n	8003488 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f810 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e006      	b.n	8003540 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003558:	e02c      	b.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d028      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0x30>
 8003568:	f7fe fbbe 	bl	8001ce8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d21d      	bcs.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003586:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e00f      	b.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d0c3      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800361e:	f023 030c 	bic.w	r3, r3, #12
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	430b      	orrs	r3, r1
 800362a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364a:	f040 818b 	bne.w	8003964 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4ac1      	ldr	r2, [pc, #772]	; (8003958 <UART_SetConfig+0x37c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0x88>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4abf      	ldr	r2, [pc, #764]	; (800395c <UART_SetConfig+0x380>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f040 80bd 	bne.w	80037de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7ff faa6 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003668:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	461d      	mov	r5, r3
 800366e:	f04f 0600 	mov.w	r6, #0
 8003672:	46a8      	mov	r8, r5
 8003674:	46b1      	mov	r9, r6
 8003676:	eb18 0308 	adds.w	r3, r8, r8
 800367a:	eb49 0409 	adc.w	r4, r9, r9
 800367e:	4698      	mov	r8, r3
 8003680:	46a1      	mov	r9, r4
 8003682:	eb18 0805 	adds.w	r8, r8, r5
 8003686:	eb49 0906 	adc.w	r9, r9, r6
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003696:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800369a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800369e:	4688      	mov	r8, r1
 80036a0:	4691      	mov	r9, r2
 80036a2:	eb18 0005 	adds.w	r0, r8, r5
 80036a6:	eb49 0106 	adc.w	r1, r9, r6
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	461d      	mov	r5, r3
 80036b0:	f04f 0600 	mov.w	r6, #0
 80036b4:	196b      	adds	r3, r5, r5
 80036b6:	eb46 0406 	adc.w	r4, r6, r6
 80036ba:	461a      	mov	r2, r3
 80036bc:	4623      	mov	r3, r4
 80036be:	f7fd facb 	bl	8000c58 <__aeabi_uldivmod>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	461a      	mov	r2, r3
 80036c8:	4ba5      	ldr	r3, [pc, #660]	; (8003960 <UART_SetConfig+0x384>)
 80036ca:	fba3 2302 	umull	r2, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	461d      	mov	r5, r3
 80036d8:	f04f 0600 	mov.w	r6, #0
 80036dc:	46a9      	mov	r9, r5
 80036de:	46b2      	mov	sl, r6
 80036e0:	eb19 0309 	adds.w	r3, r9, r9
 80036e4:	eb4a 040a 	adc.w	r4, sl, sl
 80036e8:	4699      	mov	r9, r3
 80036ea:	46a2      	mov	sl, r4
 80036ec:	eb19 0905 	adds.w	r9, r9, r5
 80036f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003708:	4689      	mov	r9, r1
 800370a:	4692      	mov	sl, r2
 800370c:	eb19 0005 	adds.w	r0, r9, r5
 8003710:	eb4a 0106 	adc.w	r1, sl, r6
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	461d      	mov	r5, r3
 800371a:	f04f 0600 	mov.w	r6, #0
 800371e:	196b      	adds	r3, r5, r5
 8003720:	eb46 0406 	adc.w	r4, r6, r6
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	f7fd fa96 	bl	8000c58 <__aeabi_uldivmod>
 800372c:	4603      	mov	r3, r0
 800372e:	460c      	mov	r4, r1
 8003730:	461a      	mov	r2, r3
 8003732:	4b8b      	ldr	r3, [pc, #556]	; (8003960 <UART_SetConfig+0x384>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a86      	ldr	r2, [pc, #536]	; (8003960 <UART_SetConfig+0x384>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003754:	4498      	add	r8, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	461d      	mov	r5, r3
 800375a:	f04f 0600 	mov.w	r6, #0
 800375e:	46a9      	mov	r9, r5
 8003760:	46b2      	mov	sl, r6
 8003762:	eb19 0309 	adds.w	r3, r9, r9
 8003766:	eb4a 040a 	adc.w	r4, sl, sl
 800376a:	4699      	mov	r9, r3
 800376c:	46a2      	mov	sl, r4
 800376e:	eb19 0905 	adds.w	r9, r9, r5
 8003772:	eb4a 0a06 	adc.w	sl, sl, r6
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003782:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003786:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800378a:	4689      	mov	r9, r1
 800378c:	4692      	mov	sl, r2
 800378e:	eb19 0005 	adds.w	r0, r9, r5
 8003792:	eb4a 0106 	adc.w	r1, sl, r6
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	461d      	mov	r5, r3
 800379c:	f04f 0600 	mov.w	r6, #0
 80037a0:	196b      	adds	r3, r5, r5
 80037a2:	eb46 0406 	adc.w	r4, r6, r6
 80037a6:	461a      	mov	r2, r3
 80037a8:	4623      	mov	r3, r4
 80037aa:	f7fd fa55 	bl	8000c58 <__aeabi_uldivmod>
 80037ae:	4603      	mov	r3, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <UART_SetConfig+0x384>)
 80037b6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2164      	movs	r1, #100	; 0x64
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	3332      	adds	r3, #50	; 0x32
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <UART_SetConfig+0x384>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 0207 	and.w	r2, r3, #7
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4442      	add	r2, r8
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e26f      	b.n	8003cbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7ff f9d5 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 80037e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	461d      	mov	r5, r3
 80037e8:	f04f 0600 	mov.w	r6, #0
 80037ec:	46a8      	mov	r8, r5
 80037ee:	46b1      	mov	r9, r6
 80037f0:	eb18 0308 	adds.w	r3, r8, r8
 80037f4:	eb49 0409 	adc.w	r4, r9, r9
 80037f8:	4698      	mov	r8, r3
 80037fa:	46a1      	mov	r9, r4
 80037fc:	eb18 0805 	adds.w	r8, r8, r5
 8003800:	eb49 0906 	adc.w	r9, r9, r6
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003810:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003814:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003818:	4688      	mov	r8, r1
 800381a:	4691      	mov	r9, r2
 800381c:	eb18 0005 	adds.w	r0, r8, r5
 8003820:	eb49 0106 	adc.w	r1, r9, r6
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	461d      	mov	r5, r3
 800382a:	f04f 0600 	mov.w	r6, #0
 800382e:	196b      	adds	r3, r5, r5
 8003830:	eb46 0406 	adc.w	r4, r6, r6
 8003834:	461a      	mov	r2, r3
 8003836:	4623      	mov	r3, r4
 8003838:	f7fd fa0e 	bl	8000c58 <__aeabi_uldivmod>
 800383c:	4603      	mov	r3, r0
 800383e:	460c      	mov	r4, r1
 8003840:	461a      	mov	r2, r3
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <UART_SetConfig+0x384>)
 8003844:	fba3 2302 	umull	r2, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	461d      	mov	r5, r3
 8003852:	f04f 0600 	mov.w	r6, #0
 8003856:	46a9      	mov	r9, r5
 8003858:	46b2      	mov	sl, r6
 800385a:	eb19 0309 	adds.w	r3, r9, r9
 800385e:	eb4a 040a 	adc.w	r4, sl, sl
 8003862:	4699      	mov	r9, r3
 8003864:	46a2      	mov	sl, r4
 8003866:	eb19 0905 	adds.w	r9, r9, r5
 800386a:	eb4a 0a06 	adc.w	sl, sl, r6
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800387a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800387e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003882:	4689      	mov	r9, r1
 8003884:	4692      	mov	sl, r2
 8003886:	eb19 0005 	adds.w	r0, r9, r5
 800388a:	eb4a 0106 	adc.w	r1, sl, r6
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	461d      	mov	r5, r3
 8003894:	f04f 0600 	mov.w	r6, #0
 8003898:	196b      	adds	r3, r5, r5
 800389a:	eb46 0406 	adc.w	r4, r6, r6
 800389e:	461a      	mov	r2, r3
 80038a0:	4623      	mov	r3, r4
 80038a2:	f7fd f9d9 	bl	8000c58 <__aeabi_uldivmod>
 80038a6:	4603      	mov	r3, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <UART_SetConfig+0x384>)
 80038ae:	fba3 1302 	umull	r1, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2164      	movs	r1, #100	; 0x64
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	3332      	adds	r3, #50	; 0x32
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <UART_SetConfig+0x384>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038ce:	4498      	add	r8, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	461d      	mov	r5, r3
 80038d4:	f04f 0600 	mov.w	r6, #0
 80038d8:	46a9      	mov	r9, r5
 80038da:	46b2      	mov	sl, r6
 80038dc:	eb19 0309 	adds.w	r3, r9, r9
 80038e0:	eb4a 040a 	adc.w	r4, sl, sl
 80038e4:	4699      	mov	r9, r3
 80038e6:	46a2      	mov	sl, r4
 80038e8:	eb19 0905 	adds.w	r9, r9, r5
 80038ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003900:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003904:	4689      	mov	r9, r1
 8003906:	4692      	mov	sl, r2
 8003908:	eb19 0005 	adds.w	r0, r9, r5
 800390c:	eb4a 0106 	adc.w	r1, sl, r6
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	461d      	mov	r5, r3
 8003916:	f04f 0600 	mov.w	r6, #0
 800391a:	196b      	adds	r3, r5, r5
 800391c:	eb46 0406 	adc.w	r4, r6, r6
 8003920:	461a      	mov	r2, r3
 8003922:	4623      	mov	r3, r4
 8003924:	f7fd f998 	bl	8000c58 <__aeabi_uldivmod>
 8003928:	4603      	mov	r3, r0
 800392a:	460c      	mov	r4, r1
 800392c:	461a      	mov	r2, r3
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <UART_SetConfig+0x384>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2164      	movs	r1, #100	; 0x64
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <UART_SetConfig+0x384>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 0207 	and.w	r2, r3, #7
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4442      	add	r2, r8
 8003954:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003956:	e1b2      	b.n	8003cbe <UART_SetConfig+0x6e2>
 8003958:	40011000 	.word	0x40011000
 800395c:	40011400 	.word	0x40011400
 8003960:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4ad7      	ldr	r2, [pc, #860]	; (8003cc8 <UART_SetConfig+0x6ec>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d005      	beq.n	800397a <UART_SetConfig+0x39e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4ad6      	ldr	r2, [pc, #856]	; (8003ccc <UART_SetConfig+0x6f0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	f040 80d1 	bne.w	8003b1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800397a:	f7ff f91b 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 800397e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	469a      	mov	sl, r3
 8003984:	f04f 0b00 	mov.w	fp, #0
 8003988:	46d0      	mov	r8, sl
 800398a:	46d9      	mov	r9, fp
 800398c:	eb18 0308 	adds.w	r3, r8, r8
 8003990:	eb49 0409 	adc.w	r4, r9, r9
 8003994:	4698      	mov	r8, r3
 8003996:	46a1      	mov	r9, r4
 8003998:	eb18 080a 	adds.w	r8, r8, sl
 800399c:	eb49 090b 	adc.w	r9, r9, fp
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039b4:	4688      	mov	r8, r1
 80039b6:	4691      	mov	r9, r2
 80039b8:	eb1a 0508 	adds.w	r5, sl, r8
 80039bc:	eb4b 0609 	adc.w	r6, fp, r9
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f04f 0400 	mov.w	r4, #0
 80039d2:	0094      	lsls	r4, r2, #2
 80039d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039d8:	008b      	lsls	r3, r1, #2
 80039da:	461a      	mov	r2, r3
 80039dc:	4623      	mov	r3, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	4631      	mov	r1, r6
 80039e2:	f7fd f939 	bl	8000c58 <__aeabi_uldivmod>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	461a      	mov	r2, r3
 80039ec:	4bb8      	ldr	r3, [pc, #736]	; (8003cd0 <UART_SetConfig+0x6f4>)
 80039ee:	fba3 2302 	umull	r2, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	469b      	mov	fp, r3
 80039fc:	f04f 0c00 	mov.w	ip, #0
 8003a00:	46d9      	mov	r9, fp
 8003a02:	46e2      	mov	sl, ip
 8003a04:	eb19 0309 	adds.w	r3, r9, r9
 8003a08:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	46a2      	mov	sl, r4
 8003a10:	eb19 090b 	adds.w	r9, r9, fp
 8003a14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2c:	4689      	mov	r9, r1
 8003a2e:	4692      	mov	sl, r2
 8003a30:	eb1b 0509 	adds.w	r5, fp, r9
 8003a34:	eb4c 060a 	adc.w	r6, ip, sl
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0094      	lsls	r4, r2, #2
 8003a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a50:	008b      	lsls	r3, r1, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	4631      	mov	r1, r6
 8003a5a:	f7fd f8fd 	bl	8000c58 <__aeabi_uldivmod>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b9a      	ldr	r3, [pc, #616]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003a66:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2164      	movs	r1, #100	; 0x64
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	; 0x32
 8003a78:	4a95      	ldr	r2, [pc, #596]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a84:	4498      	add	r8, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	469b      	mov	fp, r3
 8003a8a:	f04f 0c00 	mov.w	ip, #0
 8003a8e:	46d9      	mov	r9, fp
 8003a90:	46e2      	mov	sl, ip
 8003a92:	eb19 0309 	adds.w	r3, r9, r9
 8003a96:	eb4a 040a 	adc.w	r4, sl, sl
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	46a2      	mov	sl, r4
 8003a9e:	eb19 090b 	adds.w	r9, r9, fp
 8003aa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aba:	4689      	mov	r9, r1
 8003abc:	4692      	mov	sl, r2
 8003abe:	eb1b 0509 	adds.w	r5, fp, r9
 8003ac2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4619      	mov	r1, r3
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	f04f 0400 	mov.w	r4, #0
 8003ad8:	0094      	lsls	r4, r2, #2
 8003ada:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ade:	008b      	lsls	r3, r1, #2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	f7fd f8b6 	bl	8000c58 <__aeabi_uldivmod>
 8003aec:	4603      	mov	r3, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003af4:	fba3 1302 	umull	r1, r3, r3, r2
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	2164      	movs	r1, #100	; 0x64
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	3332      	adds	r3, #50	; 0x32
 8003b06:	4a72      	ldr	r2, [pc, #456]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4442      	add	r2, r8
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	e0d0      	b.n	8003cbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff f836 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003b20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	469a      	mov	sl, r3
 8003b26:	f04f 0b00 	mov.w	fp, #0
 8003b2a:	46d0      	mov	r8, sl
 8003b2c:	46d9      	mov	r9, fp
 8003b2e:	eb18 0308 	adds.w	r3, r8, r8
 8003b32:	eb49 0409 	adc.w	r4, r9, r9
 8003b36:	4698      	mov	r8, r3
 8003b38:	46a1      	mov	r9, r4
 8003b3a:	eb18 080a 	adds.w	r8, r8, sl
 8003b3e:	eb49 090b 	adc.w	r9, r9, fp
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b56:	4688      	mov	r8, r1
 8003b58:	4691      	mov	r9, r2
 8003b5a:	eb1a 0508 	adds.w	r5, sl, r8
 8003b5e:	eb4b 0609 	adc.w	r6, fp, r9
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4619      	mov	r1, r3
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	0094      	lsls	r4, r2, #2
 8003b76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	4628      	mov	r0, r5
 8003b82:	4631      	mov	r1, r6
 8003b84:	f7fd f868 	bl	8000c58 <__aeabi_uldivmod>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003b90:	fba3 2302 	umull	r2, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	469b      	mov	fp, r3
 8003b9e:	f04f 0c00 	mov.w	ip, #0
 8003ba2:	46d9      	mov	r9, fp
 8003ba4:	46e2      	mov	sl, ip
 8003ba6:	eb19 0309 	adds.w	r3, r9, r9
 8003baa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bae:	4699      	mov	r9, r3
 8003bb0:	46a2      	mov	sl, r4
 8003bb2:	eb19 090b 	adds.w	r9, r9, fp
 8003bb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bce:	4689      	mov	r9, r1
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	eb1b 0509 	adds.w	r5, fp, r9
 8003bd6:	eb4c 060a 	adc.w	r6, ip, sl
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	0094      	lsls	r4, r2, #2
 8003bee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	f7fd f82c 	bl	8000c58 <__aeabi_uldivmod>
 8003c00:	4603      	mov	r3, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003c08:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	2164      	movs	r1, #100	; 0x64
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	3332      	adds	r3, #50	; 0x32
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c26:	4498      	add	r8, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	469b      	mov	fp, r3
 8003c2c:	f04f 0c00 	mov.w	ip, #0
 8003c30:	46d9      	mov	r9, fp
 8003c32:	46e2      	mov	sl, ip
 8003c34:	eb19 0309 	adds.w	r3, r9, r9
 8003c38:	eb4a 040a 	adc.w	r4, sl, sl
 8003c3c:	4699      	mov	r9, r3
 8003c3e:	46a2      	mov	sl, r4
 8003c40:	eb19 090b 	adds.w	r9, r9, fp
 8003c44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c5c:	4689      	mov	r9, r1
 8003c5e:	4692      	mov	sl, r2
 8003c60:	eb1b 0509 	adds.w	r5, fp, r9
 8003c64:	eb4c 060a 	adc.w	r6, ip, sl
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	0094      	lsls	r4, r2, #2
 8003c7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c80:	008b      	lsls	r3, r1, #2
 8003c82:	461a      	mov	r2, r3
 8003c84:	4623      	mov	r3, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	4631      	mov	r1, r6
 8003c8a:	f7fc ffe5 	bl	8000c58 <__aeabi_uldivmod>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	460c      	mov	r4, r1
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003c96:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2164      	movs	r1, #100	; 0x64
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	3332      	adds	r3, #50	; 0x32
 8003ca8:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <UART_SetConfig+0x6f4>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4442      	add	r2, r8
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	e7ff      	b.n	8003cbe <UART_SetConfig+0x6e2>
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <__errno>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <__errno+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4e0d      	ldr	r6, [pc, #52]	; (8003d18 <__libc_init_array+0x38>)
 8003ce4:	4c0d      	ldr	r4, [pc, #52]	; (8003d1c <__libc_init_array+0x3c>)
 8003ce6:	1ba4      	subs	r4, r4, r6
 8003ce8:	10a4      	asrs	r4, r4, #2
 8003cea:	2500      	movs	r5, #0
 8003cec:	42a5      	cmp	r5, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4e0b      	ldr	r6, [pc, #44]	; (8003d20 <__libc_init_array+0x40>)
 8003cf2:	4c0c      	ldr	r4, [pc, #48]	; (8003d24 <__libc_init_array+0x44>)
 8003cf4:	f002 fbf6 	bl	80064e4 <_init>
 8003cf8:	1ba4      	subs	r4, r4, r6
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	2500      	movs	r5, #0
 8003cfe:	42a5      	cmp	r5, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d08:	4798      	blx	r3
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d12:	4798      	blx	r3
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08006918 	.word	0x08006918
 8003d1c:	08006918 	.word	0x08006918
 8003d20:	08006918 	.word	0x08006918
 8003d24:	08006920 	.word	0x08006920

08003d28 <memcpy>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	1e43      	subs	r3, r0, #1
 8003d2c:	440a      	add	r2, r1
 8003d2e:	4291      	cmp	r1, r2
 8003d30:	d100      	bne.n	8003d34 <memcpy+0xc>
 8003d32:	bd10      	pop	{r4, pc}
 8003d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d3c:	e7f7      	b.n	8003d2e <memcpy+0x6>

08003d3e <memset>:
 8003d3e:	4402      	add	r2, r0
 8003d40:	4603      	mov	r3, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d100      	bne.n	8003d48 <memset+0xa>
 8003d46:	4770      	bx	lr
 8003d48:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4c:	e7f9      	b.n	8003d42 <memset+0x4>

08003d4e <__cvt>:
 8003d4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d52:	ec55 4b10 	vmov	r4, r5, d0
 8003d56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	460e      	mov	r6, r1
 8003d60:	4691      	mov	r9, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	bfb8      	it	lt
 8003d66:	4622      	movlt	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f027 0720 	bic.w	r7, r7, #32
 8003d6e:	bfbb      	ittet	lt
 8003d70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d74:	461d      	movlt	r5, r3
 8003d76:	2300      	movge	r3, #0
 8003d78:	232d      	movlt	r3, #45	; 0x2d
 8003d7a:	bfb8      	it	lt
 8003d7c:	4614      	movlt	r4, r2
 8003d7e:	2f46      	cmp	r7, #70	; 0x46
 8003d80:	700b      	strb	r3, [r1, #0]
 8003d82:	d004      	beq.n	8003d8e <__cvt+0x40>
 8003d84:	2f45      	cmp	r7, #69	; 0x45
 8003d86:	d100      	bne.n	8003d8a <__cvt+0x3c>
 8003d88:	3601      	adds	r6, #1
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	e000      	b.n	8003d90 <__cvt+0x42>
 8003d8e:	2103      	movs	r1, #3
 8003d90:	ab03      	add	r3, sp, #12
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	ab02      	add	r3, sp, #8
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4653      	mov	r3, sl
 8003d9c:	ec45 4b10 	vmov	d0, r4, r5
 8003da0:	f000 fe0e 	bl	80049c0 <_dtoa_r>
 8003da4:	2f47      	cmp	r7, #71	; 0x47
 8003da6:	4680      	mov	r8, r0
 8003da8:	d102      	bne.n	8003db0 <__cvt+0x62>
 8003daa:	f019 0f01 	tst.w	r9, #1
 8003dae:	d026      	beq.n	8003dfe <__cvt+0xb0>
 8003db0:	2f46      	cmp	r7, #70	; 0x46
 8003db2:	eb08 0906 	add.w	r9, r8, r6
 8003db6:	d111      	bne.n	8003ddc <__cvt+0x8e>
 8003db8:	f898 3000 	ldrb.w	r3, [r8]
 8003dbc:	2b30      	cmp	r3, #48	; 0x30
 8003dbe:	d10a      	bne.n	8003dd6 <__cvt+0x88>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	f7fc fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dcc:	b918      	cbnz	r0, 8003dd6 <__cvt+0x88>
 8003dce:	f1c6 0601 	rsb	r6, r6, #1
 8003dd2:	f8ca 6000 	str.w	r6, [sl]
 8003dd6:	f8da 3000 	ldr.w	r3, [sl]
 8003dda:	4499      	add	r9, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	4620      	mov	r0, r4
 8003de2:	4629      	mov	r1, r5
 8003de4:	f7fc fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8003de8:	b938      	cbnz	r0, 8003dfa <__cvt+0xac>
 8003dea:	2230      	movs	r2, #48	; 0x30
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	454b      	cmp	r3, r9
 8003df0:	d205      	bcs.n	8003dfe <__cvt+0xb0>
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	9103      	str	r1, [sp, #12]
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e7f8      	b.n	8003dec <__cvt+0x9e>
 8003dfa:	f8cd 900c 	str.w	r9, [sp, #12]
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e02:	eba3 0308 	sub.w	r3, r3, r8
 8003e06:	4640      	mov	r0, r8
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	b004      	add	sp, #16
 8003e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e10 <__exponent>:
 8003e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e12:	2900      	cmp	r1, #0
 8003e14:	4604      	mov	r4, r0
 8003e16:	bfba      	itte	lt
 8003e18:	4249      	neglt	r1, r1
 8003e1a:	232d      	movlt	r3, #45	; 0x2d
 8003e1c:	232b      	movge	r3, #43	; 0x2b
 8003e1e:	2909      	cmp	r1, #9
 8003e20:	f804 2b02 	strb.w	r2, [r4], #2
 8003e24:	7043      	strb	r3, [r0, #1]
 8003e26:	dd20      	ble.n	8003e6a <__exponent+0x5a>
 8003e28:	f10d 0307 	add.w	r3, sp, #7
 8003e2c:	461f      	mov	r7, r3
 8003e2e:	260a      	movs	r6, #10
 8003e30:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e34:	fb06 1115 	mls	r1, r6, r5, r1
 8003e38:	3130      	adds	r1, #48	; 0x30
 8003e3a:	2d09      	cmp	r5, #9
 8003e3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e40:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e44:	4629      	mov	r1, r5
 8003e46:	dc09      	bgt.n	8003e5c <__exponent+0x4c>
 8003e48:	3130      	adds	r1, #48	; 0x30
 8003e4a:	3b02      	subs	r3, #2
 8003e4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e50:	42bb      	cmp	r3, r7
 8003e52:	4622      	mov	r2, r4
 8003e54:	d304      	bcc.n	8003e60 <__exponent+0x50>
 8003e56:	1a10      	subs	r0, r2, r0
 8003e58:	b003      	add	sp, #12
 8003e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	e7e7      	b.n	8003e30 <__exponent+0x20>
 8003e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e64:	f804 2b01 	strb.w	r2, [r4], #1
 8003e68:	e7f2      	b.n	8003e50 <__exponent+0x40>
 8003e6a:	2330      	movs	r3, #48	; 0x30
 8003e6c:	4419      	add	r1, r3
 8003e6e:	7083      	strb	r3, [r0, #2]
 8003e70:	1d02      	adds	r2, r0, #4
 8003e72:	70c1      	strb	r1, [r0, #3]
 8003e74:	e7ef      	b.n	8003e56 <__exponent+0x46>
	...

08003e78 <_printf_float>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	b08d      	sub	sp, #52	; 0x34
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003e84:	4616      	mov	r6, r2
 8003e86:	461f      	mov	r7, r3
 8003e88:	4605      	mov	r5, r0
 8003e8a:	f001 fccb 	bl	8005824 <_localeconv_r>
 8003e8e:	6803      	ldr	r3, [r0, #0]
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc f9a4 	bl	80001e0 <strlen>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea0:	9005      	str	r0, [sp, #20]
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8003eb4:	f8c8 2000 	str.w	r2, [r8]
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ec0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ec4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed2:	4ba7      	ldr	r3, [pc, #668]	; (8004170 <_printf_float+0x2f8>)
 8003ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ed8:	f7fc fe30 	bl	8000b3c <__aeabi_dcmpun>
 8003edc:	bb70      	cbnz	r0, 8003f3c <_printf_float+0xc4>
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4ba3      	ldr	r3, [pc, #652]	; (8004170 <_printf_float+0x2f8>)
 8003ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ee8:	f7fc fe0a 	bl	8000b00 <__aeabi_dcmple>
 8003eec:	bb30      	cbnz	r0, 8003f3c <_printf_float+0xc4>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	f7fc fdf9 	bl	8000aec <__aeabi_dcmplt>
 8003efa:	b110      	cbz	r0, 8003f02 <_printf_float+0x8a>
 8003efc:	232d      	movs	r3, #45	; 0x2d
 8003efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f02:	4a9c      	ldr	r2, [pc, #624]	; (8004174 <_printf_float+0x2fc>)
 8003f04:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <_printf_float+0x300>)
 8003f06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f0a:	bf8c      	ite	hi
 8003f0c:	4690      	movhi	r8, r2
 8003f0e:	4698      	movls	r8, r3
 8003f10:	2303      	movs	r3, #3
 8003f12:	f02b 0204 	bic.w	r2, fp, #4
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	6022      	str	r2, [r4, #0]
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	9700      	str	r7, [sp, #0]
 8003f20:	4633      	mov	r3, r6
 8003f22:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f24:	4621      	mov	r1, r4
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 f9e6 	bl	80042f8 <_printf_common>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	f040 808d 	bne.w	800404c <_printf_float+0x1d4>
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	b00d      	add	sp, #52	; 0x34
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4640      	mov	r0, r8
 8003f42:	4649      	mov	r1, r9
 8003f44:	f7fc fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8003f48:	b110      	cbz	r0, 8003f50 <_printf_float+0xd8>
 8003f4a:	4a8c      	ldr	r2, [pc, #560]	; (800417c <_printf_float+0x304>)
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	; (8004180 <_printf_float+0x308>)
 8003f4e:	e7da      	b.n	8003f06 <_printf_float+0x8e>
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	1c4b      	adds	r3, r1, #1
 8003f54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003f58:	a80a      	add	r0, sp, #40	; 0x28
 8003f5a:	d13e      	bne.n	8003fda <_printf_float+0x162>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	2300      	movs	r3, #0
 8003f62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003f66:	ab09      	add	r3, sp, #36	; 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	ec49 8b10 	vmov	d0, r8, r9
 8003f6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f72:	6022      	str	r2, [r4, #0]
 8003f74:	f8cd a004 	str.w	sl, [sp, #4]
 8003f78:	6861      	ldr	r1, [r4, #4]
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7ff fee7 	bl	8003d4e <__cvt>
 8003f80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003f84:	2b47      	cmp	r3, #71	; 0x47
 8003f86:	4680      	mov	r8, r0
 8003f88:	d109      	bne.n	8003f9e <_printf_float+0x126>
 8003f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8c:	1cd8      	adds	r0, r3, #3
 8003f8e:	db02      	blt.n	8003f96 <_printf_float+0x11e>
 8003f90:	6862      	ldr	r2, [r4, #4]
 8003f92:	4293      	cmp	r3, r2
 8003f94:	dd47      	ble.n	8004026 <_printf_float+0x1ae>
 8003f96:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003f9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fa4:	d824      	bhi.n	8003ff0 <_printf_float+0x178>
 8003fa6:	3901      	subs	r1, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fae:	9109      	str	r1, [sp, #36]	; 0x24
 8003fb0:	f7ff ff2e 	bl	8003e10 <__exponent>
 8003fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fb6:	1813      	adds	r3, r2, r0
 8003fb8:	2a01      	cmp	r2, #1
 8003fba:	4681      	mov	r9, r0
 8003fbc:	6123      	str	r3, [r4, #16]
 8003fbe:	dc02      	bgt.n	8003fc6 <_printf_float+0x14e>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	07d1      	lsls	r1, r2, #31
 8003fc4:	d501      	bpl.n	8003fca <_printf_float+0x152>
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0a5      	beq.n	8003f1e <_printf_float+0xa6>
 8003fd2:	232d      	movs	r3, #45	; 0x2d
 8003fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd8:	e7a1      	b.n	8003f1e <_printf_float+0xa6>
 8003fda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003fde:	f000 8177 	beq.w	80042d0 <_printf_float+0x458>
 8003fe2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003fe6:	d1bb      	bne.n	8003f60 <_printf_float+0xe8>
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d1b9      	bne.n	8003f60 <_printf_float+0xe8>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e7b6      	b.n	8003f5e <_printf_float+0xe6>
 8003ff0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003ff4:	d119      	bne.n	800402a <_printf_float+0x1b2>
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	dd0c      	ble.n	8004016 <_printf_float+0x19e>
 8003ffc:	6121      	str	r1, [r4, #16]
 8003ffe:	b913      	cbnz	r3, 8004006 <_printf_float+0x18e>
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	07d2      	lsls	r2, r2, #31
 8004004:	d502      	bpl.n	800400c <_printf_float+0x194>
 8004006:	3301      	adds	r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004010:	f04f 0900 	mov.w	r9, #0
 8004014:	e7d9      	b.n	8003fca <_printf_float+0x152>
 8004016:	b913      	cbnz	r3, 800401e <_printf_float+0x1a6>
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	07d0      	lsls	r0, r2, #31
 800401c:	d501      	bpl.n	8004022 <_printf_float+0x1aa>
 800401e:	3302      	adds	r3, #2
 8004020:	e7f3      	b.n	800400a <_printf_float+0x192>
 8004022:	2301      	movs	r3, #1
 8004024:	e7f1      	b.n	800400a <_printf_float+0x192>
 8004026:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800402a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800402e:	4293      	cmp	r3, r2
 8004030:	db05      	blt.n	800403e <_printf_float+0x1c6>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	07d1      	lsls	r1, r2, #31
 8004038:	d5e8      	bpl.n	800400c <_printf_float+0x194>
 800403a:	3301      	adds	r3, #1
 800403c:	e7e5      	b.n	800400a <_printf_float+0x192>
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfd4      	ite	le
 8004042:	f1c3 0302 	rsble	r3, r3, #2
 8004046:	2301      	movgt	r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	e7de      	b.n	800400a <_printf_float+0x192>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	055a      	lsls	r2, r3, #21
 8004050:	d407      	bmi.n	8004062 <_printf_float+0x1ea>
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	4642      	mov	r2, r8
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	d12b      	bne.n	80040b8 <_printf_float+0x240>
 8004060:	e767      	b.n	8003f32 <_printf_float+0xba>
 8004062:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004066:	f240 80dc 	bls.w	8004222 <_printf_float+0x3aa>
 800406a:	2200      	movs	r2, #0
 800406c:	2300      	movs	r3, #0
 800406e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004072:	f7fc fd31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004076:	2800      	cmp	r0, #0
 8004078:	d033      	beq.n	80040e2 <_printf_float+0x26a>
 800407a:	2301      	movs	r3, #1
 800407c:	4a41      	ldr	r2, [pc, #260]	; (8004184 <_printf_float+0x30c>)
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	f43f af54 	beq.w	8003f32 <_printf_float+0xba>
 800408a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800408e:	429a      	cmp	r2, r3
 8004090:	db02      	blt.n	8004098 <_printf_float+0x220>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	07d8      	lsls	r0, r3, #31
 8004096:	d50f      	bpl.n	80040b8 <_printf_float+0x240>
 8004098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f af45 	beq.w	8003f32 <_printf_float+0xba>
 80040a8:	f04f 0800 	mov.w	r8, #0
 80040ac:	f104 091a 	add.w	r9, r4, #26
 80040b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4543      	cmp	r3, r8
 80040b6:	dc09      	bgt.n	80040cc <_printf_float+0x254>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	079b      	lsls	r3, r3, #30
 80040bc:	f100 8103 	bmi.w	80042c6 <_printf_float+0x44e>
 80040c0:	68e0      	ldr	r0, [r4, #12]
 80040c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c4:	4298      	cmp	r0, r3
 80040c6:	bfb8      	it	lt
 80040c8:	4618      	movlt	r0, r3
 80040ca:	e734      	b.n	8003f36 <_printf_float+0xbe>
 80040cc:	2301      	movs	r3, #1
 80040ce:	464a      	mov	r2, r9
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af2b 	beq.w	8003f32 <_printf_float+0xba>
 80040dc:	f108 0801 	add.w	r8, r8, #1
 80040e0:	e7e6      	b.n	80040b0 <_printf_float+0x238>
 80040e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dc2b      	bgt.n	8004140 <_printf_float+0x2c8>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <_printf_float+0x30c>)
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	f43f af1d 	beq.w	8003f32 <_printf_float+0xba>
 80040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fa:	b923      	cbnz	r3, 8004106 <_printf_float+0x28e>
 80040fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040fe:	b913      	cbnz	r3, 8004106 <_printf_float+0x28e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	d5d8      	bpl.n	80040b8 <_printf_float+0x240>
 8004106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f af0e 	beq.w	8003f32 <_printf_float+0xba>
 8004116:	f04f 0900 	mov.w	r9, #0
 800411a:	f104 0a1a 	add.w	sl, r4, #26
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	425b      	negs	r3, r3
 8004122:	454b      	cmp	r3, r9
 8004124:	dc01      	bgt.n	800412a <_printf_float+0x2b2>
 8004126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004128:	e794      	b.n	8004054 <_printf_float+0x1dc>
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f aefc 	beq.w	8003f32 <_printf_float+0xba>
 800413a:	f109 0901 	add.w	r9, r9, #1
 800413e:	e7ee      	b.n	800411e <_printf_float+0x2a6>
 8004140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004144:	429a      	cmp	r2, r3
 8004146:	bfa8      	it	ge
 8004148:	461a      	movge	r2, r3
 800414a:	2a00      	cmp	r2, #0
 800414c:	4691      	mov	r9, r2
 800414e:	dd07      	ble.n	8004160 <_printf_float+0x2e8>
 8004150:	4613      	mov	r3, r2
 8004152:	4631      	mov	r1, r6
 8004154:	4642      	mov	r2, r8
 8004156:	4628      	mov	r0, r5
 8004158:	47b8      	blx	r7
 800415a:	3001      	adds	r0, #1
 800415c:	f43f aee9 	beq.w	8003f32 <_printf_float+0xba>
 8004160:	f104 031a 	add.w	r3, r4, #26
 8004164:	f04f 0b00 	mov.w	fp, #0
 8004168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	e015      	b.n	800419c <_printf_float+0x324>
 8004170:	7fefffff 	.word	0x7fefffff
 8004174:	08006654 	.word	0x08006654
 8004178:	08006650 	.word	0x08006650
 800417c:	0800665c 	.word	0x0800665c
 8004180:	08006658 	.word	0x08006658
 8004184:	08006660 	.word	0x08006660
 8004188:	2301      	movs	r3, #1
 800418a:	9a06      	ldr	r2, [sp, #24]
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f aecd 	beq.w	8003f32 <_printf_float+0xba>
 8004198:	f10b 0b01 	add.w	fp, fp, #1
 800419c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041a0:	ebaa 0309 	sub.w	r3, sl, r9
 80041a4:	455b      	cmp	r3, fp
 80041a6:	dcef      	bgt.n	8004188 <_printf_float+0x310>
 80041a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ac:	429a      	cmp	r2, r3
 80041ae:	44d0      	add	r8, sl
 80041b0:	db15      	blt.n	80041de <_printf_float+0x366>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	07da      	lsls	r2, r3, #31
 80041b6:	d412      	bmi.n	80041de <_printf_float+0x366>
 80041b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041bc:	eba3 020a 	sub.w	r2, r3, sl
 80041c0:	eba3 0a01 	sub.w	sl, r3, r1
 80041c4:	4592      	cmp	sl, r2
 80041c6:	bfa8      	it	ge
 80041c8:	4692      	movge	sl, r2
 80041ca:	f1ba 0f00 	cmp.w	sl, #0
 80041ce:	dc0e      	bgt.n	80041ee <_printf_float+0x376>
 80041d0:	f04f 0800 	mov.w	r8, #0
 80041d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041d8:	f104 091a 	add.w	r9, r4, #26
 80041dc:	e019      	b.n	8004212 <_printf_float+0x39a>
 80041de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1e5      	bne.n	80041b8 <_printf_float+0x340>
 80041ec:	e6a1      	b.n	8003f32 <_printf_float+0xba>
 80041ee:	4653      	mov	r3, sl
 80041f0:	4642      	mov	r2, r8
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	d1e9      	bne.n	80041d0 <_printf_float+0x358>
 80041fc:	e699      	b.n	8003f32 <_printf_float+0xba>
 80041fe:	2301      	movs	r3, #1
 8004200:	464a      	mov	r2, r9
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	f43f ae92 	beq.w	8003f32 <_printf_float+0xba>
 800420e:	f108 0801 	add.w	r8, r8, #1
 8004212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	eba3 030a 	sub.w	r3, r3, sl
 800421c:	4543      	cmp	r3, r8
 800421e:	dcee      	bgt.n	80041fe <_printf_float+0x386>
 8004220:	e74a      	b.n	80040b8 <_printf_float+0x240>
 8004222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004224:	2a01      	cmp	r2, #1
 8004226:	dc01      	bgt.n	800422c <_printf_float+0x3b4>
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d53a      	bpl.n	80042a2 <_printf_float+0x42a>
 800422c:	2301      	movs	r3, #1
 800422e:	4642      	mov	r2, r8
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	f43f ae7b 	beq.w	8003f32 <_printf_float+0xba>
 800423c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f108 0801 	add.w	r8, r8, #1
 800424c:	f43f ae71 	beq.w	8003f32 <_printf_float+0xba>
 8004250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004252:	2200      	movs	r2, #0
 8004254:	f103 3aff 	add.w	sl, r3, #4294967295
 8004258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800425c:	2300      	movs	r3, #0
 800425e:	f7fc fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004262:	b9c8      	cbnz	r0, 8004298 <_printf_float+0x420>
 8004264:	4653      	mov	r3, sl
 8004266:	4642      	mov	r2, r8
 8004268:	4631      	mov	r1, r6
 800426a:	4628      	mov	r0, r5
 800426c:	47b8      	blx	r7
 800426e:	3001      	adds	r0, #1
 8004270:	d10e      	bne.n	8004290 <_printf_float+0x418>
 8004272:	e65e      	b.n	8003f32 <_printf_float+0xba>
 8004274:	2301      	movs	r3, #1
 8004276:	4652      	mov	r2, sl
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f ae57 	beq.w	8003f32 <_printf_float+0xba>
 8004284:	f108 0801 	add.w	r8, r8, #1
 8004288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	4543      	cmp	r3, r8
 800428e:	dcf1      	bgt.n	8004274 <_printf_float+0x3fc>
 8004290:	464b      	mov	r3, r9
 8004292:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004296:	e6de      	b.n	8004056 <_printf_float+0x1de>
 8004298:	f04f 0800 	mov.w	r8, #0
 800429c:	f104 0a1a 	add.w	sl, r4, #26
 80042a0:	e7f2      	b.n	8004288 <_printf_float+0x410>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e7df      	b.n	8004266 <_printf_float+0x3ee>
 80042a6:	2301      	movs	r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae3e 	beq.w	8003f32 <_printf_float+0xba>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	4543      	cmp	r3, r8
 80042c2:	dcf0      	bgt.n	80042a6 <_printf_float+0x42e>
 80042c4:	e6fc      	b.n	80040c0 <_printf_float+0x248>
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	f104 0919 	add.w	r9, r4, #25
 80042ce:	e7f4      	b.n	80042ba <_printf_float+0x442>
 80042d0:	2900      	cmp	r1, #0
 80042d2:	f43f ae8b 	beq.w	8003fec <_printf_float+0x174>
 80042d6:	2300      	movs	r3, #0
 80042d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042dc:	ab09      	add	r3, sp, #36	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	ec49 8b10 	vmov	d0, r8, r9
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	f8cd a004 	str.w	sl, [sp, #4]
 80042ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7ff fd2d 	bl	8003d4e <__cvt>
 80042f4:	4680      	mov	r8, r0
 80042f6:	e648      	b.n	8003f8a <_printf_float+0x112>

080042f8 <_printf_common>:
 80042f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	4691      	mov	r9, r2
 80042fe:	461f      	mov	r7, r3
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004308:	4293      	cmp	r3, r2
 800430a:	bfb8      	it	lt
 800430c:	4613      	movlt	r3, r2
 800430e:	f8c9 3000 	str.w	r3, [r9]
 8004312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004316:	4606      	mov	r6, r0
 8004318:	460c      	mov	r4, r1
 800431a:	b112      	cbz	r2, 8004322 <_printf_common+0x2a>
 800431c:	3301      	adds	r3, #1
 800431e:	f8c9 3000 	str.w	r3, [r9]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	0699      	lsls	r1, r3, #26
 8004326:	bf42      	ittt	mi
 8004328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800432c:	3302      	addmi	r3, #2
 800432e:	f8c9 3000 	strmi.w	r3, [r9]
 8004332:	6825      	ldr	r5, [r4, #0]
 8004334:	f015 0506 	ands.w	r5, r5, #6
 8004338:	d107      	bne.n	800434a <_printf_common+0x52>
 800433a:	f104 0a19 	add.w	sl, r4, #25
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	f8d9 2000 	ldr.w	r2, [r9]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	42ab      	cmp	r3, r5
 8004348:	dc28      	bgt.n	800439c <_printf_common+0xa4>
 800434a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	3300      	adds	r3, #0
 8004352:	bf18      	it	ne
 8004354:	2301      	movne	r3, #1
 8004356:	0692      	lsls	r2, r2, #26
 8004358:	d42d      	bmi.n	80043b6 <_printf_common+0xbe>
 800435a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800435e:	4639      	mov	r1, r7
 8004360:	4630      	mov	r0, r6
 8004362:	47c0      	blx	r8
 8004364:	3001      	adds	r0, #1
 8004366:	d020      	beq.n	80043aa <_printf_common+0xb2>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	68e5      	ldr	r5, [r4, #12]
 800436c:	f8d9 2000 	ldr.w	r2, [r9]
 8004370:	f003 0306 	and.w	r3, r3, #6
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf08      	it	eq
 8004378:	1aad      	subeq	r5, r5, r2
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	bf0c      	ite	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	2500      	movne	r5, #0
 8004386:	4293      	cmp	r3, r2
 8004388:	bfc4      	itt	gt
 800438a:	1a9b      	subgt	r3, r3, r2
 800438c:	18ed      	addgt	r5, r5, r3
 800438e:	f04f 0900 	mov.w	r9, #0
 8004392:	341a      	adds	r4, #26
 8004394:	454d      	cmp	r5, r9
 8004396:	d11a      	bne.n	80043ce <_printf_common+0xd6>
 8004398:	2000      	movs	r0, #0
 800439a:	e008      	b.n	80043ae <_printf_common+0xb6>
 800439c:	2301      	movs	r3, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	4639      	mov	r1, r7
 80043a2:	4630      	mov	r0, r6
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d103      	bne.n	80043b2 <_printf_common+0xba>
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b2:	3501      	adds	r5, #1
 80043b4:	e7c3      	b.n	800433e <_printf_common+0x46>
 80043b6:	18e1      	adds	r1, r4, r3
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	2030      	movs	r0, #48	; 0x30
 80043bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c0:	4422      	add	r2, r4
 80043c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ca:	3302      	adds	r3, #2
 80043cc:	e7c5      	b.n	800435a <_printf_common+0x62>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4622      	mov	r2, r4
 80043d2:	4639      	mov	r1, r7
 80043d4:	4630      	mov	r0, r6
 80043d6:	47c0      	blx	r8
 80043d8:	3001      	adds	r0, #1
 80043da:	d0e6      	beq.n	80043aa <_printf_common+0xb2>
 80043dc:	f109 0901 	add.w	r9, r9, #1
 80043e0:	e7d8      	b.n	8004394 <_printf_common+0x9c>
	...

080043e4 <_printf_i>:
 80043e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043ec:	460c      	mov	r4, r1
 80043ee:	7e09      	ldrb	r1, [r1, #24]
 80043f0:	b085      	sub	sp, #20
 80043f2:	296e      	cmp	r1, #110	; 0x6e
 80043f4:	4617      	mov	r7, r2
 80043f6:	4606      	mov	r6, r0
 80043f8:	4698      	mov	r8, r3
 80043fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043fc:	f000 80b3 	beq.w	8004566 <_printf_i+0x182>
 8004400:	d822      	bhi.n	8004448 <_printf_i+0x64>
 8004402:	2963      	cmp	r1, #99	; 0x63
 8004404:	d036      	beq.n	8004474 <_printf_i+0x90>
 8004406:	d80a      	bhi.n	800441e <_printf_i+0x3a>
 8004408:	2900      	cmp	r1, #0
 800440a:	f000 80b9 	beq.w	8004580 <_printf_i+0x19c>
 800440e:	2958      	cmp	r1, #88	; 0x58
 8004410:	f000 8083 	beq.w	800451a <_printf_i+0x136>
 8004414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800441c:	e032      	b.n	8004484 <_printf_i+0xa0>
 800441e:	2964      	cmp	r1, #100	; 0x64
 8004420:	d001      	beq.n	8004426 <_printf_i+0x42>
 8004422:	2969      	cmp	r1, #105	; 0x69
 8004424:	d1f6      	bne.n	8004414 <_printf_i+0x30>
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	0605      	lsls	r5, r0, #24
 800442c:	f103 0104 	add.w	r1, r3, #4
 8004430:	d52a      	bpl.n	8004488 <_printf_i+0xa4>
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da03      	bge.n	8004442 <_printf_i+0x5e>
 800443a:	222d      	movs	r2, #45	; 0x2d
 800443c:	425b      	negs	r3, r3
 800443e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004442:	486f      	ldr	r0, [pc, #444]	; (8004600 <_printf_i+0x21c>)
 8004444:	220a      	movs	r2, #10
 8004446:	e039      	b.n	80044bc <_printf_i+0xd8>
 8004448:	2973      	cmp	r1, #115	; 0x73
 800444a:	f000 809d 	beq.w	8004588 <_printf_i+0x1a4>
 800444e:	d808      	bhi.n	8004462 <_printf_i+0x7e>
 8004450:	296f      	cmp	r1, #111	; 0x6f
 8004452:	d020      	beq.n	8004496 <_printf_i+0xb2>
 8004454:	2970      	cmp	r1, #112	; 0x70
 8004456:	d1dd      	bne.n	8004414 <_printf_i+0x30>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f043 0320 	orr.w	r3, r3, #32
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	e003      	b.n	800446a <_printf_i+0x86>
 8004462:	2975      	cmp	r1, #117	; 0x75
 8004464:	d017      	beq.n	8004496 <_printf_i+0xb2>
 8004466:	2978      	cmp	r1, #120	; 0x78
 8004468:	d1d4      	bne.n	8004414 <_printf_i+0x30>
 800446a:	2378      	movs	r3, #120	; 0x78
 800446c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004470:	4864      	ldr	r0, [pc, #400]	; (8004604 <_printf_i+0x220>)
 8004472:	e055      	b.n	8004520 <_printf_i+0x13c>
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	1d19      	adds	r1, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004484:	2301      	movs	r3, #1
 8004486:	e08c      	b.n	80045a2 <_printf_i+0x1be>
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6011      	str	r1, [r2, #0]
 800448c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004490:	bf18      	it	ne
 8004492:	b21b      	sxthne	r3, r3
 8004494:	e7cf      	b.n	8004436 <_printf_i+0x52>
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	1d18      	adds	r0, r3, #4
 800449c:	6010      	str	r0, [r2, #0]
 800449e:	0628      	lsls	r0, r5, #24
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0xc2>
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	e002      	b.n	80044ac <_printf_i+0xc8>
 80044a6:	0668      	lsls	r0, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0xbe>
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	4854      	ldr	r0, [pc, #336]	; (8004600 <_printf_i+0x21c>)
 80044ae:	296f      	cmp	r1, #111	; 0x6f
 80044b0:	bf14      	ite	ne
 80044b2:	220a      	movne	r2, #10
 80044b4:	2208      	moveq	r2, #8
 80044b6:	2100      	movs	r1, #0
 80044b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044bc:	6865      	ldr	r5, [r4, #4]
 80044be:	60a5      	str	r5, [r4, #8]
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	f2c0 8095 	blt.w	80045f0 <_printf_i+0x20c>
 80044c6:	6821      	ldr	r1, [r4, #0]
 80044c8:	f021 0104 	bic.w	r1, r1, #4
 80044cc:	6021      	str	r1, [r4, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d13d      	bne.n	800454e <_printf_i+0x16a>
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	f040 808e 	bne.w	80045f4 <_printf_i+0x210>
 80044d8:	4665      	mov	r5, ip
 80044da:	2a08      	cmp	r2, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x112>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07db      	lsls	r3, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x112>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	; 0x30
 80044ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044f6:	ebac 0305 	sub.w	r3, ip, r5
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	f8cd 8000 	str.w	r8, [sp]
 8004500:	463b      	mov	r3, r7
 8004502:	aa03      	add	r2, sp, #12
 8004504:	4621      	mov	r1, r4
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff fef6 	bl	80042f8 <_printf_common>
 800450c:	3001      	adds	r0, #1
 800450e:	d14d      	bne.n	80045ac <_printf_i+0x1c8>
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	b005      	add	sp, #20
 8004516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800451a:	4839      	ldr	r0, [pc, #228]	; (8004600 <_printf_i+0x21c>)
 800451c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	1d1d      	adds	r5, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6015      	str	r5, [r2, #0]
 800452a:	060a      	lsls	r2, r1, #24
 800452c:	d50b      	bpl.n	8004546 <_printf_i+0x162>
 800452e:	07ca      	lsls	r2, r1, #31
 8004530:	bf44      	itt	mi
 8004532:	f041 0120 	orrmi.w	r1, r1, #32
 8004536:	6021      	strmi	r1, [r4, #0]
 8004538:	b91b      	cbnz	r3, 8004542 <_printf_i+0x15e>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	f022 0220 	bic.w	r2, r2, #32
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	e7b7      	b.n	80044b6 <_printf_i+0xd2>
 8004546:	064d      	lsls	r5, r1, #25
 8004548:	bf48      	it	mi
 800454a:	b29b      	uxthmi	r3, r3
 800454c:	e7ef      	b.n	800452e <_printf_i+0x14a>
 800454e:	4665      	mov	r5, ip
 8004550:	fbb3 f1f2 	udiv	r1, r3, r2
 8004554:	fb02 3311 	mls	r3, r2, r1, r3
 8004558:	5cc3      	ldrb	r3, [r0, r3]
 800455a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800455e:	460b      	mov	r3, r1
 8004560:	2900      	cmp	r1, #0
 8004562:	d1f5      	bne.n	8004550 <_printf_i+0x16c>
 8004564:	e7b9      	b.n	80044da <_printf_i+0xf6>
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	6825      	ldr	r5, [r4, #0]
 800456a:	6961      	ldr	r1, [r4, #20]
 800456c:	1d18      	adds	r0, r3, #4
 800456e:	6010      	str	r0, [r2, #0]
 8004570:	0628      	lsls	r0, r5, #24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	d501      	bpl.n	800457a <_printf_i+0x196>
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	e002      	b.n	8004580 <_printf_i+0x19c>
 800457a:	066a      	lsls	r2, r5, #25
 800457c:	d5fb      	bpl.n	8004576 <_printf_i+0x192>
 800457e:	8019      	strh	r1, [r3, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	4665      	mov	r5, ip
 8004586:	e7b9      	b.n	80044fc <_printf_i+0x118>
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	1d19      	adds	r1, r3, #4
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	681d      	ldr	r5, [r3, #0]
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	2100      	movs	r1, #0
 8004594:	4628      	mov	r0, r5
 8004596:	f7fb fe2b 	bl	80001f0 <memchr>
 800459a:	b108      	cbz	r0, 80045a0 <_printf_i+0x1bc>
 800459c:	1b40      	subs	r0, r0, r5
 800459e:	6060      	str	r0, [r4, #4]
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	2300      	movs	r3, #0
 80045a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045aa:	e7a7      	b.n	80044fc <_printf_i+0x118>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4639      	mov	r1, r7
 80045b2:	4630      	mov	r0, r6
 80045b4:	47c0      	blx	r8
 80045b6:	3001      	adds	r0, #1
 80045b8:	d0aa      	beq.n	8004510 <_printf_i+0x12c>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	079b      	lsls	r3, r3, #30
 80045be:	d413      	bmi.n	80045e8 <_printf_i+0x204>
 80045c0:	68e0      	ldr	r0, [r4, #12]
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	4298      	cmp	r0, r3
 80045c6:	bfb8      	it	lt
 80045c8:	4618      	movlt	r0, r3
 80045ca:	e7a3      	b.n	8004514 <_printf_i+0x130>
 80045cc:	2301      	movs	r3, #1
 80045ce:	464a      	mov	r2, r9
 80045d0:	4639      	mov	r1, r7
 80045d2:	4630      	mov	r0, r6
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d09a      	beq.n	8004510 <_printf_i+0x12c>
 80045da:	3501      	adds	r5, #1
 80045dc:	68e3      	ldr	r3, [r4, #12]
 80045de:	9a03      	ldr	r2, [sp, #12]
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	42ab      	cmp	r3, r5
 80045e4:	dcf2      	bgt.n	80045cc <_printf_i+0x1e8>
 80045e6:	e7eb      	b.n	80045c0 <_printf_i+0x1dc>
 80045e8:	2500      	movs	r5, #0
 80045ea:	f104 0919 	add.w	r9, r4, #25
 80045ee:	e7f5      	b.n	80045dc <_printf_i+0x1f8>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ac      	bne.n	800454e <_printf_i+0x16a>
 80045f4:	7803      	ldrb	r3, [r0, #0]
 80045f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045fe:	e76c      	b.n	80044da <_printf_i+0xf6>
 8004600:	08006662 	.word	0x08006662
 8004604:	08006673 	.word	0x08006673

08004608 <iprintf>:
 8004608:	b40f      	push	{r0, r1, r2, r3}
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <iprintf+0x2c>)
 800460c:	b513      	push	{r0, r1, r4, lr}
 800460e:	681c      	ldr	r4, [r3, #0]
 8004610:	b124      	cbz	r4, 800461c <iprintf+0x14>
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	b913      	cbnz	r3, 800461c <iprintf+0x14>
 8004616:	4620      	mov	r0, r4
 8004618:	f001 f87a 	bl	8005710 <__sinit>
 800461c:	ab05      	add	r3, sp, #20
 800461e:	9a04      	ldr	r2, [sp, #16]
 8004620:	68a1      	ldr	r1, [r4, #8]
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	4620      	mov	r0, r4
 8004626:	f001 fd33 	bl	8006090 <_vfiprintf_r>
 800462a:	b002      	add	sp, #8
 800462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004630:	b004      	add	sp, #16
 8004632:	4770      	bx	lr
 8004634:	2000000c 	.word	0x2000000c

08004638 <putchar>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <putchar+0x24>)
 800463c:	681c      	ldr	r4, [r3, #0]
 800463e:	4605      	mov	r5, r0
 8004640:	b124      	cbz	r4, 800464c <putchar+0x14>
 8004642:	69a3      	ldr	r3, [r4, #24]
 8004644:	b913      	cbnz	r3, 800464c <putchar+0x14>
 8004646:	4620      	mov	r0, r4
 8004648:	f001 f862 	bl	8005710 <__sinit>
 800464c:	68a2      	ldr	r2, [r4, #8]
 800464e:	4629      	mov	r1, r5
 8004650:	4620      	mov	r0, r4
 8004652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004656:	f001 be31 	b.w	80062bc <_putc_r>
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c

08004660 <_puts_r>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	460e      	mov	r6, r1
 8004664:	4605      	mov	r5, r0
 8004666:	b118      	cbz	r0, 8004670 <_puts_r+0x10>
 8004668:	6983      	ldr	r3, [r0, #24]
 800466a:	b90b      	cbnz	r3, 8004670 <_puts_r+0x10>
 800466c:	f001 f850 	bl	8005710 <__sinit>
 8004670:	69ab      	ldr	r3, [r5, #24]
 8004672:	68ac      	ldr	r4, [r5, #8]
 8004674:	b913      	cbnz	r3, 800467c <_puts_r+0x1c>
 8004676:	4628      	mov	r0, r5
 8004678:	f001 f84a 	bl	8005710 <__sinit>
 800467c:	4b23      	ldr	r3, [pc, #140]	; (800470c <_puts_r+0xac>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d117      	bne.n	80046b2 <_puts_r+0x52>
 8004682:	686c      	ldr	r4, [r5, #4]
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	d51d      	bpl.n	80046c6 <_puts_r+0x66>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	b1db      	cbz	r3, 80046c6 <_puts_r+0x66>
 800468e:	3e01      	subs	r6, #1
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004696:	3b01      	subs	r3, #1
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	b9e9      	cbnz	r1, 80046d8 <_puts_r+0x78>
 800469c:	2b00      	cmp	r3, #0
 800469e:	da2e      	bge.n	80046fe <_puts_r+0x9e>
 80046a0:	4622      	mov	r2, r4
 80046a2:	210a      	movs	r1, #10
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f83f 	bl	8004728 <__swbuf_r>
 80046aa:	3001      	adds	r0, #1
 80046ac:	d011      	beq.n	80046d2 <_puts_r+0x72>
 80046ae:	200a      	movs	r0, #10
 80046b0:	e011      	b.n	80046d6 <_puts_r+0x76>
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <_puts_r+0xb0>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	d101      	bne.n	80046bc <_puts_r+0x5c>
 80046b8:	68ac      	ldr	r4, [r5, #8]
 80046ba:	e7e3      	b.n	8004684 <_puts_r+0x24>
 80046bc:	4b15      	ldr	r3, [pc, #84]	; (8004714 <_puts_r+0xb4>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	bf08      	it	eq
 80046c2:	68ec      	ldreq	r4, [r5, #12]
 80046c4:	e7de      	b.n	8004684 <_puts_r+0x24>
 80046c6:	4621      	mov	r1, r4
 80046c8:	4628      	mov	r0, r5
 80046ca:	f000 f87f 	bl	80047cc <__swsetup_r>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d0dd      	beq.n	800468e <_puts_r+0x2e>
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da04      	bge.n	80046e6 <_puts_r+0x86>
 80046dc:	69a2      	ldr	r2, [r4, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	dc06      	bgt.n	80046f0 <_puts_r+0x90>
 80046e2:	290a      	cmp	r1, #10
 80046e4:	d004      	beq.n	80046f0 <_puts_r+0x90>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	6022      	str	r2, [r4, #0]
 80046ec:	7019      	strb	r1, [r3, #0]
 80046ee:	e7cf      	b.n	8004690 <_puts_r+0x30>
 80046f0:	4622      	mov	r2, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f818 	bl	8004728 <__swbuf_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d1c9      	bne.n	8004690 <_puts_r+0x30>
 80046fc:	e7e9      	b.n	80046d2 <_puts_r+0x72>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	200a      	movs	r0, #10
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	6022      	str	r2, [r4, #0]
 8004706:	7018      	strb	r0, [r3, #0]
 8004708:	e7e5      	b.n	80046d6 <_puts_r+0x76>
 800470a:	bf00      	nop
 800470c:	080066b4 	.word	0x080066b4
 8004710:	080066d4 	.word	0x080066d4
 8004714:	08006694 	.word	0x08006694

08004718 <puts>:
 8004718:	4b02      	ldr	r3, [pc, #8]	; (8004724 <puts+0xc>)
 800471a:	4601      	mov	r1, r0
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	f7ff bf9f 	b.w	8004660 <_puts_r>
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c

08004728 <__swbuf_r>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	460e      	mov	r6, r1
 800472c:	4614      	mov	r4, r2
 800472e:	4605      	mov	r5, r0
 8004730:	b118      	cbz	r0, 800473a <__swbuf_r+0x12>
 8004732:	6983      	ldr	r3, [r0, #24]
 8004734:	b90b      	cbnz	r3, 800473a <__swbuf_r+0x12>
 8004736:	f000 ffeb 	bl	8005710 <__sinit>
 800473a:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <__swbuf_r+0x98>)
 800473c:	429c      	cmp	r4, r3
 800473e:	d12a      	bne.n	8004796 <__swbuf_r+0x6e>
 8004740:	686c      	ldr	r4, [r5, #4]
 8004742:	69a3      	ldr	r3, [r4, #24]
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	071a      	lsls	r2, r3, #28
 800474a:	d52e      	bpl.n	80047aa <__swbuf_r+0x82>
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	b363      	cbz	r3, 80047aa <__swbuf_r+0x82>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1ac0      	subs	r0, r0, r3
 8004756:	6963      	ldr	r3, [r4, #20]
 8004758:	b2f6      	uxtb	r6, r6
 800475a:	4283      	cmp	r3, r0
 800475c:	4637      	mov	r7, r6
 800475e:	dc04      	bgt.n	800476a <__swbuf_r+0x42>
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f000 ff6a 	bl	800563c <_fflush_r>
 8004768:	bb28      	cbnz	r0, 80047b6 <__swbuf_r+0x8e>
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	3b01      	subs	r3, #1
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	6022      	str	r2, [r4, #0]
 8004776:	701e      	strb	r6, [r3, #0]
 8004778:	6963      	ldr	r3, [r4, #20]
 800477a:	3001      	adds	r0, #1
 800477c:	4283      	cmp	r3, r0
 800477e:	d004      	beq.n	800478a <__swbuf_r+0x62>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	d519      	bpl.n	80047ba <__swbuf_r+0x92>
 8004786:	2e0a      	cmp	r6, #10
 8004788:	d117      	bne.n	80047ba <__swbuf_r+0x92>
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 ff55 	bl	800563c <_fflush_r>
 8004792:	b190      	cbz	r0, 80047ba <__swbuf_r+0x92>
 8004794:	e00f      	b.n	80047b6 <__swbuf_r+0x8e>
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <__swbuf_r+0x9c>)
 8004798:	429c      	cmp	r4, r3
 800479a:	d101      	bne.n	80047a0 <__swbuf_r+0x78>
 800479c:	68ac      	ldr	r4, [r5, #8]
 800479e:	e7d0      	b.n	8004742 <__swbuf_r+0x1a>
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <__swbuf_r+0xa0>)
 80047a2:	429c      	cmp	r4, r3
 80047a4:	bf08      	it	eq
 80047a6:	68ec      	ldreq	r4, [r5, #12]
 80047a8:	e7cb      	b.n	8004742 <__swbuf_r+0x1a>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f80d 	bl	80047cc <__swsetup_r>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0cc      	beq.n	8004750 <__swbuf_r+0x28>
 80047b6:	f04f 37ff 	mov.w	r7, #4294967295
 80047ba:	4638      	mov	r0, r7
 80047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047be:	bf00      	nop
 80047c0:	080066b4 	.word	0x080066b4
 80047c4:	080066d4 	.word	0x080066d4
 80047c8:	08006694 	.word	0x08006694

080047cc <__swsetup_r>:
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <__swsetup_r+0xcc>)
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	681d      	ldr	r5, [r3, #0]
 80047d2:	4606      	mov	r6, r0
 80047d4:	460c      	mov	r4, r1
 80047d6:	b125      	cbz	r5, 80047e2 <__swsetup_r+0x16>
 80047d8:	69ab      	ldr	r3, [r5, #24]
 80047da:	b913      	cbnz	r3, 80047e2 <__swsetup_r+0x16>
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 ff97 	bl	8005710 <__sinit>
 80047e2:	4b2e      	ldr	r3, [pc, #184]	; (800489c <__swsetup_r+0xd0>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	d10f      	bne.n	8004808 <__swsetup_r+0x3c>
 80047e8:	686c      	ldr	r4, [r5, #4]
 80047ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	0715      	lsls	r5, r2, #28
 80047f2:	d42c      	bmi.n	800484e <__swsetup_r+0x82>
 80047f4:	06d0      	lsls	r0, r2, #27
 80047f6:	d411      	bmi.n	800481c <__swsetup_r+0x50>
 80047f8:	2209      	movs	r2, #9
 80047fa:	6032      	str	r2, [r6, #0]
 80047fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004800:	81a3      	strh	r3, [r4, #12]
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	e03e      	b.n	8004886 <__swsetup_r+0xba>
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <__swsetup_r+0xd4>)
 800480a:	429c      	cmp	r4, r3
 800480c:	d101      	bne.n	8004812 <__swsetup_r+0x46>
 800480e:	68ac      	ldr	r4, [r5, #8]
 8004810:	e7eb      	b.n	80047ea <__swsetup_r+0x1e>
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <__swsetup_r+0xd8>)
 8004814:	429c      	cmp	r4, r3
 8004816:	bf08      	it	eq
 8004818:	68ec      	ldreq	r4, [r5, #12]
 800481a:	e7e6      	b.n	80047ea <__swsetup_r+0x1e>
 800481c:	0751      	lsls	r1, r2, #29
 800481e:	d512      	bpl.n	8004846 <__swsetup_r+0x7a>
 8004820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004822:	b141      	cbz	r1, 8004836 <__swsetup_r+0x6a>
 8004824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <__swsetup_r+0x66>
 800482c:	4630      	mov	r0, r6
 800482e:	f001 fb5d 	bl	8005eec <_free_r>
 8004832:	2300      	movs	r3, #0
 8004834:	6363      	str	r3, [r4, #52]	; 0x34
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	2300      	movs	r3, #0
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f043 0308 	orr.w	r3, r3, #8
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	b94b      	cbnz	r3, 8004866 <__swsetup_r+0x9a>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d003      	beq.n	8004866 <__swsetup_r+0x9a>
 800485e:	4621      	mov	r1, r4
 8004860:	4630      	mov	r0, r6
 8004862:	f001 f811 	bl	8005888 <__smakebuf_r>
 8004866:	89a2      	ldrh	r2, [r4, #12]
 8004868:	f012 0301 	ands.w	r3, r2, #1
 800486c:	d00c      	beq.n	8004888 <__swsetup_r+0xbc>
 800486e:	2300      	movs	r3, #0
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	6963      	ldr	r3, [r4, #20]
 8004874:	425b      	negs	r3, r3
 8004876:	61a3      	str	r3, [r4, #24]
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	b953      	cbnz	r3, 8004892 <__swsetup_r+0xc6>
 800487c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004880:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004884:	d1ba      	bne.n	80047fc <__swsetup_r+0x30>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	0792      	lsls	r2, r2, #30
 800488a:	bf58      	it	pl
 800488c:	6963      	ldrpl	r3, [r4, #20]
 800488e:	60a3      	str	r3, [r4, #8]
 8004890:	e7f2      	b.n	8004878 <__swsetup_r+0xac>
 8004892:	2000      	movs	r0, #0
 8004894:	e7f7      	b.n	8004886 <__swsetup_r+0xba>
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c
 800489c:	080066b4 	.word	0x080066b4
 80048a0:	080066d4 	.word	0x080066d4
 80048a4:	08006694 	.word	0x08006694

080048a8 <quorem>:
 80048a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	6903      	ldr	r3, [r0, #16]
 80048ae:	690c      	ldr	r4, [r1, #16]
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	4680      	mov	r8, r0
 80048b4:	f2c0 8082 	blt.w	80049bc <quorem+0x114>
 80048b8:	3c01      	subs	r4, #1
 80048ba:	f101 0714 	add.w	r7, r1, #20
 80048be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80048c2:	f100 0614 	add.w	r6, r0, #20
 80048c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80048ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80048ce:	eb06 030c 	add.w	r3, r6, ip
 80048d2:	3501      	adds	r5, #1
 80048d4:	eb07 090c 	add.w	r9, r7, ip
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	fbb0 f5f5 	udiv	r5, r0, r5
 80048de:	b395      	cbz	r5, 8004946 <quorem+0x9e>
 80048e0:	f04f 0a00 	mov.w	sl, #0
 80048e4:	4638      	mov	r0, r7
 80048e6:	46b6      	mov	lr, r6
 80048e8:	46d3      	mov	fp, sl
 80048ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80048ee:	b293      	uxth	r3, r2
 80048f0:	fb05 a303 	mla	r3, r5, r3, sl
 80048f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	ebab 0303 	sub.w	r3, fp, r3
 80048fe:	0c12      	lsrs	r2, r2, #16
 8004900:	f8de b000 	ldr.w	fp, [lr]
 8004904:	fb05 a202 	mla	r2, r5, r2, sl
 8004908:	fa13 f38b 	uxtah	r3, r3, fp
 800490c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004910:	fa1f fb82 	uxth.w	fp, r2
 8004914:	f8de 2000 	ldr.w	r2, [lr]
 8004918:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800491c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004920:	b29b      	uxth	r3, r3
 8004922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004926:	4581      	cmp	r9, r0
 8004928:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800492c:	f84e 3b04 	str.w	r3, [lr], #4
 8004930:	d2db      	bcs.n	80048ea <quorem+0x42>
 8004932:	f856 300c 	ldr.w	r3, [r6, ip]
 8004936:	b933      	cbnz	r3, 8004946 <quorem+0x9e>
 8004938:	9b01      	ldr	r3, [sp, #4]
 800493a:	3b04      	subs	r3, #4
 800493c:	429e      	cmp	r6, r3
 800493e:	461a      	mov	r2, r3
 8004940:	d330      	bcc.n	80049a4 <quorem+0xfc>
 8004942:	f8c8 4010 	str.w	r4, [r8, #16]
 8004946:	4640      	mov	r0, r8
 8004948:	f001 f9fc 	bl	8005d44 <__mcmp>
 800494c:	2800      	cmp	r0, #0
 800494e:	db25      	blt.n	800499c <quorem+0xf4>
 8004950:	3501      	adds	r5, #1
 8004952:	4630      	mov	r0, r6
 8004954:	f04f 0c00 	mov.w	ip, #0
 8004958:	f857 2b04 	ldr.w	r2, [r7], #4
 800495c:	f8d0 e000 	ldr.w	lr, [r0]
 8004960:	b293      	uxth	r3, r2
 8004962:	ebac 0303 	sub.w	r3, ip, r3
 8004966:	0c12      	lsrs	r2, r2, #16
 8004968:	fa13 f38e 	uxtah	r3, r3, lr
 800496c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800497a:	45b9      	cmp	r9, r7
 800497c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004980:	f840 3b04 	str.w	r3, [r0], #4
 8004984:	d2e8      	bcs.n	8004958 <quorem+0xb0>
 8004986:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800498a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800498e:	b92a      	cbnz	r2, 800499c <quorem+0xf4>
 8004990:	3b04      	subs	r3, #4
 8004992:	429e      	cmp	r6, r3
 8004994:	461a      	mov	r2, r3
 8004996:	d30b      	bcc.n	80049b0 <quorem+0x108>
 8004998:	f8c8 4010 	str.w	r4, [r8, #16]
 800499c:	4628      	mov	r0, r5
 800499e:	b003      	add	sp, #12
 80049a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	3b04      	subs	r3, #4
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	d1ca      	bne.n	8004942 <quorem+0x9a>
 80049ac:	3c01      	subs	r4, #1
 80049ae:	e7c5      	b.n	800493c <quorem+0x94>
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d1ef      	bne.n	8004998 <quorem+0xf0>
 80049b8:	3c01      	subs	r4, #1
 80049ba:	e7ea      	b.n	8004992 <quorem+0xea>
 80049bc:	2000      	movs	r0, #0
 80049be:	e7ee      	b.n	800499e <quorem+0xf6>

080049c0 <_dtoa_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	ec57 6b10 	vmov	r6, r7, d0
 80049c8:	b097      	sub	sp, #92	; 0x5c
 80049ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049cc:	9106      	str	r1, [sp, #24]
 80049ce:	4604      	mov	r4, r0
 80049d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80049d2:	9312      	str	r3, [sp, #72]	; 0x48
 80049d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049d8:	e9cd 6700 	strd	r6, r7, [sp]
 80049dc:	b93d      	cbnz	r5, 80049ee <_dtoa_r+0x2e>
 80049de:	2010      	movs	r0, #16
 80049e0:	f000 ff92 	bl	8005908 <malloc>
 80049e4:	6260      	str	r0, [r4, #36]	; 0x24
 80049e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049ea:	6005      	str	r5, [r0, #0]
 80049ec:	60c5      	str	r5, [r0, #12]
 80049ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	b151      	cbz	r1, 8004a0a <_dtoa_r+0x4a>
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	604a      	str	r2, [r1, #4]
 80049f8:	2301      	movs	r3, #1
 80049fa:	4093      	lsls	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 ffbe 	bl	8005980 <_Bfree>
 8004a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	1e3b      	subs	r3, r7, #0
 8004a0c:	bfbb      	ittet	lt
 8004a0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	9301      	strlt	r3, [sp, #4]
 8004a14:	2300      	movge	r3, #0
 8004a16:	2201      	movlt	r2, #1
 8004a18:	bfac      	ite	ge
 8004a1a:	f8c8 3000 	strge.w	r3, [r8]
 8004a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8004a22:	4baf      	ldr	r3, [pc, #700]	; (8004ce0 <_dtoa_r+0x320>)
 8004a24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a28:	ea33 0308 	bics.w	r3, r3, r8
 8004a2c:	d114      	bne.n	8004a58 <_dtoa_r+0x98>
 8004a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	b923      	cbnz	r3, 8004a44 <_dtoa_r+0x84>
 8004a3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f000 8542 	beq.w	80054c8 <_dtoa_r+0xb08>
 8004a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004cf4 <_dtoa_r+0x334>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8544 	beq.w	80054d8 <_dtoa_r+0xb18>
 8004a50:	f10b 0303 	add.w	r3, fp, #3
 8004a54:	f000 bd3e 	b.w	80054d4 <_dtoa_r+0xb14>
 8004a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fc f838 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a68:	4681      	mov	r9, r0
 8004a6a:	b168      	cbz	r0, 8004a88 <_dtoa_r+0xc8>
 8004a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a6e:	2301      	movs	r3, #1
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8524 	beq.w	80054c2 <_dtoa_r+0xb02>
 8004a7a:	4b9a      	ldr	r3, [pc, #616]	; (8004ce4 <_dtoa_r+0x324>)
 8004a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	f000 bd28 	b.w	80054d8 <_dtoa_r+0xb18>
 8004a88:	aa14      	add	r2, sp, #80	; 0x50
 8004a8a:	a915      	add	r1, sp, #84	; 0x54
 8004a8c:	ec47 6b10 	vmov	d0, r6, r7
 8004a90:	4620      	mov	r0, r4
 8004a92:	f001 f9ce 	bl	8005e32 <__d2b>
 8004a96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a9a:	9004      	str	r0, [sp, #16]
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	d07c      	beq.n	8004b9a <_dtoa_r+0x1da>
 8004aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004aa4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004aa8:	46b2      	mov	sl, r6
 8004aaa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ab2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	4b8b      	ldr	r3, [pc, #556]	; (8004ce8 <_dtoa_r+0x328>)
 8004aba:	4650      	mov	r0, sl
 8004abc:	4659      	mov	r1, fp
 8004abe:	f7fb fbeb 	bl	8000298 <__aeabi_dsub>
 8004ac2:	a381      	add	r3, pc, #516	; (adr r3, 8004cc8 <_dtoa_r+0x308>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f7fb fd9e 	bl	8000608 <__aeabi_dmul>
 8004acc:	a380      	add	r3, pc, #512	; (adr r3, 8004cd0 <_dtoa_r+0x310>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f7fb fbe3 	bl	800029c <__adddf3>
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	4628      	mov	r0, r5
 8004ada:	460f      	mov	r7, r1
 8004adc:	f7fb fd2a 	bl	8000534 <__aeabi_i2d>
 8004ae0:	a37d      	add	r3, pc, #500	; (adr r3, 8004cd8 <_dtoa_r+0x318>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fd8f 	bl	8000608 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fb fbd3 	bl	800029c <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	f7fc f835 	bl	8000b68 <__aeabi_d2iz>
 8004afe:	2200      	movs	r2, #0
 8004b00:	4682      	mov	sl, r0
 8004b02:	2300      	movs	r3, #0
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb fff0 	bl	8000aec <__aeabi_dcmplt>
 8004b0c:	b148      	cbz	r0, 8004b22 <_dtoa_r+0x162>
 8004b0e:	4650      	mov	r0, sl
 8004b10:	f7fb fd10 	bl	8000534 <__aeabi_i2d>
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	f7fb ffde 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b1c:	b908      	cbnz	r0, 8004b22 <_dtoa_r+0x162>
 8004b1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b22:	f1ba 0f16 	cmp.w	sl, #22
 8004b26:	d859      	bhi.n	8004bdc <_dtoa_r+0x21c>
 8004b28:	4970      	ldr	r1, [pc, #448]	; (8004cec <_dtoa_r+0x32c>)
 8004b2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b36:	f7fb fff7 	bl	8000b28 <__aeabi_dcmpgt>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d050      	beq.n	8004be0 <_dtoa_r+0x220>
 8004b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b42:	2300      	movs	r3, #0
 8004b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b48:	1b5d      	subs	r5, r3, r5
 8004b4a:	f1b5 0801 	subs.w	r8, r5, #1
 8004b4e:	bf49      	itett	mi
 8004b50:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b54:	2300      	movpl	r3, #0
 8004b56:	9305      	strmi	r3, [sp, #20]
 8004b58:	f04f 0800 	movmi.w	r8, #0
 8004b5c:	bf58      	it	pl
 8004b5e:	9305      	strpl	r3, [sp, #20]
 8004b60:	f1ba 0f00 	cmp.w	sl, #0
 8004b64:	db3e      	blt.n	8004be4 <_dtoa_r+0x224>
 8004b66:	2300      	movs	r3, #0
 8004b68:	44d0      	add	r8, sl
 8004b6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b6e:	9307      	str	r3, [sp, #28]
 8004b70:	9b06      	ldr	r3, [sp, #24]
 8004b72:	2b09      	cmp	r3, #9
 8004b74:	f200 8090 	bhi.w	8004c98 <_dtoa_r+0x2d8>
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	bfc4      	itt	gt
 8004b7c:	3b04      	subgt	r3, #4
 8004b7e:	9306      	strgt	r3, [sp, #24]
 8004b80:	9b06      	ldr	r3, [sp, #24]
 8004b82:	f1a3 0302 	sub.w	r3, r3, #2
 8004b86:	bfcc      	ite	gt
 8004b88:	2500      	movgt	r5, #0
 8004b8a:	2501      	movle	r5, #1
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	f200 808f 	bhi.w	8004cb0 <_dtoa_r+0x2f0>
 8004b92:	e8df f003 	tbb	[pc, r3]
 8004b96:	7f7d      	.short	0x7f7d
 8004b98:	7131      	.short	0x7131
 8004b9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004b9e:	441d      	add	r5, r3
 8004ba0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ba4:	2820      	cmp	r0, #32
 8004ba6:	dd13      	ble.n	8004bd0 <_dtoa_r+0x210>
 8004ba8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004bac:	9b00      	ldr	r3, [sp, #0]
 8004bae:	fa08 f800 	lsl.w	r8, r8, r0
 8004bb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004bb6:	fa23 f000 	lsr.w	r0, r3, r0
 8004bba:	ea48 0000 	orr.w	r0, r8, r0
 8004bbe:	f7fb fca9 	bl	8000514 <__aeabi_ui2d>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004bca:	3d01      	subs	r5, #1
 8004bcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bce:	e772      	b.n	8004ab6 <_dtoa_r+0xf6>
 8004bd0:	9b00      	ldr	r3, [sp, #0]
 8004bd2:	f1c0 0020 	rsb	r0, r0, #32
 8004bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8004bda:	e7f0      	b.n	8004bbe <_dtoa_r+0x1fe>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e7b1      	b.n	8004b44 <_dtoa_r+0x184>
 8004be0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004be2:	e7b0      	b.n	8004b46 <_dtoa_r+0x186>
 8004be4:	9b05      	ldr	r3, [sp, #20]
 8004be6:	eba3 030a 	sub.w	r3, r3, sl
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	f1ca 0300 	rsb	r3, sl, #0
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8004bf6:	e7bb      	b.n	8004b70 <_dtoa_r+0x1b0>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8004bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd59      	ble.n	8004cb6 <_dtoa_r+0x2f6>
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	4699      	mov	r9, r3
 8004c06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6072      	str	r2, [r6, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	f102 0014 	add.w	r0, r2, #20
 8004c12:	4298      	cmp	r0, r3
 8004c14:	6871      	ldr	r1, [r6, #4]
 8004c16:	d953      	bls.n	8004cc0 <_dtoa_r+0x300>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 fe7d 	bl	8005918 <_Balloc>
 8004c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c20:	6030      	str	r0, [r6, #0]
 8004c22:	f1b9 0f0e 	cmp.w	r9, #14
 8004c26:	f8d3 b000 	ldr.w	fp, [r3]
 8004c2a:	f200 80e6 	bhi.w	8004dfa <_dtoa_r+0x43a>
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	f000 80e3 	beq.w	8004dfa <_dtoa_r+0x43a>
 8004c34:	ed9d 7b00 	vldr	d7, [sp]
 8004c38:	f1ba 0f00 	cmp.w	sl, #0
 8004c3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004c40:	dd74      	ble.n	8004d2c <_dtoa_r+0x36c>
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <_dtoa_r+0x32c>)
 8004c44:	f00a 030f 	and.w	r3, sl, #15
 8004c48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c4c:	ed93 7b00 	vldr	d7, [r3]
 8004c50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004c54:	06f0      	lsls	r0, r6, #27
 8004c56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004c5a:	d565      	bpl.n	8004d28 <_dtoa_r+0x368>
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <_dtoa_r+0x330>)
 8004c5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c66:	f7fb fdf9 	bl	800085c <__aeabi_ddiv>
 8004c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c6e:	f006 060f 	and.w	r6, r6, #15
 8004c72:	2503      	movs	r5, #3
 8004c74:	4f1e      	ldr	r7, [pc, #120]	; (8004cf0 <_dtoa_r+0x330>)
 8004c76:	e04c      	b.n	8004d12 <_dtoa_r+0x352>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c7e:	4453      	add	r3, sl
 8004c80:	f103 0901 	add.w	r9, r3, #1
 8004c84:	9302      	str	r3, [sp, #8]
 8004c86:	464b      	mov	r3, r9
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	bfb8      	it	lt
 8004c8c:	2301      	movlt	r3, #1
 8004c8e:	e7ba      	b.n	8004c06 <_dtoa_r+0x246>
 8004c90:	2300      	movs	r3, #0
 8004c92:	e7b2      	b.n	8004bfa <_dtoa_r+0x23a>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e7f0      	b.n	8004c7a <_dtoa_r+0x2ba>
 8004c98:	2501      	movs	r5, #1
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9306      	str	r3, [sp, #24]
 8004c9e:	950a      	str	r5, [sp, #40]	; 0x28
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2312      	movs	r3, #18
 8004cac:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cae:	e7aa      	b.n	8004c06 <_dtoa_r+0x246>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cb4:	e7f4      	b.n	8004ca0 <_dtoa_r+0x2e0>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	9302      	str	r3, [sp, #8]
 8004cba:	4699      	mov	r9, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	e7f5      	b.n	8004cac <_dtoa_r+0x2ec>
 8004cc0:	3101      	adds	r1, #1
 8004cc2:	6071      	str	r1, [r6, #4]
 8004cc4:	0052      	lsls	r2, r2, #1
 8004cc6:	e7a2      	b.n	8004c0e <_dtoa_r+0x24e>
 8004cc8:	636f4361 	.word	0x636f4361
 8004ccc:	3fd287a7 	.word	0x3fd287a7
 8004cd0:	8b60c8b3 	.word	0x8b60c8b3
 8004cd4:	3fc68a28 	.word	0x3fc68a28
 8004cd8:	509f79fb 	.word	0x509f79fb
 8004cdc:	3fd34413 	.word	0x3fd34413
 8004ce0:	7ff00000 	.word	0x7ff00000
 8004ce4:	08006661 	.word	0x08006661
 8004ce8:	3ff80000 	.word	0x3ff80000
 8004cec:	08006720 	.word	0x08006720
 8004cf0:	080066f8 	.word	0x080066f8
 8004cf4:	0800668d 	.word	0x0800668d
 8004cf8:	07f1      	lsls	r1, r6, #31
 8004cfa:	d508      	bpl.n	8004d0e <_dtoa_r+0x34e>
 8004cfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d04:	f7fb fc80 	bl	8000608 <__aeabi_dmul>
 8004d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	1076      	asrs	r6, r6, #1
 8004d10:	3708      	adds	r7, #8
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	d1f0      	bne.n	8004cf8 <_dtoa_r+0x338>
 8004d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d1e:	f7fb fd9d 	bl	800085c <__aeabi_ddiv>
 8004d22:	e9cd 0100 	strd	r0, r1, [sp]
 8004d26:	e01a      	b.n	8004d5e <_dtoa_r+0x39e>
 8004d28:	2502      	movs	r5, #2
 8004d2a:	e7a3      	b.n	8004c74 <_dtoa_r+0x2b4>
 8004d2c:	f000 80a0 	beq.w	8004e70 <_dtoa_r+0x4b0>
 8004d30:	f1ca 0600 	rsb	r6, sl, #0
 8004d34:	4b9f      	ldr	r3, [pc, #636]	; (8004fb4 <_dtoa_r+0x5f4>)
 8004d36:	4fa0      	ldr	r7, [pc, #640]	; (8004fb8 <_dtoa_r+0x5f8>)
 8004d38:	f006 020f 	and.w	r2, r6, #15
 8004d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d48:	f7fb fc5e 	bl	8000608 <__aeabi_dmul>
 8004d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d50:	1136      	asrs	r6, r6, #4
 8004d52:	2300      	movs	r3, #0
 8004d54:	2502      	movs	r5, #2
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d17f      	bne.n	8004e5a <_dtoa_r+0x49a>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e1      	bne.n	8004d22 <_dtoa_r+0x362>
 8004d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8087 	beq.w	8004e74 <_dtoa_r+0x4b4>
 8004d66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b93      	ldr	r3, [pc, #588]	; (8004fbc <_dtoa_r+0x5fc>)
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	f7fb febb 	bl	8000aec <__aeabi_dcmplt>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d07c      	beq.n	8004e74 <_dtoa_r+0x4b4>
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	d079      	beq.n	8004e74 <_dtoa_r+0x4b4>
 8004d80:	9b02      	ldr	r3, [sp, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dd35      	ble.n	8004df2 <_dtoa_r+0x432>
 8004d86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d8a:	9308      	str	r3, [sp, #32]
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4b8b      	ldr	r3, [pc, #556]	; (8004fc0 <_dtoa_r+0x600>)
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7fb fc38 	bl	8000608 <__aeabi_dmul>
 8004d98:	e9cd 0100 	strd	r0, r1, [sp]
 8004d9c:	9f02      	ldr	r7, [sp, #8]
 8004d9e:	3501      	adds	r5, #1
 8004da0:	4628      	mov	r0, r5
 8004da2:	f7fb fbc7 	bl	8000534 <__aeabi_i2d>
 8004da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004daa:	f7fb fc2d 	bl	8000608 <__aeabi_dmul>
 8004dae:	2200      	movs	r2, #0
 8004db0:	4b84      	ldr	r3, [pc, #528]	; (8004fc4 <_dtoa_r+0x604>)
 8004db2:	f7fb fa73 	bl	800029c <__adddf3>
 8004db6:	4605      	mov	r5, r0
 8004db8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dbc:	2f00      	cmp	r7, #0
 8004dbe:	d15d      	bne.n	8004e7c <_dtoa_r+0x4bc>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <_dtoa_r+0x608>)
 8004dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dc8:	f7fb fa66 	bl	8000298 <__aeabi_dsub>
 8004dcc:	462a      	mov	r2, r5
 8004dce:	4633      	mov	r3, r6
 8004dd0:	e9cd 0100 	strd	r0, r1, [sp]
 8004dd4:	f7fb fea8 	bl	8000b28 <__aeabi_dcmpgt>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f040 8288 	bne.w	80052ee <_dtoa_r+0x92e>
 8004dde:	462a      	mov	r2, r5
 8004de0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004de8:	f7fb fe80 	bl	8000aec <__aeabi_dcmplt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f040 827c 	bne.w	80052ea <_dtoa_r+0x92a>
 8004df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004df6:	e9cd 2300 	strd	r2, r3, [sp]
 8004dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f2c0 8150 	blt.w	80050a2 <_dtoa_r+0x6e2>
 8004e02:	f1ba 0f0e 	cmp.w	sl, #14
 8004e06:	f300 814c 	bgt.w	80050a2 <_dtoa_r+0x6e2>
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <_dtoa_r+0x5f4>)
 8004e0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e10:	ed93 7b00 	vldr	d7, [r3]
 8004e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e1c:	f280 80d8 	bge.w	8004fd0 <_dtoa_r+0x610>
 8004e20:	f1b9 0f00 	cmp.w	r9, #0
 8004e24:	f300 80d4 	bgt.w	8004fd0 <_dtoa_r+0x610>
 8004e28:	f040 825e 	bne.w	80052e8 <_dtoa_r+0x928>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4b66      	ldr	r3, [pc, #408]	; (8004fc8 <_dtoa_r+0x608>)
 8004e30:	ec51 0b17 	vmov	r0, r1, d7
 8004e34:	f7fb fbe8 	bl	8000608 <__aeabi_dmul>
 8004e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e3c:	f7fb fe6a 	bl	8000b14 <__aeabi_dcmpge>
 8004e40:	464f      	mov	r7, r9
 8004e42:	464e      	mov	r6, r9
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f040 8234 	bne.w	80052b2 <_dtoa_r+0x8f2>
 8004e4a:	2331      	movs	r3, #49	; 0x31
 8004e4c:	f10b 0501 	add.w	r5, fp, #1
 8004e50:	f88b 3000 	strb.w	r3, [fp]
 8004e54:	f10a 0a01 	add.w	sl, sl, #1
 8004e58:	e22f      	b.n	80052ba <_dtoa_r+0x8fa>
 8004e5a:	07f2      	lsls	r2, r6, #31
 8004e5c:	d505      	bpl.n	8004e6a <_dtoa_r+0x4aa>
 8004e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e62:	f7fb fbd1 	bl	8000608 <__aeabi_dmul>
 8004e66:	3501      	adds	r5, #1
 8004e68:	2301      	movs	r3, #1
 8004e6a:	1076      	asrs	r6, r6, #1
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	e772      	b.n	8004d56 <_dtoa_r+0x396>
 8004e70:	2502      	movs	r5, #2
 8004e72:	e774      	b.n	8004d5e <_dtoa_r+0x39e>
 8004e74:	f8cd a020 	str.w	sl, [sp, #32]
 8004e78:	464f      	mov	r7, r9
 8004e7a:	e791      	b.n	8004da0 <_dtoa_r+0x3e0>
 8004e7c:	4b4d      	ldr	r3, [pc, #308]	; (8004fb4 <_dtoa_r+0x5f4>)
 8004e7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d047      	beq.n	8004f1c <_dtoa_r+0x55c>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	2000      	movs	r0, #0
 8004e92:	494e      	ldr	r1, [pc, #312]	; (8004fcc <_dtoa_r+0x60c>)
 8004e94:	f7fb fce2 	bl	800085c <__aeabi_ddiv>
 8004e98:	462a      	mov	r2, r5
 8004e9a:	4633      	mov	r3, r6
 8004e9c:	f7fb f9fc 	bl	8000298 <__aeabi_dsub>
 8004ea0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ea4:	465d      	mov	r5, fp
 8004ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eaa:	f7fb fe5d 	bl	8000b68 <__aeabi_d2iz>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	f7fb fb40 	bl	8000534 <__aeabi_i2d>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ebc:	f7fb f9ec 	bl	8000298 <__aeabi_dsub>
 8004ec0:	3630      	adds	r6, #48	; 0x30
 8004ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8004ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eca:	e9cd 0100 	strd	r0, r1, [sp]
 8004ece:	f7fb fe0d 	bl	8000aec <__aeabi_dcmplt>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d163      	bne.n	8004f9e <_dtoa_r+0x5de>
 8004ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eda:	2000      	movs	r0, #0
 8004edc:	4937      	ldr	r1, [pc, #220]	; (8004fbc <_dtoa_r+0x5fc>)
 8004ede:	f7fb f9db 	bl	8000298 <__aeabi_dsub>
 8004ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ee6:	f7fb fe01 	bl	8000aec <__aeabi_dcmplt>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f040 80b7 	bne.w	800505e <_dtoa_r+0x69e>
 8004ef0:	eba5 030b 	sub.w	r3, r5, fp
 8004ef4:	429f      	cmp	r7, r3
 8004ef6:	f77f af7c 	ble.w	8004df2 <_dtoa_r+0x432>
 8004efa:	2200      	movs	r2, #0
 8004efc:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <_dtoa_r+0x600>)
 8004efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f02:	f7fb fb81 	bl	8000608 <__aeabi_dmul>
 8004f06:	2200      	movs	r2, #0
 8004f08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f0c:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <_dtoa_r+0x600>)
 8004f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f12:	f7fb fb79 	bl	8000608 <__aeabi_dmul>
 8004f16:	e9cd 0100 	strd	r0, r1, [sp]
 8004f1a:	e7c4      	b.n	8004ea6 <_dtoa_r+0x4e6>
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4633      	mov	r3, r6
 8004f20:	f7fb fb72 	bl	8000608 <__aeabi_dmul>
 8004f24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f28:	eb0b 0507 	add.w	r5, fp, r7
 8004f2c:	465e      	mov	r6, fp
 8004f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f32:	f7fb fe19 	bl	8000b68 <__aeabi_d2iz>
 8004f36:	4607      	mov	r7, r0
 8004f38:	f7fb fafc 	bl	8000534 <__aeabi_i2d>
 8004f3c:	3730      	adds	r7, #48	; 0x30
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f46:	f7fb f9a7 	bl	8000298 <__aeabi_dsub>
 8004f4a:	f806 7b01 	strb.w	r7, [r6], #1
 8004f4e:	42ae      	cmp	r6, r5
 8004f50:	e9cd 0100 	strd	r0, r1, [sp]
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	d126      	bne.n	8004fa8 <_dtoa_r+0x5e8>
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <_dtoa_r+0x60c>)
 8004f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f60:	f7fb f99c 	bl	800029c <__adddf3>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f6c:	f7fb fddc 	bl	8000b28 <__aeabi_dcmpgt>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d174      	bne.n	800505e <_dtoa_r+0x69e>
 8004f74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f78:	2000      	movs	r0, #0
 8004f7a:	4914      	ldr	r1, [pc, #80]	; (8004fcc <_dtoa_r+0x60c>)
 8004f7c:	f7fb f98c 	bl	8000298 <__aeabi_dsub>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f88:	f7fb fdb0 	bl	8000aec <__aeabi_dcmplt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f43f af30 	beq.w	8004df2 <_dtoa_r+0x432>
 8004f92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f96:	2b30      	cmp	r3, #48	; 0x30
 8004f98:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f9c:	d002      	beq.n	8004fa4 <_dtoa_r+0x5e4>
 8004f9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004fa2:	e04a      	b.n	800503a <_dtoa_r+0x67a>
 8004fa4:	4615      	mov	r5, r2
 8004fa6:	e7f4      	b.n	8004f92 <_dtoa_r+0x5d2>
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <_dtoa_r+0x600>)
 8004faa:	f7fb fb2d 	bl	8000608 <__aeabi_dmul>
 8004fae:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb2:	e7bc      	b.n	8004f2e <_dtoa_r+0x56e>
 8004fb4:	08006720 	.word	0x08006720
 8004fb8:	080066f8 	.word	0x080066f8
 8004fbc:	3ff00000 	.word	0x3ff00000
 8004fc0:	40240000 	.word	0x40240000
 8004fc4:	401c0000 	.word	0x401c0000
 8004fc8:	40140000 	.word	0x40140000
 8004fcc:	3fe00000 	.word	0x3fe00000
 8004fd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fd4:	465d      	mov	r5, fp
 8004fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fda:	4630      	mov	r0, r6
 8004fdc:	4639      	mov	r1, r7
 8004fde:	f7fb fc3d 	bl	800085c <__aeabi_ddiv>
 8004fe2:	f7fb fdc1 	bl	8000b68 <__aeabi_d2iz>
 8004fe6:	4680      	mov	r8, r0
 8004fe8:	f7fb faa4 	bl	8000534 <__aeabi_i2d>
 8004fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff0:	f7fb fb0a 	bl	8000608 <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005000:	f7fb f94a 	bl	8000298 <__aeabi_dsub>
 8005004:	f805 6b01 	strb.w	r6, [r5], #1
 8005008:	eba5 060b 	sub.w	r6, r5, fp
 800500c:	45b1      	cmp	r9, r6
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	d139      	bne.n	8005088 <_dtoa_r+0x6c8>
 8005014:	f7fb f942 	bl	800029c <__adddf3>
 8005018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800501c:	4606      	mov	r6, r0
 800501e:	460f      	mov	r7, r1
 8005020:	f7fb fd82 	bl	8000b28 <__aeabi_dcmpgt>
 8005024:	b9c8      	cbnz	r0, 800505a <_dtoa_r+0x69a>
 8005026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	f7fb fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8005032:	b110      	cbz	r0, 800503a <_dtoa_r+0x67a>
 8005034:	f018 0f01 	tst.w	r8, #1
 8005038:	d10f      	bne.n	800505a <_dtoa_r+0x69a>
 800503a:	9904      	ldr	r1, [sp, #16]
 800503c:	4620      	mov	r0, r4
 800503e:	f000 fc9f 	bl	8005980 <_Bfree>
 8005042:	2300      	movs	r3, #0
 8005044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005046:	702b      	strb	r3, [r5, #0]
 8005048:	f10a 0301 	add.w	r3, sl, #1
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8241 	beq.w	80054d8 <_dtoa_r+0xb18>
 8005056:	601d      	str	r5, [r3, #0]
 8005058:	e23e      	b.n	80054d8 <_dtoa_r+0xb18>
 800505a:	f8cd a020 	str.w	sl, [sp, #32]
 800505e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005062:	2a39      	cmp	r2, #57	; 0x39
 8005064:	f105 33ff 	add.w	r3, r5, #4294967295
 8005068:	d108      	bne.n	800507c <_dtoa_r+0x6bc>
 800506a:	459b      	cmp	fp, r3
 800506c:	d10a      	bne.n	8005084 <_dtoa_r+0x6c4>
 800506e:	9b08      	ldr	r3, [sp, #32]
 8005070:	3301      	adds	r3, #1
 8005072:	9308      	str	r3, [sp, #32]
 8005074:	2330      	movs	r3, #48	; 0x30
 8005076:	f88b 3000 	strb.w	r3, [fp]
 800507a:	465b      	mov	r3, fp
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	3201      	adds	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e78c      	b.n	8004f9e <_dtoa_r+0x5de>
 8005084:	461d      	mov	r5, r3
 8005086:	e7ea      	b.n	800505e <_dtoa_r+0x69e>
 8005088:	2200      	movs	r2, #0
 800508a:	4b9b      	ldr	r3, [pc, #620]	; (80052f8 <_dtoa_r+0x938>)
 800508c:	f7fb fabc 	bl	8000608 <__aeabi_dmul>
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	f7fb fd1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800509c:	2800      	cmp	r0, #0
 800509e:	d09a      	beq.n	8004fd6 <_dtoa_r+0x616>
 80050a0:	e7cb      	b.n	800503a <_dtoa_r+0x67a>
 80050a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	f000 808b 	beq.w	80051c0 <_dtoa_r+0x800>
 80050aa:	9a06      	ldr	r2, [sp, #24]
 80050ac:	2a01      	cmp	r2, #1
 80050ae:	dc6e      	bgt.n	800518e <_dtoa_r+0x7ce>
 80050b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d067      	beq.n	8005186 <_dtoa_r+0x7c6>
 80050b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050ba:	9f07      	ldr	r7, [sp, #28]
 80050bc:	9d05      	ldr	r5, [sp, #20]
 80050be:	9a05      	ldr	r2, [sp, #20]
 80050c0:	2101      	movs	r1, #1
 80050c2:	441a      	add	r2, r3
 80050c4:	4620      	mov	r0, r4
 80050c6:	9205      	str	r2, [sp, #20]
 80050c8:	4498      	add	r8, r3
 80050ca:	f000 fcf9 	bl	8005ac0 <__i2b>
 80050ce:	4606      	mov	r6, r0
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	dd0c      	ble.n	80050ee <_dtoa_r+0x72e>
 80050d4:	f1b8 0f00 	cmp.w	r8, #0
 80050d8:	dd09      	ble.n	80050ee <_dtoa_r+0x72e>
 80050da:	4545      	cmp	r5, r8
 80050dc:	9a05      	ldr	r2, [sp, #20]
 80050de:	462b      	mov	r3, r5
 80050e0:	bfa8      	it	ge
 80050e2:	4643      	movge	r3, r8
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	9205      	str	r2, [sp, #20]
 80050e8:	1aed      	subs	r5, r5, r3
 80050ea:	eba8 0803 	sub.w	r8, r8, r3
 80050ee:	9b07      	ldr	r3, [sp, #28]
 80050f0:	b1eb      	cbz	r3, 800512e <_dtoa_r+0x76e>
 80050f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d067      	beq.n	80051c8 <_dtoa_r+0x808>
 80050f8:	b18f      	cbz	r7, 800511e <_dtoa_r+0x75e>
 80050fa:	4631      	mov	r1, r6
 80050fc:	463a      	mov	r2, r7
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 fd7e 	bl	8005c00 <__pow5mult>
 8005104:	9a04      	ldr	r2, [sp, #16]
 8005106:	4601      	mov	r1, r0
 8005108:	4606      	mov	r6, r0
 800510a:	4620      	mov	r0, r4
 800510c:	f000 fce1 	bl	8005ad2 <__multiply>
 8005110:	9904      	ldr	r1, [sp, #16]
 8005112:	9008      	str	r0, [sp, #32]
 8005114:	4620      	mov	r0, r4
 8005116:	f000 fc33 	bl	8005980 <_Bfree>
 800511a:	9b08      	ldr	r3, [sp, #32]
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	9b07      	ldr	r3, [sp, #28]
 8005120:	1bda      	subs	r2, r3, r7
 8005122:	d004      	beq.n	800512e <_dtoa_r+0x76e>
 8005124:	9904      	ldr	r1, [sp, #16]
 8005126:	4620      	mov	r0, r4
 8005128:	f000 fd6a 	bl	8005c00 <__pow5mult>
 800512c:	9004      	str	r0, [sp, #16]
 800512e:	2101      	movs	r1, #1
 8005130:	4620      	mov	r0, r4
 8005132:	f000 fcc5 	bl	8005ac0 <__i2b>
 8005136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005138:	4607      	mov	r7, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 81d0 	beq.w	80054e0 <_dtoa_r+0xb20>
 8005140:	461a      	mov	r2, r3
 8005142:	4601      	mov	r1, r0
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fd5b 	bl	8005c00 <__pow5mult>
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	2b01      	cmp	r3, #1
 800514e:	4607      	mov	r7, r0
 8005150:	dc40      	bgt.n	80051d4 <_dtoa_r+0x814>
 8005152:	9b00      	ldr	r3, [sp, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d139      	bne.n	80051cc <_dtoa_r+0x80c>
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800515e:	2b00      	cmp	r3, #0
 8005160:	d136      	bne.n	80051d0 <_dtoa_r+0x810>
 8005162:	9b01      	ldr	r3, [sp, #4]
 8005164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005168:	0d1b      	lsrs	r3, r3, #20
 800516a:	051b      	lsls	r3, r3, #20
 800516c:	b12b      	cbz	r3, 800517a <_dtoa_r+0x7ba>
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	3301      	adds	r3, #1
 8005172:	9305      	str	r3, [sp, #20]
 8005174:	f108 0801 	add.w	r8, r8, #1
 8005178:	2301      	movs	r3, #1
 800517a:	9307      	str	r3, [sp, #28]
 800517c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d12a      	bne.n	80051d8 <_dtoa_r+0x818>
 8005182:	2001      	movs	r0, #1
 8005184:	e030      	b.n	80051e8 <_dtoa_r+0x828>
 8005186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005188:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800518c:	e795      	b.n	80050ba <_dtoa_r+0x6fa>
 800518e:	9b07      	ldr	r3, [sp, #28]
 8005190:	f109 37ff 	add.w	r7, r9, #4294967295
 8005194:	42bb      	cmp	r3, r7
 8005196:	bfbf      	itttt	lt
 8005198:	9b07      	ldrlt	r3, [sp, #28]
 800519a:	9707      	strlt	r7, [sp, #28]
 800519c:	1afa      	sublt	r2, r7, r3
 800519e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80051a0:	bfbb      	ittet	lt
 80051a2:	189b      	addlt	r3, r3, r2
 80051a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80051a6:	1bdf      	subge	r7, r3, r7
 80051a8:	2700      	movlt	r7, #0
 80051aa:	f1b9 0f00 	cmp.w	r9, #0
 80051ae:	bfb5      	itete	lt
 80051b0:	9b05      	ldrlt	r3, [sp, #20]
 80051b2:	9d05      	ldrge	r5, [sp, #20]
 80051b4:	eba3 0509 	sublt.w	r5, r3, r9
 80051b8:	464b      	movge	r3, r9
 80051ba:	bfb8      	it	lt
 80051bc:	2300      	movlt	r3, #0
 80051be:	e77e      	b.n	80050be <_dtoa_r+0x6fe>
 80051c0:	9f07      	ldr	r7, [sp, #28]
 80051c2:	9d05      	ldr	r5, [sp, #20]
 80051c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80051c6:	e783      	b.n	80050d0 <_dtoa_r+0x710>
 80051c8:	9a07      	ldr	r2, [sp, #28]
 80051ca:	e7ab      	b.n	8005124 <_dtoa_r+0x764>
 80051cc:	2300      	movs	r3, #0
 80051ce:	e7d4      	b.n	800517a <_dtoa_r+0x7ba>
 80051d0:	9b00      	ldr	r3, [sp, #0]
 80051d2:	e7d2      	b.n	800517a <_dtoa_r+0x7ba>
 80051d4:	2300      	movs	r3, #0
 80051d6:	9307      	str	r3, [sp, #28]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80051de:	6918      	ldr	r0, [r3, #16]
 80051e0:	f000 fc20 	bl	8005a24 <__hi0bits>
 80051e4:	f1c0 0020 	rsb	r0, r0, #32
 80051e8:	4440      	add	r0, r8
 80051ea:	f010 001f 	ands.w	r0, r0, #31
 80051ee:	d047      	beq.n	8005280 <_dtoa_r+0x8c0>
 80051f0:	f1c0 0320 	rsb	r3, r0, #32
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	dd3b      	ble.n	8005270 <_dtoa_r+0x8b0>
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	f1c0 001c 	rsb	r0, r0, #28
 80051fe:	4403      	add	r3, r0
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	4405      	add	r5, r0
 8005204:	4480      	add	r8, r0
 8005206:	9b05      	ldr	r3, [sp, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	dd05      	ble.n	8005218 <_dtoa_r+0x858>
 800520c:	461a      	mov	r2, r3
 800520e:	9904      	ldr	r1, [sp, #16]
 8005210:	4620      	mov	r0, r4
 8005212:	f000 fd43 	bl	8005c9c <__lshift>
 8005216:	9004      	str	r0, [sp, #16]
 8005218:	f1b8 0f00 	cmp.w	r8, #0
 800521c:	dd05      	ble.n	800522a <_dtoa_r+0x86a>
 800521e:	4639      	mov	r1, r7
 8005220:	4642      	mov	r2, r8
 8005222:	4620      	mov	r0, r4
 8005224:	f000 fd3a 	bl	8005c9c <__lshift>
 8005228:	4607      	mov	r7, r0
 800522a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800522c:	b353      	cbz	r3, 8005284 <_dtoa_r+0x8c4>
 800522e:	4639      	mov	r1, r7
 8005230:	9804      	ldr	r0, [sp, #16]
 8005232:	f000 fd87 	bl	8005d44 <__mcmp>
 8005236:	2800      	cmp	r0, #0
 8005238:	da24      	bge.n	8005284 <_dtoa_r+0x8c4>
 800523a:	2300      	movs	r3, #0
 800523c:	220a      	movs	r2, #10
 800523e:	9904      	ldr	r1, [sp, #16]
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fbb4 	bl	80059ae <__multadd>
 8005246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005248:	9004      	str	r0, [sp, #16]
 800524a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 814d 	beq.w	80054ee <_dtoa_r+0xb2e>
 8005254:	2300      	movs	r3, #0
 8005256:	4631      	mov	r1, r6
 8005258:	220a      	movs	r2, #10
 800525a:	4620      	mov	r0, r4
 800525c:	f000 fba7 	bl	80059ae <__multadd>
 8005260:	9b02      	ldr	r3, [sp, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	4606      	mov	r6, r0
 8005266:	dc4f      	bgt.n	8005308 <_dtoa_r+0x948>
 8005268:	9b06      	ldr	r3, [sp, #24]
 800526a:	2b02      	cmp	r3, #2
 800526c:	dd4c      	ble.n	8005308 <_dtoa_r+0x948>
 800526e:	e011      	b.n	8005294 <_dtoa_r+0x8d4>
 8005270:	d0c9      	beq.n	8005206 <_dtoa_r+0x846>
 8005272:	9a05      	ldr	r2, [sp, #20]
 8005274:	331c      	adds	r3, #28
 8005276:	441a      	add	r2, r3
 8005278:	9205      	str	r2, [sp, #20]
 800527a:	441d      	add	r5, r3
 800527c:	4498      	add	r8, r3
 800527e:	e7c2      	b.n	8005206 <_dtoa_r+0x846>
 8005280:	4603      	mov	r3, r0
 8005282:	e7f6      	b.n	8005272 <_dtoa_r+0x8b2>
 8005284:	f1b9 0f00 	cmp.w	r9, #0
 8005288:	dc38      	bgt.n	80052fc <_dtoa_r+0x93c>
 800528a:	9b06      	ldr	r3, [sp, #24]
 800528c:	2b02      	cmp	r3, #2
 800528e:	dd35      	ble.n	80052fc <_dtoa_r+0x93c>
 8005290:	f8cd 9008 	str.w	r9, [sp, #8]
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	b963      	cbnz	r3, 80052b2 <_dtoa_r+0x8f2>
 8005298:	4639      	mov	r1, r7
 800529a:	2205      	movs	r2, #5
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fb86 	bl	80059ae <__multadd>
 80052a2:	4601      	mov	r1, r0
 80052a4:	4607      	mov	r7, r0
 80052a6:	9804      	ldr	r0, [sp, #16]
 80052a8:	f000 fd4c 	bl	8005d44 <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f73f adcc 	bgt.w	8004e4a <_dtoa_r+0x48a>
 80052b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b4:	465d      	mov	r5, fp
 80052b6:	ea6f 0a03 	mvn.w	sl, r3
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	4639      	mov	r1, r7
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fb5d 	bl	8005980 <_Bfree>
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	f43f aeb7 	beq.w	800503a <_dtoa_r+0x67a>
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	d005      	beq.n	80052de <_dtoa_r+0x91e>
 80052d2:	45b1      	cmp	r9, r6
 80052d4:	d003      	beq.n	80052de <_dtoa_r+0x91e>
 80052d6:	4649      	mov	r1, r9
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fb51 	bl	8005980 <_Bfree>
 80052de:	4631      	mov	r1, r6
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fb4d 	bl	8005980 <_Bfree>
 80052e6:	e6a8      	b.n	800503a <_dtoa_r+0x67a>
 80052e8:	2700      	movs	r7, #0
 80052ea:	463e      	mov	r6, r7
 80052ec:	e7e1      	b.n	80052b2 <_dtoa_r+0x8f2>
 80052ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052f2:	463e      	mov	r6, r7
 80052f4:	e5a9      	b.n	8004e4a <_dtoa_r+0x48a>
 80052f6:	bf00      	nop
 80052f8:	40240000 	.word	0x40240000
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80fa 	beq.w	80054fc <_dtoa_r+0xb3c>
 8005308:	2d00      	cmp	r5, #0
 800530a:	dd05      	ble.n	8005318 <_dtoa_r+0x958>
 800530c:	4631      	mov	r1, r6
 800530e:	462a      	mov	r2, r5
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fcc3 	bl	8005c9c <__lshift>
 8005316:	4606      	mov	r6, r0
 8005318:	9b07      	ldr	r3, [sp, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d04c      	beq.n	80053b8 <_dtoa_r+0x9f8>
 800531e:	6871      	ldr	r1, [r6, #4]
 8005320:	4620      	mov	r0, r4
 8005322:	f000 faf9 	bl	8005918 <_Balloc>
 8005326:	6932      	ldr	r2, [r6, #16]
 8005328:	3202      	adds	r2, #2
 800532a:	4605      	mov	r5, r0
 800532c:	0092      	lsls	r2, r2, #2
 800532e:	f106 010c 	add.w	r1, r6, #12
 8005332:	300c      	adds	r0, #12
 8005334:	f7fe fcf8 	bl	8003d28 <memcpy>
 8005338:	2201      	movs	r2, #1
 800533a:	4629      	mov	r1, r5
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fcad 	bl	8005c9c <__lshift>
 8005342:	9b00      	ldr	r3, [sp, #0]
 8005344:	f8cd b014 	str.w	fp, [sp, #20]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	46b1      	mov	r9, r6
 800534e:	9307      	str	r3, [sp, #28]
 8005350:	4606      	mov	r6, r0
 8005352:	4639      	mov	r1, r7
 8005354:	9804      	ldr	r0, [sp, #16]
 8005356:	f7ff faa7 	bl	80048a8 <quorem>
 800535a:	4649      	mov	r1, r9
 800535c:	4605      	mov	r5, r0
 800535e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005362:	9804      	ldr	r0, [sp, #16]
 8005364:	f000 fcee 	bl	8005d44 <__mcmp>
 8005368:	4632      	mov	r2, r6
 800536a:	9000      	str	r0, [sp, #0]
 800536c:	4639      	mov	r1, r7
 800536e:	4620      	mov	r0, r4
 8005370:	f000 fd02 	bl	8005d78 <__mdiff>
 8005374:	68c3      	ldr	r3, [r0, #12]
 8005376:	4602      	mov	r2, r0
 8005378:	bb03      	cbnz	r3, 80053bc <_dtoa_r+0x9fc>
 800537a:	4601      	mov	r1, r0
 800537c:	9008      	str	r0, [sp, #32]
 800537e:	9804      	ldr	r0, [sp, #16]
 8005380:	f000 fce0 	bl	8005d44 <__mcmp>
 8005384:	9a08      	ldr	r2, [sp, #32]
 8005386:	4603      	mov	r3, r0
 8005388:	4611      	mov	r1, r2
 800538a:	4620      	mov	r0, r4
 800538c:	9308      	str	r3, [sp, #32]
 800538e:	f000 faf7 	bl	8005980 <_Bfree>
 8005392:	9b08      	ldr	r3, [sp, #32]
 8005394:	b9a3      	cbnz	r3, 80053c0 <_dtoa_r+0xa00>
 8005396:	9a06      	ldr	r2, [sp, #24]
 8005398:	b992      	cbnz	r2, 80053c0 <_dtoa_r+0xa00>
 800539a:	9a07      	ldr	r2, [sp, #28]
 800539c:	b982      	cbnz	r2, 80053c0 <_dtoa_r+0xa00>
 800539e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053a2:	d029      	beq.n	80053f8 <_dtoa_r+0xa38>
 80053a4:	9b00      	ldr	r3, [sp, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd01      	ble.n	80053ae <_dtoa_r+0x9ee>
 80053aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	1c5d      	adds	r5, r3, #1
 80053b2:	f883 8000 	strb.w	r8, [r3]
 80053b6:	e782      	b.n	80052be <_dtoa_r+0x8fe>
 80053b8:	4630      	mov	r0, r6
 80053ba:	e7c2      	b.n	8005342 <_dtoa_r+0x982>
 80053bc:	2301      	movs	r3, #1
 80053be:	e7e3      	b.n	8005388 <_dtoa_r+0x9c8>
 80053c0:	9a00      	ldr	r2, [sp, #0]
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	db04      	blt.n	80053d0 <_dtoa_r+0xa10>
 80053c6:	d125      	bne.n	8005414 <_dtoa_r+0xa54>
 80053c8:	9a06      	ldr	r2, [sp, #24]
 80053ca:	bb1a      	cbnz	r2, 8005414 <_dtoa_r+0xa54>
 80053cc:	9a07      	ldr	r2, [sp, #28]
 80053ce:	bb0a      	cbnz	r2, 8005414 <_dtoa_r+0xa54>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	ddec      	ble.n	80053ae <_dtoa_r+0x9ee>
 80053d4:	2201      	movs	r2, #1
 80053d6:	9904      	ldr	r1, [sp, #16]
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 fc5f 	bl	8005c9c <__lshift>
 80053de:	4639      	mov	r1, r7
 80053e0:	9004      	str	r0, [sp, #16]
 80053e2:	f000 fcaf 	bl	8005d44 <__mcmp>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	dc03      	bgt.n	80053f2 <_dtoa_r+0xa32>
 80053ea:	d1e0      	bne.n	80053ae <_dtoa_r+0x9ee>
 80053ec:	f018 0f01 	tst.w	r8, #1
 80053f0:	d0dd      	beq.n	80053ae <_dtoa_r+0x9ee>
 80053f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053f6:	d1d8      	bne.n	80053aa <_dtoa_r+0x9ea>
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	9a05      	ldr	r2, [sp, #20]
 80053fc:	1c5d      	adds	r5, r3, #1
 80053fe:	2339      	movs	r3, #57	; 0x39
 8005400:	7013      	strb	r3, [r2, #0]
 8005402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005406:	2b39      	cmp	r3, #57	; 0x39
 8005408:	f105 32ff 	add.w	r2, r5, #4294967295
 800540c:	d04f      	beq.n	80054ae <_dtoa_r+0xaee>
 800540e:	3301      	adds	r3, #1
 8005410:	7013      	strb	r3, [r2, #0]
 8005412:	e754      	b.n	80052be <_dtoa_r+0x8fe>
 8005414:	9a05      	ldr	r2, [sp, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f102 0501 	add.w	r5, r2, #1
 800541c:	dd06      	ble.n	800542c <_dtoa_r+0xa6c>
 800541e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005422:	d0e9      	beq.n	80053f8 <_dtoa_r+0xa38>
 8005424:	f108 0801 	add.w	r8, r8, #1
 8005428:	9b05      	ldr	r3, [sp, #20]
 800542a:	e7c2      	b.n	80053b2 <_dtoa_r+0x9f2>
 800542c:	9a02      	ldr	r2, [sp, #8]
 800542e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005432:	eba5 030b 	sub.w	r3, r5, fp
 8005436:	4293      	cmp	r3, r2
 8005438:	d021      	beq.n	800547e <_dtoa_r+0xabe>
 800543a:	2300      	movs	r3, #0
 800543c:	220a      	movs	r2, #10
 800543e:	9904      	ldr	r1, [sp, #16]
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fab4 	bl	80059ae <__multadd>
 8005446:	45b1      	cmp	r9, r6
 8005448:	9004      	str	r0, [sp, #16]
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	f04f 020a 	mov.w	r2, #10
 8005452:	4649      	mov	r1, r9
 8005454:	4620      	mov	r0, r4
 8005456:	d105      	bne.n	8005464 <_dtoa_r+0xaa4>
 8005458:	f000 faa9 	bl	80059ae <__multadd>
 800545c:	4681      	mov	r9, r0
 800545e:	4606      	mov	r6, r0
 8005460:	9505      	str	r5, [sp, #20]
 8005462:	e776      	b.n	8005352 <_dtoa_r+0x992>
 8005464:	f000 faa3 	bl	80059ae <__multadd>
 8005468:	4631      	mov	r1, r6
 800546a:	4681      	mov	r9, r0
 800546c:	2300      	movs	r3, #0
 800546e:	220a      	movs	r2, #10
 8005470:	4620      	mov	r0, r4
 8005472:	f000 fa9c 	bl	80059ae <__multadd>
 8005476:	4606      	mov	r6, r0
 8005478:	e7f2      	b.n	8005460 <_dtoa_r+0xaa0>
 800547a:	f04f 0900 	mov.w	r9, #0
 800547e:	2201      	movs	r2, #1
 8005480:	9904      	ldr	r1, [sp, #16]
 8005482:	4620      	mov	r0, r4
 8005484:	f000 fc0a 	bl	8005c9c <__lshift>
 8005488:	4639      	mov	r1, r7
 800548a:	9004      	str	r0, [sp, #16]
 800548c:	f000 fc5a 	bl	8005d44 <__mcmp>
 8005490:	2800      	cmp	r0, #0
 8005492:	dcb6      	bgt.n	8005402 <_dtoa_r+0xa42>
 8005494:	d102      	bne.n	800549c <_dtoa_r+0xadc>
 8005496:	f018 0f01 	tst.w	r8, #1
 800549a:	d1b2      	bne.n	8005402 <_dtoa_r+0xa42>
 800549c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054a0:	2b30      	cmp	r3, #48	; 0x30
 80054a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80054a6:	f47f af0a 	bne.w	80052be <_dtoa_r+0x8fe>
 80054aa:	4615      	mov	r5, r2
 80054ac:	e7f6      	b.n	800549c <_dtoa_r+0xadc>
 80054ae:	4593      	cmp	fp, r2
 80054b0:	d105      	bne.n	80054be <_dtoa_r+0xafe>
 80054b2:	2331      	movs	r3, #49	; 0x31
 80054b4:	f10a 0a01 	add.w	sl, sl, #1
 80054b8:	f88b 3000 	strb.w	r3, [fp]
 80054bc:	e6ff      	b.n	80052be <_dtoa_r+0x8fe>
 80054be:	4615      	mov	r5, r2
 80054c0:	e79f      	b.n	8005402 <_dtoa_r+0xa42>
 80054c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005528 <_dtoa_r+0xb68>
 80054c6:	e007      	b.n	80054d8 <_dtoa_r+0xb18>
 80054c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800552c <_dtoa_r+0xb6c>
 80054ce:	b11b      	cbz	r3, 80054d8 <_dtoa_r+0xb18>
 80054d0:	f10b 0308 	add.w	r3, fp, #8
 80054d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4658      	mov	r0, fp
 80054da:	b017      	add	sp, #92	; 0x5c
 80054dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e0:	9b06      	ldr	r3, [sp, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	f77f ae35 	ble.w	8005152 <_dtoa_r+0x792>
 80054e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	e649      	b.n	8005182 <_dtoa_r+0x7c2>
 80054ee:	9b02      	ldr	r3, [sp, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dc03      	bgt.n	80054fc <_dtoa_r+0xb3c>
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	f73f aecc 	bgt.w	8005294 <_dtoa_r+0x8d4>
 80054fc:	465d      	mov	r5, fp
 80054fe:	4639      	mov	r1, r7
 8005500:	9804      	ldr	r0, [sp, #16]
 8005502:	f7ff f9d1 	bl	80048a8 <quorem>
 8005506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800550a:	f805 8b01 	strb.w	r8, [r5], #1
 800550e:	9a02      	ldr	r2, [sp, #8]
 8005510:	eba5 030b 	sub.w	r3, r5, fp
 8005514:	429a      	cmp	r2, r3
 8005516:	ddb0      	ble.n	800547a <_dtoa_r+0xaba>
 8005518:	2300      	movs	r3, #0
 800551a:	220a      	movs	r2, #10
 800551c:	9904      	ldr	r1, [sp, #16]
 800551e:	4620      	mov	r0, r4
 8005520:	f000 fa45 	bl	80059ae <__multadd>
 8005524:	9004      	str	r0, [sp, #16]
 8005526:	e7ea      	b.n	80054fe <_dtoa_r+0xb3e>
 8005528:	08006660 	.word	0x08006660
 800552c:	08006684 	.word	0x08006684

08005530 <__sflush_r>:
 8005530:	898a      	ldrh	r2, [r1, #12]
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	4605      	mov	r5, r0
 8005538:	0710      	lsls	r0, r2, #28
 800553a:	460c      	mov	r4, r1
 800553c:	d458      	bmi.n	80055f0 <__sflush_r+0xc0>
 800553e:	684b      	ldr	r3, [r1, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dc05      	bgt.n	8005550 <__sflush_r+0x20>
 8005544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	dc02      	bgt.n	8005550 <__sflush_r+0x20>
 800554a:	2000      	movs	r0, #0
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005552:	2e00      	cmp	r6, #0
 8005554:	d0f9      	beq.n	800554a <__sflush_r+0x1a>
 8005556:	2300      	movs	r3, #0
 8005558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800555c:	682f      	ldr	r7, [r5, #0]
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	d032      	beq.n	80055ca <__sflush_r+0x9a>
 8005564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	075a      	lsls	r2, r3, #29
 800556a:	d505      	bpl.n	8005578 <__sflush_r+0x48>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005572:	b10b      	cbz	r3, 8005578 <__sflush_r+0x48>
 8005574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005576:	1ac0      	subs	r0, r0, r3
 8005578:	2300      	movs	r3, #0
 800557a:	4602      	mov	r2, r0
 800557c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557e:	6a21      	ldr	r1, [r4, #32]
 8005580:	4628      	mov	r0, r5
 8005582:	47b0      	blx	r6
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	d106      	bne.n	8005598 <__sflush_r+0x68>
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	291d      	cmp	r1, #29
 800558e:	d848      	bhi.n	8005622 <__sflush_r+0xf2>
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <__sflush_r+0x108>)
 8005592:	40ca      	lsrs	r2, r1
 8005594:	07d6      	lsls	r6, r2, #31
 8005596:	d544      	bpl.n	8005622 <__sflush_r+0xf2>
 8005598:	2200      	movs	r2, #0
 800559a:	6062      	str	r2, [r4, #4]
 800559c:	04d9      	lsls	r1, r3, #19
 800559e:	6922      	ldr	r2, [r4, #16]
 80055a0:	6022      	str	r2, [r4, #0]
 80055a2:	d504      	bpl.n	80055ae <__sflush_r+0x7e>
 80055a4:	1c42      	adds	r2, r0, #1
 80055a6:	d101      	bne.n	80055ac <__sflush_r+0x7c>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b903      	cbnz	r3, 80055ae <__sflush_r+0x7e>
 80055ac:	6560      	str	r0, [r4, #84]	; 0x54
 80055ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b0:	602f      	str	r7, [r5, #0]
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d0c9      	beq.n	800554a <__sflush_r+0x1a>
 80055b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ba:	4299      	cmp	r1, r3
 80055bc:	d002      	beq.n	80055c4 <__sflush_r+0x94>
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fc94 	bl	8005eec <_free_r>
 80055c4:	2000      	movs	r0, #0
 80055c6:	6360      	str	r0, [r4, #52]	; 0x34
 80055c8:	e7c0      	b.n	800554c <__sflush_r+0x1c>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b0      	blx	r6
 80055d0:	1c41      	adds	r1, r0, #1
 80055d2:	d1c8      	bne.n	8005566 <__sflush_r+0x36>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c5      	beq.n	8005566 <__sflush_r+0x36>
 80055da:	2b1d      	cmp	r3, #29
 80055dc:	d001      	beq.n	80055e2 <__sflush_r+0xb2>
 80055de:	2b16      	cmp	r3, #22
 80055e0:	d101      	bne.n	80055e6 <__sflush_r+0xb6>
 80055e2:	602f      	str	r7, [r5, #0]
 80055e4:	e7b1      	b.n	800554a <__sflush_r+0x1a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	e7ad      	b.n	800554c <__sflush_r+0x1c>
 80055f0:	690f      	ldr	r7, [r1, #16]
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	d0a9      	beq.n	800554a <__sflush_r+0x1a>
 80055f6:	0793      	lsls	r3, r2, #30
 80055f8:	680e      	ldr	r6, [r1, #0]
 80055fa:	bf08      	it	eq
 80055fc:	694b      	ldreq	r3, [r1, #20]
 80055fe:	600f      	str	r7, [r1, #0]
 8005600:	bf18      	it	ne
 8005602:	2300      	movne	r3, #0
 8005604:	eba6 0807 	sub.w	r8, r6, r7
 8005608:	608b      	str	r3, [r1, #8]
 800560a:	f1b8 0f00 	cmp.w	r8, #0
 800560e:	dd9c      	ble.n	800554a <__sflush_r+0x1a>
 8005610:	4643      	mov	r3, r8
 8005612:	463a      	mov	r2, r7
 8005614:	6a21      	ldr	r1, [r4, #32]
 8005616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005618:	4628      	mov	r0, r5
 800561a:	47b0      	blx	r6
 800561c:	2800      	cmp	r0, #0
 800561e:	dc06      	bgt.n	800562e <__sflush_r+0xfe>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e78e      	b.n	800554c <__sflush_r+0x1c>
 800562e:	4407      	add	r7, r0
 8005630:	eba8 0800 	sub.w	r8, r8, r0
 8005634:	e7e9      	b.n	800560a <__sflush_r+0xda>
 8005636:	bf00      	nop
 8005638:	20400001 	.word	0x20400001

0800563c <_fflush_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b1db      	cbz	r3, 800567e <_fflush_r+0x42>
 8005646:	b118      	cbz	r0, 8005650 <_fflush_r+0x14>
 8005648:	6983      	ldr	r3, [r0, #24]
 800564a:	b90b      	cbnz	r3, 8005650 <_fflush_r+0x14>
 800564c:	f000 f860 	bl	8005710 <__sinit>
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <_fflush_r+0x48>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d109      	bne.n	800566a <_fflush_r+0x2e>
 8005656:	686c      	ldr	r4, [r5, #4]
 8005658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565c:	b17b      	cbz	r3, 800567e <_fflush_r+0x42>
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005666:	f7ff bf63 	b.w	8005530 <__sflush_r>
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <_fflush_r+0x4c>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d101      	bne.n	8005674 <_fflush_r+0x38>
 8005670:	68ac      	ldr	r4, [r5, #8]
 8005672:	e7f1      	b.n	8005658 <_fflush_r+0x1c>
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <_fflush_r+0x50>)
 8005676:	429c      	cmp	r4, r3
 8005678:	bf08      	it	eq
 800567a:	68ec      	ldreq	r4, [r5, #12]
 800567c:	e7ec      	b.n	8005658 <_fflush_r+0x1c>
 800567e:	2000      	movs	r0, #0
 8005680:	bd38      	pop	{r3, r4, r5, pc}
 8005682:	bf00      	nop
 8005684:	080066b4 	.word	0x080066b4
 8005688:	080066d4 	.word	0x080066d4
 800568c:	08006694 	.word	0x08006694

08005690 <std>:
 8005690:	2300      	movs	r3, #0
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	e9c0 3300 	strd	r3, r3, [r0]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056a6:	6183      	str	r3, [r0, #24]
 80056a8:	4619      	mov	r1, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	305c      	adds	r0, #92	; 0x5c
 80056ae:	f7fe fb46 	bl	8003d3e <memset>
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x38>)
 80056b4:	6263      	str	r3, [r4, #36]	; 0x24
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x3c>)
 80056b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <std+0x40>)
 80056bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <std+0x44>)
 80056c0:	6224      	str	r4, [r4, #32]
 80056c2:	6323      	str	r3, [r4, #48]	; 0x30
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	08006349 	.word	0x08006349
 80056cc:	0800636b 	.word	0x0800636b
 80056d0:	080063a3 	.word	0x080063a3
 80056d4:	080063c7 	.word	0x080063c7

080056d8 <_cleanup_r>:
 80056d8:	4901      	ldr	r1, [pc, #4]	; (80056e0 <_cleanup_r+0x8>)
 80056da:	f000 b885 	b.w	80057e8 <_fwalk_reent>
 80056de:	bf00      	nop
 80056e0:	0800563d 	.word	0x0800563d

080056e4 <__sfmoreglue>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	1e4a      	subs	r2, r1, #1
 80056e8:	2568      	movs	r5, #104	; 0x68
 80056ea:	4355      	muls	r5, r2
 80056ec:	460e      	mov	r6, r1
 80056ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f2:	f000 fc49 	bl	8005f88 <_malloc_r>
 80056f6:	4604      	mov	r4, r0
 80056f8:	b140      	cbz	r0, 800570c <__sfmoreglue+0x28>
 80056fa:	2100      	movs	r1, #0
 80056fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005700:	300c      	adds	r0, #12
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005708:	f7fe fb19 	bl	8003d3e <memset>
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__sinit>:
 8005710:	6983      	ldr	r3, [r0, #24]
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	bb33      	cbnz	r3, 8005766 <__sinit+0x56>
 8005718:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800571c:	6503      	str	r3, [r0, #80]	; 0x50
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <__sinit+0x58>)
 8005720:	4a12      	ldr	r2, [pc, #72]	; (800576c <__sinit+0x5c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6282      	str	r2, [r0, #40]	; 0x28
 8005726:	4298      	cmp	r0, r3
 8005728:	bf04      	itt	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	6183      	streq	r3, [r0, #24]
 800572e:	f000 f81f 	bl	8005770 <__sfp>
 8005732:	6060      	str	r0, [r4, #4]
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f81b 	bl	8005770 <__sfp>
 800573a:	60a0      	str	r0, [r4, #8]
 800573c:	4620      	mov	r0, r4
 800573e:	f000 f817 	bl	8005770 <__sfp>
 8005742:	2200      	movs	r2, #0
 8005744:	60e0      	str	r0, [r4, #12]
 8005746:	2104      	movs	r1, #4
 8005748:	6860      	ldr	r0, [r4, #4]
 800574a:	f7ff ffa1 	bl	8005690 <std>
 800574e:	2201      	movs	r2, #1
 8005750:	2109      	movs	r1, #9
 8005752:	68a0      	ldr	r0, [r4, #8]
 8005754:	f7ff ff9c 	bl	8005690 <std>
 8005758:	2202      	movs	r2, #2
 800575a:	2112      	movs	r1, #18
 800575c:	68e0      	ldr	r0, [r4, #12]
 800575e:	f7ff ff97 	bl	8005690 <std>
 8005762:	2301      	movs	r3, #1
 8005764:	61a3      	str	r3, [r4, #24]
 8005766:	bd10      	pop	{r4, pc}
 8005768:	0800664c 	.word	0x0800664c
 800576c:	080056d9 	.word	0x080056d9

08005770 <__sfp>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <__sfp+0x70>)
 8005774:	681e      	ldr	r6, [r3, #0]
 8005776:	69b3      	ldr	r3, [r6, #24]
 8005778:	4607      	mov	r7, r0
 800577a:	b913      	cbnz	r3, 8005782 <__sfp+0x12>
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff ffc7 	bl	8005710 <__sinit>
 8005782:	3648      	adds	r6, #72	; 0x48
 8005784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	d503      	bpl.n	8005794 <__sfp+0x24>
 800578c:	6833      	ldr	r3, [r6, #0]
 800578e:	b133      	cbz	r3, 800579e <__sfp+0x2e>
 8005790:	6836      	ldr	r6, [r6, #0]
 8005792:	e7f7      	b.n	8005784 <__sfp+0x14>
 8005794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005798:	b16d      	cbz	r5, 80057b6 <__sfp+0x46>
 800579a:	3468      	adds	r4, #104	; 0x68
 800579c:	e7f4      	b.n	8005788 <__sfp+0x18>
 800579e:	2104      	movs	r1, #4
 80057a0:	4638      	mov	r0, r7
 80057a2:	f7ff ff9f 	bl	80056e4 <__sfmoreglue>
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1f1      	bne.n	8005790 <__sfp+0x20>
 80057ac:	230c      	movs	r3, #12
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4604      	mov	r4, r0
 80057b2:	4620      	mov	r0, r4
 80057b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <__sfp+0x74>)
 80057b8:	6665      	str	r5, [r4, #100]	; 0x64
 80057ba:	e9c4 5500 	strd	r5, r5, [r4]
 80057be:	60a5      	str	r5, [r4, #8]
 80057c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057c8:	2208      	movs	r2, #8
 80057ca:	4629      	mov	r1, r5
 80057cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d0:	f7fe fab5 	bl	8003d3e <memset>
 80057d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057dc:	e7e9      	b.n	80057b2 <__sfp+0x42>
 80057de:	bf00      	nop
 80057e0:	0800664c 	.word	0x0800664c
 80057e4:	ffff0001 	.word	0xffff0001

080057e8 <_fwalk_reent>:
 80057e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057f4:	2600      	movs	r6, #0
 80057f6:	b914      	cbnz	r4, 80057fe <_fwalk_reent+0x16>
 80057f8:	4630      	mov	r0, r6
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005802:	3f01      	subs	r7, #1
 8005804:	d501      	bpl.n	800580a <_fwalk_reent+0x22>
 8005806:	6824      	ldr	r4, [r4, #0]
 8005808:	e7f5      	b.n	80057f6 <_fwalk_reent+0xe>
 800580a:	89ab      	ldrh	r3, [r5, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d907      	bls.n	8005820 <_fwalk_reent+0x38>
 8005810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005814:	3301      	adds	r3, #1
 8005816:	d003      	beq.n	8005820 <_fwalk_reent+0x38>
 8005818:	4629      	mov	r1, r5
 800581a:	4640      	mov	r0, r8
 800581c:	47c8      	blx	r9
 800581e:	4306      	orrs	r6, r0
 8005820:	3568      	adds	r5, #104	; 0x68
 8005822:	e7ee      	b.n	8005802 <_fwalk_reent+0x1a>

08005824 <_localeconv_r>:
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <_localeconv_r+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a18      	ldr	r0, [r3, #32]
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <_localeconv_r+0x18>)
 800582c:	2800      	cmp	r0, #0
 800582e:	bf08      	it	eq
 8005830:	4618      	moveq	r0, r3
 8005832:	30f0      	adds	r0, #240	; 0xf0
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	2000000c 	.word	0x2000000c
 800583c:	20000070 	.word	0x20000070

08005840 <__swhatbuf_r>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	460e      	mov	r6, r1
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	2900      	cmp	r1, #0
 800584a:	b096      	sub	sp, #88	; 0x58
 800584c:	4614      	mov	r4, r2
 800584e:	461d      	mov	r5, r3
 8005850:	da07      	bge.n	8005862 <__swhatbuf_r+0x22>
 8005852:	2300      	movs	r3, #0
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	89b3      	ldrh	r3, [r6, #12]
 8005858:	061a      	lsls	r2, r3, #24
 800585a:	d410      	bmi.n	800587e <__swhatbuf_r+0x3e>
 800585c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005860:	e00e      	b.n	8005880 <__swhatbuf_r+0x40>
 8005862:	466a      	mov	r2, sp
 8005864:	f000 fdd6 	bl	8006414 <_fstat_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	dbf2      	blt.n	8005852 <__swhatbuf_r+0x12>
 800586c:	9a01      	ldr	r2, [sp, #4]
 800586e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005876:	425a      	negs	r2, r3
 8005878:	415a      	adcs	r2, r3
 800587a:	602a      	str	r2, [r5, #0]
 800587c:	e7ee      	b.n	800585c <__swhatbuf_r+0x1c>
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	2000      	movs	r0, #0
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	b016      	add	sp, #88	; 0x58
 8005886:	bd70      	pop	{r4, r5, r6, pc}

08005888 <__smakebuf_r>:
 8005888:	898b      	ldrh	r3, [r1, #12]
 800588a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800588c:	079d      	lsls	r5, r3, #30
 800588e:	4606      	mov	r6, r0
 8005890:	460c      	mov	r4, r1
 8005892:	d507      	bpl.n	80058a4 <__smakebuf_r+0x1c>
 8005894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	2301      	movs	r3, #1
 800589e:	6163      	str	r3, [r4, #20]
 80058a0:	b002      	add	sp, #8
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	ab01      	add	r3, sp, #4
 80058a6:	466a      	mov	r2, sp
 80058a8:	f7ff ffca 	bl	8005840 <__swhatbuf_r>
 80058ac:	9900      	ldr	r1, [sp, #0]
 80058ae:	4605      	mov	r5, r0
 80058b0:	4630      	mov	r0, r6
 80058b2:	f000 fb69 	bl	8005f88 <_malloc_r>
 80058b6:	b948      	cbnz	r0, 80058cc <__smakebuf_r+0x44>
 80058b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058bc:	059a      	lsls	r2, r3, #22
 80058be:	d4ef      	bmi.n	80058a0 <__smakebuf_r+0x18>
 80058c0:	f023 0303 	bic.w	r3, r3, #3
 80058c4:	f043 0302 	orr.w	r3, r3, #2
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	e7e3      	b.n	8005894 <__smakebuf_r+0xc>
 80058cc:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <__smakebuf_r+0x7c>)
 80058ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	6020      	str	r0, [r4, #0]
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	6163      	str	r3, [r4, #20]
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	6120      	str	r0, [r4, #16]
 80058e2:	b15b      	cbz	r3, 80058fc <__smakebuf_r+0x74>
 80058e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e8:	4630      	mov	r0, r6
 80058ea:	f000 fda5 	bl	8006438 <_isatty_r>
 80058ee:	b128      	cbz	r0, 80058fc <__smakebuf_r+0x74>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	431d      	orrs	r5, r3
 8005900:	81a5      	strh	r5, [r4, #12]
 8005902:	e7cd      	b.n	80058a0 <__smakebuf_r+0x18>
 8005904:	080056d9 	.word	0x080056d9

08005908 <malloc>:
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <malloc+0xc>)
 800590a:	4601      	mov	r1, r0
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f000 bb3b 	b.w	8005f88 <_malloc_r>
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c

08005918 <_Balloc>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800591c:	4604      	mov	r4, r0
 800591e:	460e      	mov	r6, r1
 8005920:	b93d      	cbnz	r5, 8005932 <_Balloc+0x1a>
 8005922:	2010      	movs	r0, #16
 8005924:	f7ff fff0 	bl	8005908 <malloc>
 8005928:	6260      	str	r0, [r4, #36]	; 0x24
 800592a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800592e:	6005      	str	r5, [r0, #0]
 8005930:	60c5      	str	r5, [r0, #12]
 8005932:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005934:	68eb      	ldr	r3, [r5, #12]
 8005936:	b183      	cbz	r3, 800595a <_Balloc+0x42>
 8005938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005940:	b9b8      	cbnz	r0, 8005972 <_Balloc+0x5a>
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f506 	lsl.w	r5, r1, r6
 8005948:	1d6a      	adds	r2, r5, #5
 800594a:	0092      	lsls	r2, r2, #2
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fabf 	bl	8005ed0 <_calloc_r>
 8005952:	b160      	cbz	r0, 800596e <_Balloc+0x56>
 8005954:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005958:	e00e      	b.n	8005978 <_Balloc+0x60>
 800595a:	2221      	movs	r2, #33	; 0x21
 800595c:	2104      	movs	r1, #4
 800595e:	4620      	mov	r0, r4
 8005960:	f000 fab6 	bl	8005ed0 <_calloc_r>
 8005964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005966:	60e8      	str	r0, [r5, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e4      	bne.n	8005938 <_Balloc+0x20>
 800596e:	2000      	movs	r0, #0
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	6802      	ldr	r2, [r0, #0]
 8005974:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005978:	2300      	movs	r3, #0
 800597a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800597e:	e7f7      	b.n	8005970 <_Balloc+0x58>

08005980 <_Bfree>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005984:	4606      	mov	r6, r0
 8005986:	460d      	mov	r5, r1
 8005988:	b93c      	cbnz	r4, 800599a <_Bfree+0x1a>
 800598a:	2010      	movs	r0, #16
 800598c:	f7ff ffbc 	bl	8005908 <malloc>
 8005990:	6270      	str	r0, [r6, #36]	; 0x24
 8005992:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005996:	6004      	str	r4, [r0, #0]
 8005998:	60c4      	str	r4, [r0, #12]
 800599a:	b13d      	cbz	r5, 80059ac <_Bfree+0x2c>
 800599c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800599e:	686a      	ldr	r2, [r5, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059a6:	6029      	str	r1, [r5, #0]
 80059a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059ac:	bd70      	pop	{r4, r5, r6, pc}

080059ae <__multadd>:
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	690d      	ldr	r5, [r1, #16]
 80059b4:	461f      	mov	r7, r3
 80059b6:	4606      	mov	r6, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	f101 0c14 	add.w	ip, r1, #20
 80059be:	2300      	movs	r3, #0
 80059c0:	f8dc 0000 	ldr.w	r0, [ip]
 80059c4:	b281      	uxth	r1, r0
 80059c6:	fb02 7101 	mla	r1, r2, r1, r7
 80059ca:	0c0f      	lsrs	r7, r1, #16
 80059cc:	0c00      	lsrs	r0, r0, #16
 80059ce:	fb02 7000 	mla	r0, r2, r0, r7
 80059d2:	b289      	uxth	r1, r1
 80059d4:	3301      	adds	r3, #1
 80059d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059da:	429d      	cmp	r5, r3
 80059dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059e0:	f84c 1b04 	str.w	r1, [ip], #4
 80059e4:	dcec      	bgt.n	80059c0 <__multadd+0x12>
 80059e6:	b1d7      	cbz	r7, 8005a1e <__multadd+0x70>
 80059e8:	68a3      	ldr	r3, [r4, #8]
 80059ea:	42ab      	cmp	r3, r5
 80059ec:	dc12      	bgt.n	8005a14 <__multadd+0x66>
 80059ee:	6861      	ldr	r1, [r4, #4]
 80059f0:	4630      	mov	r0, r6
 80059f2:	3101      	adds	r1, #1
 80059f4:	f7ff ff90 	bl	8005918 <_Balloc>
 80059f8:	6922      	ldr	r2, [r4, #16]
 80059fa:	3202      	adds	r2, #2
 80059fc:	f104 010c 	add.w	r1, r4, #12
 8005a00:	4680      	mov	r8, r0
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	300c      	adds	r0, #12
 8005a06:	f7fe f98f 	bl	8003d28 <memcpy>
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff ffb7 	bl	8005980 <_Bfree>
 8005a12:	4644      	mov	r4, r8
 8005a14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a18:	3501      	adds	r5, #1
 8005a1a:	615f      	str	r7, [r3, #20]
 8005a1c:	6125      	str	r5, [r4, #16]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a24 <__hi0bits>:
 8005a24:	0c02      	lsrs	r2, r0, #16
 8005a26:	0412      	lsls	r2, r2, #16
 8005a28:	4603      	mov	r3, r0
 8005a2a:	b9b2      	cbnz	r2, 8005a5a <__hi0bits+0x36>
 8005a2c:	0403      	lsls	r3, r0, #16
 8005a2e:	2010      	movs	r0, #16
 8005a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a34:	bf04      	itt	eq
 8005a36:	021b      	lsleq	r3, r3, #8
 8005a38:	3008      	addeq	r0, #8
 8005a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a3e:	bf04      	itt	eq
 8005a40:	011b      	lsleq	r3, r3, #4
 8005a42:	3004      	addeq	r0, #4
 8005a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a48:	bf04      	itt	eq
 8005a4a:	009b      	lsleq	r3, r3, #2
 8005a4c:	3002      	addeq	r0, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	db06      	blt.n	8005a60 <__hi0bits+0x3c>
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	d503      	bpl.n	8005a5e <__hi0bits+0x3a>
 8005a56:	3001      	adds	r0, #1
 8005a58:	4770      	bx	lr
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e7e8      	b.n	8005a30 <__hi0bits+0xc>
 8005a5e:	2020      	movs	r0, #32
 8005a60:	4770      	bx	lr

08005a62 <__lo0bits>:
 8005a62:	6803      	ldr	r3, [r0, #0]
 8005a64:	f013 0207 	ands.w	r2, r3, #7
 8005a68:	4601      	mov	r1, r0
 8005a6a:	d00b      	beq.n	8005a84 <__lo0bits+0x22>
 8005a6c:	07da      	lsls	r2, r3, #31
 8005a6e:	d423      	bmi.n	8005ab8 <__lo0bits+0x56>
 8005a70:	0798      	lsls	r0, r3, #30
 8005a72:	bf49      	itett	mi
 8005a74:	085b      	lsrmi	r3, r3, #1
 8005a76:	089b      	lsrpl	r3, r3, #2
 8005a78:	2001      	movmi	r0, #1
 8005a7a:	600b      	strmi	r3, [r1, #0]
 8005a7c:	bf5c      	itt	pl
 8005a7e:	600b      	strpl	r3, [r1, #0]
 8005a80:	2002      	movpl	r0, #2
 8005a82:	4770      	bx	lr
 8005a84:	b298      	uxth	r0, r3
 8005a86:	b9a8      	cbnz	r0, 8005ab4 <__lo0bits+0x52>
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a90:	bf04      	itt	eq
 8005a92:	0a1b      	lsreq	r3, r3, #8
 8005a94:	3008      	addeq	r0, #8
 8005a96:	071a      	lsls	r2, r3, #28
 8005a98:	bf04      	itt	eq
 8005a9a:	091b      	lsreq	r3, r3, #4
 8005a9c:	3004      	addeq	r0, #4
 8005a9e:	079a      	lsls	r2, r3, #30
 8005aa0:	bf04      	itt	eq
 8005aa2:	089b      	lsreq	r3, r3, #2
 8005aa4:	3002      	addeq	r0, #2
 8005aa6:	07da      	lsls	r2, r3, #31
 8005aa8:	d402      	bmi.n	8005ab0 <__lo0bits+0x4e>
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	d006      	beq.n	8005abc <__lo0bits+0x5a>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	600b      	str	r3, [r1, #0]
 8005ab2:	4770      	bx	lr
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	e7e9      	b.n	8005a8c <__lo0bits+0x2a>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4770      	bx	lr
 8005abc:	2020      	movs	r0, #32
 8005abe:	4770      	bx	lr

08005ac0 <__i2b>:
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	f7ff ff27 	bl	8005918 <_Balloc>
 8005aca:	2201      	movs	r2, #1
 8005acc:	6144      	str	r4, [r0, #20]
 8005ace:	6102      	str	r2, [r0, #16]
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <__multiply>:
 8005ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	4614      	mov	r4, r2
 8005ad8:	690a      	ldr	r2, [r1, #16]
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bfb8      	it	lt
 8005ae0:	460b      	movlt	r3, r1
 8005ae2:	4688      	mov	r8, r1
 8005ae4:	bfbc      	itt	lt
 8005ae6:	46a0      	movlt	r8, r4
 8005ae8:	461c      	movlt	r4, r3
 8005aea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005aee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005af6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005afa:	eb07 0609 	add.w	r6, r7, r9
 8005afe:	42b3      	cmp	r3, r6
 8005b00:	bfb8      	it	lt
 8005b02:	3101      	addlt	r1, #1
 8005b04:	f7ff ff08 	bl	8005918 <_Balloc>
 8005b08:	f100 0514 	add.w	r5, r0, #20
 8005b0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b10:	462b      	mov	r3, r5
 8005b12:	2200      	movs	r2, #0
 8005b14:	4573      	cmp	r3, lr
 8005b16:	d316      	bcc.n	8005b46 <__multiply+0x74>
 8005b18:	f104 0214 	add.w	r2, r4, #20
 8005b1c:	f108 0114 	add.w	r1, r8, #20
 8005b20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005b24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	9b00      	ldr	r3, [sp, #0]
 8005b2c:	9201      	str	r2, [sp, #4]
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d80c      	bhi.n	8005b4c <__multiply+0x7a>
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	dd03      	ble.n	8005b3e <__multiply+0x6c>
 8005b36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d05d      	beq.n	8005bfa <__multiply+0x128>
 8005b3e:	6106      	str	r6, [r0, #16]
 8005b40:	b003      	add	sp, #12
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b46:	f843 2b04 	str.w	r2, [r3], #4
 8005b4a:	e7e3      	b.n	8005b14 <__multiply+0x42>
 8005b4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b50:	f1bb 0f00 	cmp.w	fp, #0
 8005b54:	d023      	beq.n	8005b9e <__multiply+0xcc>
 8005b56:	4689      	mov	r9, r1
 8005b58:	46ac      	mov	ip, r5
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b62:	f8dc a000 	ldr.w	sl, [ip]
 8005b66:	b2a3      	uxth	r3, r4
 8005b68:	fa1f fa8a 	uxth.w	sl, sl
 8005b6c:	fb0b a303 	mla	r3, fp, r3, sl
 8005b70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b74:	f8dc 4000 	ldr.w	r4, [ip]
 8005b78:	4443      	add	r3, r8
 8005b7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b86:	46e2      	mov	sl, ip
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b8e:	454f      	cmp	r7, r9
 8005b90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b94:	f84a 3b04 	str.w	r3, [sl], #4
 8005b98:	d82b      	bhi.n	8005bf2 <__multiply+0x120>
 8005b9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005ba4:	3204      	adds	r2, #4
 8005ba6:	f1ba 0f00 	cmp.w	sl, #0
 8005baa:	d020      	beq.n	8005bee <__multiply+0x11c>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	4689      	mov	r9, r1
 8005bb0:	46a8      	mov	r8, r5
 8005bb2:	f04f 0b00 	mov.w	fp, #0
 8005bb6:	f8b9 c000 	ldrh.w	ip, [r9]
 8005bba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005bbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8005bc2:	445c      	add	r4, fp
 8005bc4:	46c4      	mov	ip, r8
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bcc:	f84c 3b04 	str.w	r3, [ip], #4
 8005bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	fb0a b303 	mla	r3, sl, r3, fp
 8005bde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005be2:	454f      	cmp	r7, r9
 8005be4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005be8:	d805      	bhi.n	8005bf6 <__multiply+0x124>
 8005bea:	f8c8 3004 	str.w	r3, [r8, #4]
 8005bee:	3504      	adds	r5, #4
 8005bf0:	e79b      	b.n	8005b2a <__multiply+0x58>
 8005bf2:	46d4      	mov	ip, sl
 8005bf4:	e7b3      	b.n	8005b5e <__multiply+0x8c>
 8005bf6:	46e0      	mov	r8, ip
 8005bf8:	e7dd      	b.n	8005bb6 <__multiply+0xe4>
 8005bfa:	3e01      	subs	r6, #1
 8005bfc:	e799      	b.n	8005b32 <__multiply+0x60>
	...

08005c00 <__pow5mult>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	4615      	mov	r5, r2
 8005c06:	f012 0203 	ands.w	r2, r2, #3
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460f      	mov	r7, r1
 8005c0e:	d007      	beq.n	8005c20 <__pow5mult+0x20>
 8005c10:	3a01      	subs	r2, #1
 8005c12:	4c21      	ldr	r4, [pc, #132]	; (8005c98 <__pow5mult+0x98>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c1a:	f7ff fec8 	bl	80059ae <__multadd>
 8005c1e:	4607      	mov	r7, r0
 8005c20:	10ad      	asrs	r5, r5, #2
 8005c22:	d035      	beq.n	8005c90 <__pow5mult+0x90>
 8005c24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c26:	b93c      	cbnz	r4, 8005c38 <__pow5mult+0x38>
 8005c28:	2010      	movs	r0, #16
 8005c2a:	f7ff fe6d 	bl	8005908 <malloc>
 8005c2e:	6270      	str	r0, [r6, #36]	; 0x24
 8005c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c34:	6004      	str	r4, [r0, #0]
 8005c36:	60c4      	str	r4, [r0, #12]
 8005c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c40:	b94c      	cbnz	r4, 8005c56 <__pow5mult+0x56>
 8005c42:	f240 2171 	movw	r1, #625	; 0x271
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ff3a 	bl	8005ac0 <__i2b>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c52:	4604      	mov	r4, r0
 8005c54:	6003      	str	r3, [r0, #0]
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	07eb      	lsls	r3, r5, #31
 8005c5c:	d50a      	bpl.n	8005c74 <__pow5mult+0x74>
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4622      	mov	r2, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ff35 	bl	8005ad2 <__multiply>
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4681      	mov	r9, r0
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff fe87 	bl	8005980 <_Bfree>
 8005c72:	464f      	mov	r7, r9
 8005c74:	106d      	asrs	r5, r5, #1
 8005c76:	d00b      	beq.n	8005c90 <__pow5mult+0x90>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	b938      	cbnz	r0, 8005c8c <__pow5mult+0x8c>
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4630      	mov	r0, r6
 8005c82:	f7ff ff26 	bl	8005ad2 <__multiply>
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	f8c0 8000 	str.w	r8, [r0]
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	e7e4      	b.n	8005c5a <__pow5mult+0x5a>
 8005c90:	4638      	mov	r0, r7
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	bf00      	nop
 8005c98:	080067e8 	.word	0x080067e8

08005c9c <__lshift>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	6849      	ldr	r1, [r1, #4]
 8005caa:	eb0a 0903 	add.w	r9, sl, r3
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	f109 0501 	add.w	r5, r9, #1
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	db32      	blt.n	8005d22 <__lshift+0x86>
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f7ff fe2b 	bl	8005918 <_Balloc>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	f100 0114 	add.w	r1, r0, #20
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4553      	cmp	r3, sl
 8005cce:	db2b      	blt.n	8005d28 <__lshift+0x8c>
 8005cd0:	6920      	ldr	r0, [r4, #16]
 8005cd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cd6:	f104 0314 	add.w	r3, r4, #20
 8005cda:	f016 021f 	ands.w	r2, r6, #31
 8005cde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ce2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ce6:	d025      	beq.n	8005d34 <__lshift+0x98>
 8005ce8:	f1c2 0e20 	rsb	lr, r2, #32
 8005cec:	2000      	movs	r0, #0
 8005cee:	681e      	ldr	r6, [r3, #0]
 8005cf0:	468a      	mov	sl, r1
 8005cf2:	4096      	lsls	r6, r2
 8005cf4:	4330      	orrs	r0, r6
 8005cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8005cfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8005cfe:	459c      	cmp	ip, r3
 8005d00:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d04:	d814      	bhi.n	8005d30 <__lshift+0x94>
 8005d06:	6048      	str	r0, [r1, #4]
 8005d08:	b108      	cbz	r0, 8005d0e <__lshift+0x72>
 8005d0a:	f109 0502 	add.w	r5, r9, #2
 8005d0e:	3d01      	subs	r5, #1
 8005d10:	4638      	mov	r0, r7
 8005d12:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d16:	4621      	mov	r1, r4
 8005d18:	f7ff fe32 	bl	8005980 <_Bfree>
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	3101      	adds	r1, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	e7c7      	b.n	8005cb8 <__lshift+0x1c>
 8005d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	e7cd      	b.n	8005ccc <__lshift+0x30>
 8005d30:	4651      	mov	r1, sl
 8005d32:	e7dc      	b.n	8005cee <__lshift+0x52>
 8005d34:	3904      	subs	r1, #4
 8005d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d3e:	459c      	cmp	ip, r3
 8005d40:	d8f9      	bhi.n	8005d36 <__lshift+0x9a>
 8005d42:	e7e4      	b.n	8005d0e <__lshift+0x72>

08005d44 <__mcmp>:
 8005d44:	6903      	ldr	r3, [r0, #16]
 8005d46:	690a      	ldr	r2, [r1, #16]
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	b530      	push	{r4, r5, lr}
 8005d4c:	d10c      	bne.n	8005d68 <__mcmp+0x24>
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	3014      	adds	r0, #20
 8005d52:	3114      	adds	r1, #20
 8005d54:	1884      	adds	r4, r0, r2
 8005d56:	4411      	add	r1, r2
 8005d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d60:	4295      	cmp	r5, r2
 8005d62:	d003      	beq.n	8005d6c <__mcmp+0x28>
 8005d64:	d305      	bcc.n	8005d72 <__mcmp+0x2e>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd30      	pop	{r4, r5, pc}
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d3f3      	bcc.n	8005d58 <__mcmp+0x14>
 8005d70:	e7fa      	b.n	8005d68 <__mcmp+0x24>
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	e7f7      	b.n	8005d68 <__mcmp+0x24>

08005d78 <__mdiff>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	4607      	mov	r7, r0
 8005d80:	4611      	mov	r1, r2
 8005d82:	4628      	mov	r0, r5
 8005d84:	4614      	mov	r4, r2
 8005d86:	f7ff ffdd 	bl	8005d44 <__mcmp>
 8005d8a:	1e06      	subs	r6, r0, #0
 8005d8c:	d108      	bne.n	8005da0 <__mdiff+0x28>
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff fdc1 	bl	8005918 <_Balloc>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da0:	bfa4      	itt	ge
 8005da2:	4623      	movge	r3, r4
 8005da4:	462c      	movge	r4, r5
 8005da6:	4638      	mov	r0, r7
 8005da8:	6861      	ldr	r1, [r4, #4]
 8005daa:	bfa6      	itte	ge
 8005dac:	461d      	movge	r5, r3
 8005dae:	2600      	movge	r6, #0
 8005db0:	2601      	movlt	r6, #1
 8005db2:	f7ff fdb1 	bl	8005918 <_Balloc>
 8005db6:	692b      	ldr	r3, [r5, #16]
 8005db8:	60c6      	str	r6, [r0, #12]
 8005dba:	6926      	ldr	r6, [r4, #16]
 8005dbc:	f105 0914 	add.w	r9, r5, #20
 8005dc0:	f104 0214 	add.w	r2, r4, #20
 8005dc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005dc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005dcc:	f100 0514 	add.w	r5, r0, #20
 8005dd0:	f04f 0e00 	mov.w	lr, #0
 8005dd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8005dd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ddc:	fa1e f18a 	uxtah	r1, lr, sl
 8005de0:	b2a3      	uxth	r3, r4
 8005de2:	1ac9      	subs	r1, r1, r3
 8005de4:	0c23      	lsrs	r3, r4, #16
 8005de6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005dea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005dee:	b289      	uxth	r1, r1
 8005df0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005df4:	45c8      	cmp	r8, r9
 8005df6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005dfa:	4694      	mov	ip, r2
 8005dfc:	f845 3b04 	str.w	r3, [r5], #4
 8005e00:	d8e8      	bhi.n	8005dd4 <__mdiff+0x5c>
 8005e02:	45bc      	cmp	ip, r7
 8005e04:	d304      	bcc.n	8005e10 <__mdiff+0x98>
 8005e06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005e0a:	b183      	cbz	r3, 8005e2e <__mdiff+0xb6>
 8005e0c:	6106      	str	r6, [r0, #16]
 8005e0e:	e7c5      	b.n	8005d9c <__mdiff+0x24>
 8005e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005e14:	fa1e f381 	uxtah	r3, lr, r1
 8005e18:	141a      	asrs	r2, r3, #16
 8005e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005e28:	f845 3b04 	str.w	r3, [r5], #4
 8005e2c:	e7e9      	b.n	8005e02 <__mdiff+0x8a>
 8005e2e:	3e01      	subs	r6, #1
 8005e30:	e7e9      	b.n	8005e06 <__mdiff+0x8e>

08005e32 <__d2b>:
 8005e32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e36:	460e      	mov	r6, r1
 8005e38:	2101      	movs	r1, #1
 8005e3a:	ec59 8b10 	vmov	r8, r9, d0
 8005e3e:	4615      	mov	r5, r2
 8005e40:	f7ff fd6a 	bl	8005918 <_Balloc>
 8005e44:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e48:	4607      	mov	r7, r0
 8005e4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e4e:	bb34      	cbnz	r4, 8005e9e <__d2b+0x6c>
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	f1b8 0300 	subs.w	r3, r8, #0
 8005e56:	d027      	beq.n	8005ea8 <__d2b+0x76>
 8005e58:	a802      	add	r0, sp, #8
 8005e5a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005e5e:	f7ff fe00 	bl	8005a62 <__lo0bits>
 8005e62:	9900      	ldr	r1, [sp, #0]
 8005e64:	b1f0      	cbz	r0, 8005ea4 <__d2b+0x72>
 8005e66:	9a01      	ldr	r2, [sp, #4]
 8005e68:	f1c0 0320 	rsb	r3, r0, #32
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	430b      	orrs	r3, r1
 8005e72:	40c2      	lsrs	r2, r0
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2102      	movne	r1, #2
 8005e82:	2101      	moveq	r1, #1
 8005e84:	6139      	str	r1, [r7, #16]
 8005e86:	b1c4      	cbz	r4, 8005eba <__d2b+0x88>
 8005e88:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e8c:	4404      	add	r4, r0
 8005e8e:	6034      	str	r4, [r6, #0]
 8005e90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e94:	6028      	str	r0, [r5, #0]
 8005e96:	4638      	mov	r0, r7
 8005e98:	b003      	add	sp, #12
 8005e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea2:	e7d5      	b.n	8005e50 <__d2b+0x1e>
 8005ea4:	6179      	str	r1, [r7, #20]
 8005ea6:	e7e7      	b.n	8005e78 <__d2b+0x46>
 8005ea8:	a801      	add	r0, sp, #4
 8005eaa:	f7ff fdda 	bl	8005a62 <__lo0bits>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	6139      	str	r1, [r7, #16]
 8005eb6:	3020      	adds	r0, #32
 8005eb8:	e7e5      	b.n	8005e86 <__d2b+0x54>
 8005eba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005ebe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ec2:	6030      	str	r0, [r6, #0]
 8005ec4:	6918      	ldr	r0, [r3, #16]
 8005ec6:	f7ff fdad 	bl	8005a24 <__hi0bits>
 8005eca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ece:	e7e1      	b.n	8005e94 <__d2b+0x62>

08005ed0 <_calloc_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	fb02 f401 	mul.w	r4, r2, r1
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	f000 f856 	bl	8005f88 <_malloc_r>
 8005edc:	4605      	mov	r5, r0
 8005ede:	b118      	cbz	r0, 8005ee8 <_calloc_r+0x18>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f7fd ff2b 	bl	8003d3e <memset>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	bd38      	pop	{r3, r4, r5, pc}

08005eec <_free_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4605      	mov	r5, r0
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	d045      	beq.n	8005f80 <_free_r+0x94>
 8005ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef8:	1f0c      	subs	r4, r1, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bfb8      	it	lt
 8005efe:	18e4      	addlt	r4, r4, r3
 8005f00:	f000 face 	bl	80064a0 <__malloc_lock>
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <_free_r+0x98>)
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	4610      	mov	r0, r2
 8005f0a:	b933      	cbnz	r3, 8005f1a <_free_r+0x2e>
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	6014      	str	r4, [r2, #0]
 8005f10:	4628      	mov	r0, r5
 8005f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f16:	f000 bac4 	b.w	80064a2 <__malloc_unlock>
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	d90c      	bls.n	8005f38 <_free_r+0x4c>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	1862      	adds	r2, r4, r1
 8005f22:	4293      	cmp	r3, r2
 8005f24:	bf04      	itt	eq
 8005f26:	681a      	ldreq	r2, [r3, #0]
 8005f28:	685b      	ldreq	r3, [r3, #4]
 8005f2a:	6063      	str	r3, [r4, #4]
 8005f2c:	bf04      	itt	eq
 8005f2e:	1852      	addeq	r2, r2, r1
 8005f30:	6022      	streq	r2, [r4, #0]
 8005f32:	6004      	str	r4, [r0, #0]
 8005f34:	e7ec      	b.n	8005f10 <_free_r+0x24>
 8005f36:	4613      	mov	r3, r2
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	b10a      	cbz	r2, 8005f40 <_free_r+0x54>
 8005f3c:	42a2      	cmp	r2, r4
 8005f3e:	d9fa      	bls.n	8005f36 <_free_r+0x4a>
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	1858      	adds	r0, r3, r1
 8005f44:	42a0      	cmp	r0, r4
 8005f46:	d10b      	bne.n	8005f60 <_free_r+0x74>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	4401      	add	r1, r0
 8005f4c:	1858      	adds	r0, r3, r1
 8005f4e:	4282      	cmp	r2, r0
 8005f50:	6019      	str	r1, [r3, #0]
 8005f52:	d1dd      	bne.n	8005f10 <_free_r+0x24>
 8005f54:	6810      	ldr	r0, [r2, #0]
 8005f56:	6852      	ldr	r2, [r2, #4]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	4401      	add	r1, r0
 8005f5c:	6019      	str	r1, [r3, #0]
 8005f5e:	e7d7      	b.n	8005f10 <_free_r+0x24>
 8005f60:	d902      	bls.n	8005f68 <_free_r+0x7c>
 8005f62:	230c      	movs	r3, #12
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	e7d3      	b.n	8005f10 <_free_r+0x24>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	1821      	adds	r1, r4, r0
 8005f6c:	428a      	cmp	r2, r1
 8005f6e:	bf04      	itt	eq
 8005f70:	6811      	ldreq	r1, [r2, #0]
 8005f72:	6852      	ldreq	r2, [r2, #4]
 8005f74:	6062      	str	r2, [r4, #4]
 8005f76:	bf04      	itt	eq
 8005f78:	1809      	addeq	r1, r1, r0
 8005f7a:	6021      	streq	r1, [r4, #0]
 8005f7c:	605c      	str	r4, [r3, #4]
 8005f7e:	e7c7      	b.n	8005f10 <_free_r+0x24>
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	bf00      	nop
 8005f84:	200003c4 	.word	0x200003c4

08005f88 <_malloc_r>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	1ccd      	adds	r5, r1, #3
 8005f8c:	f025 0503 	bic.w	r5, r5, #3
 8005f90:	3508      	adds	r5, #8
 8005f92:	2d0c      	cmp	r5, #12
 8005f94:	bf38      	it	cc
 8005f96:	250c      	movcc	r5, #12
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	db01      	blt.n	8005fa2 <_malloc_r+0x1a>
 8005f9e:	42a9      	cmp	r1, r5
 8005fa0:	d903      	bls.n	8005faa <_malloc_r+0x22>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	6033      	str	r3, [r6, #0]
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	f000 fa79 	bl	80064a0 <__malloc_lock>
 8005fae:	4a21      	ldr	r2, [pc, #132]	; (8006034 <_malloc_r+0xac>)
 8005fb0:	6814      	ldr	r4, [r2, #0]
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	b991      	cbnz	r1, 8005fdc <_malloc_r+0x54>
 8005fb6:	4c20      	ldr	r4, [pc, #128]	; (8006038 <_malloc_r+0xb0>)
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	b91b      	cbnz	r3, 8005fc4 <_malloc_r+0x3c>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f000 f9b3 	bl	8006328 <_sbrk_r>
 8005fc2:	6020      	str	r0, [r4, #0]
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f000 f9ae 	bl	8006328 <_sbrk_r>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d124      	bne.n	800601a <_malloc_r+0x92>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	6033      	str	r3, [r6, #0]
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 fa64 	bl	80064a2 <__malloc_unlock>
 8005fda:	e7e4      	b.n	8005fa6 <_malloc_r+0x1e>
 8005fdc:	680b      	ldr	r3, [r1, #0]
 8005fde:	1b5b      	subs	r3, r3, r5
 8005fe0:	d418      	bmi.n	8006014 <_malloc_r+0x8c>
 8005fe2:	2b0b      	cmp	r3, #11
 8005fe4:	d90f      	bls.n	8006006 <_malloc_r+0x7e>
 8005fe6:	600b      	str	r3, [r1, #0]
 8005fe8:	50cd      	str	r5, [r1, r3]
 8005fea:	18cc      	adds	r4, r1, r3
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 fa58 	bl	80064a2 <__malloc_unlock>
 8005ff2:	f104 000b 	add.w	r0, r4, #11
 8005ff6:	1d23      	adds	r3, r4, #4
 8005ff8:	f020 0007 	bic.w	r0, r0, #7
 8005ffc:	1ac3      	subs	r3, r0, r3
 8005ffe:	d0d3      	beq.n	8005fa8 <_malloc_r+0x20>
 8006000:	425a      	negs	r2, r3
 8006002:	50e2      	str	r2, [r4, r3]
 8006004:	e7d0      	b.n	8005fa8 <_malloc_r+0x20>
 8006006:	428c      	cmp	r4, r1
 8006008:	684b      	ldr	r3, [r1, #4]
 800600a:	bf16      	itet	ne
 800600c:	6063      	strne	r3, [r4, #4]
 800600e:	6013      	streq	r3, [r2, #0]
 8006010:	460c      	movne	r4, r1
 8006012:	e7eb      	b.n	8005fec <_malloc_r+0x64>
 8006014:	460c      	mov	r4, r1
 8006016:	6849      	ldr	r1, [r1, #4]
 8006018:	e7cc      	b.n	8005fb4 <_malloc_r+0x2c>
 800601a:	1cc4      	adds	r4, r0, #3
 800601c:	f024 0403 	bic.w	r4, r4, #3
 8006020:	42a0      	cmp	r0, r4
 8006022:	d005      	beq.n	8006030 <_malloc_r+0xa8>
 8006024:	1a21      	subs	r1, r4, r0
 8006026:	4630      	mov	r0, r6
 8006028:	f000 f97e 	bl	8006328 <_sbrk_r>
 800602c:	3001      	adds	r0, #1
 800602e:	d0cf      	beq.n	8005fd0 <_malloc_r+0x48>
 8006030:	6025      	str	r5, [r4, #0]
 8006032:	e7db      	b.n	8005fec <_malloc_r+0x64>
 8006034:	200003c4 	.word	0x200003c4
 8006038:	200003c8 	.word	0x200003c8

0800603c <__sfputc_r>:
 800603c:	6893      	ldr	r3, [r2, #8]
 800603e:	3b01      	subs	r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	b410      	push	{r4}
 8006044:	6093      	str	r3, [r2, #8]
 8006046:	da08      	bge.n	800605a <__sfputc_r+0x1e>
 8006048:	6994      	ldr	r4, [r2, #24]
 800604a:	42a3      	cmp	r3, r4
 800604c:	db01      	blt.n	8006052 <__sfputc_r+0x16>
 800604e:	290a      	cmp	r1, #10
 8006050:	d103      	bne.n	800605a <__sfputc_r+0x1e>
 8006052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006056:	f7fe bb67 	b.w	8004728 <__swbuf_r>
 800605a:	6813      	ldr	r3, [r2, #0]
 800605c:	1c58      	adds	r0, r3, #1
 800605e:	6010      	str	r0, [r2, #0]
 8006060:	7019      	strb	r1, [r3, #0]
 8006062:	4608      	mov	r0, r1
 8006064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006068:	4770      	bx	lr

0800606a <__sfputs_r>:
 800606a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	4614      	mov	r4, r2
 8006072:	18d5      	adds	r5, r2, r3
 8006074:	42ac      	cmp	r4, r5
 8006076:	d101      	bne.n	800607c <__sfputs_r+0x12>
 8006078:	2000      	movs	r0, #0
 800607a:	e007      	b.n	800608c <__sfputs_r+0x22>
 800607c:	463a      	mov	r2, r7
 800607e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff ffda 	bl	800603c <__sfputc_r>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d1f3      	bne.n	8006074 <__sfputs_r+0xa>
 800608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006090 <_vfiprintf_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	b09d      	sub	sp, #116	; 0x74
 8006098:	4617      	mov	r7, r2
 800609a:	461d      	mov	r5, r3
 800609c:	4606      	mov	r6, r0
 800609e:	b118      	cbz	r0, 80060a8 <_vfiprintf_r+0x18>
 80060a0:	6983      	ldr	r3, [r0, #24]
 80060a2:	b90b      	cbnz	r3, 80060a8 <_vfiprintf_r+0x18>
 80060a4:	f7ff fb34 	bl	8005710 <__sinit>
 80060a8:	4b7c      	ldr	r3, [pc, #496]	; (800629c <_vfiprintf_r+0x20c>)
 80060aa:	429c      	cmp	r4, r3
 80060ac:	d158      	bne.n	8006160 <_vfiprintf_r+0xd0>
 80060ae:	6874      	ldr	r4, [r6, #4]
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	0718      	lsls	r0, r3, #28
 80060b4:	d55e      	bpl.n	8006174 <_vfiprintf_r+0xe4>
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05b      	beq.n	8006174 <_vfiprintf_r+0xe4>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c6:	2330      	movs	r3, #48	; 0x30
 80060c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060cc:	9503      	str	r5, [sp, #12]
 80060ce:	f04f 0b01 	mov.w	fp, #1
 80060d2:	46b8      	mov	r8, r7
 80060d4:	4645      	mov	r5, r8
 80060d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060da:	b10b      	cbz	r3, 80060e0 <_vfiprintf_r+0x50>
 80060dc:	2b25      	cmp	r3, #37	; 0x25
 80060de:	d154      	bne.n	800618a <_vfiprintf_r+0xfa>
 80060e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80060e4:	d00b      	beq.n	80060fe <_vfiprintf_r+0x6e>
 80060e6:	4653      	mov	r3, sl
 80060e8:	463a      	mov	r2, r7
 80060ea:	4621      	mov	r1, r4
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff ffbc 	bl	800606a <__sfputs_r>
 80060f2:	3001      	adds	r0, #1
 80060f4:	f000 80c2 	beq.w	800627c <_vfiprintf_r+0x1ec>
 80060f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fa:	4453      	add	r3, sl
 80060fc:	9309      	str	r3, [sp, #36]	; 0x24
 80060fe:	f898 3000 	ldrb.w	r3, [r8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80ba 	beq.w	800627c <_vfiprintf_r+0x1ec>
 8006108:	2300      	movs	r3, #0
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611a:	931a      	str	r3, [sp, #104]	; 0x68
 800611c:	46a8      	mov	r8, r5
 800611e:	2205      	movs	r2, #5
 8006120:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006124:	485e      	ldr	r0, [pc, #376]	; (80062a0 <_vfiprintf_r+0x210>)
 8006126:	f7fa f863 	bl	80001f0 <memchr>
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	bb78      	cbnz	r0, 800618e <_vfiprintf_r+0xfe>
 800612e:	06d9      	lsls	r1, r3, #27
 8006130:	bf44      	itt	mi
 8006132:	2220      	movmi	r2, #32
 8006134:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006138:	071a      	lsls	r2, r3, #28
 800613a:	bf44      	itt	mi
 800613c:	222b      	movmi	r2, #43	; 0x2b
 800613e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006142:	782a      	ldrb	r2, [r5, #0]
 8006144:	2a2a      	cmp	r2, #42	; 0x2a
 8006146:	d02a      	beq.n	800619e <_vfiprintf_r+0x10e>
 8006148:	9a07      	ldr	r2, [sp, #28]
 800614a:	46a8      	mov	r8, r5
 800614c:	2000      	movs	r0, #0
 800614e:	250a      	movs	r5, #10
 8006150:	4641      	mov	r1, r8
 8006152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006156:	3b30      	subs	r3, #48	; 0x30
 8006158:	2b09      	cmp	r3, #9
 800615a:	d969      	bls.n	8006230 <_vfiprintf_r+0x1a0>
 800615c:	b360      	cbz	r0, 80061b8 <_vfiprintf_r+0x128>
 800615e:	e024      	b.n	80061aa <_vfiprintf_r+0x11a>
 8006160:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <_vfiprintf_r+0x214>)
 8006162:	429c      	cmp	r4, r3
 8006164:	d101      	bne.n	800616a <_vfiprintf_r+0xda>
 8006166:	68b4      	ldr	r4, [r6, #8]
 8006168:	e7a2      	b.n	80060b0 <_vfiprintf_r+0x20>
 800616a:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <_vfiprintf_r+0x218>)
 800616c:	429c      	cmp	r4, r3
 800616e:	bf08      	it	eq
 8006170:	68f4      	ldreq	r4, [r6, #12]
 8006172:	e79d      	b.n	80060b0 <_vfiprintf_r+0x20>
 8006174:	4621      	mov	r1, r4
 8006176:	4630      	mov	r0, r6
 8006178:	f7fe fb28 	bl	80047cc <__swsetup_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	d09d      	beq.n	80060bc <_vfiprintf_r+0x2c>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	b01d      	add	sp, #116	; 0x74
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	46a8      	mov	r8, r5
 800618c:	e7a2      	b.n	80060d4 <_vfiprintf_r+0x44>
 800618e:	4a44      	ldr	r2, [pc, #272]	; (80062a0 <_vfiprintf_r+0x210>)
 8006190:	1a80      	subs	r0, r0, r2
 8006192:	fa0b f000 	lsl.w	r0, fp, r0
 8006196:	4318      	orrs	r0, r3
 8006198:	9004      	str	r0, [sp, #16]
 800619a:	4645      	mov	r5, r8
 800619c:	e7be      	b.n	800611c <_vfiprintf_r+0x8c>
 800619e:	9a03      	ldr	r2, [sp, #12]
 80061a0:	1d11      	adds	r1, r2, #4
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	9103      	str	r1, [sp, #12]
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	db01      	blt.n	80061ae <_vfiprintf_r+0x11e>
 80061aa:	9207      	str	r2, [sp, #28]
 80061ac:	e004      	b.n	80061b8 <_vfiprintf_r+0x128>
 80061ae:	4252      	negs	r2, r2
 80061b0:	f043 0302 	orr.w	r3, r3, #2
 80061b4:	9207      	str	r2, [sp, #28]
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	f898 3000 	ldrb.w	r3, [r8]
 80061bc:	2b2e      	cmp	r3, #46	; 0x2e
 80061be:	d10e      	bne.n	80061de <_vfiprintf_r+0x14e>
 80061c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80061c4:	2b2a      	cmp	r3, #42	; 0x2a
 80061c6:	d138      	bne.n	800623a <_vfiprintf_r+0x1aa>
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	1d1a      	adds	r2, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	9203      	str	r2, [sp, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bfb8      	it	lt
 80061d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d8:	f108 0802 	add.w	r8, r8, #2
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	4d33      	ldr	r5, [pc, #204]	; (80062ac <_vfiprintf_r+0x21c>)
 80061e0:	f898 1000 	ldrb.w	r1, [r8]
 80061e4:	2203      	movs	r2, #3
 80061e6:	4628      	mov	r0, r5
 80061e8:	f7fa f802 	bl	80001f0 <memchr>
 80061ec:	b140      	cbz	r0, 8006200 <_vfiprintf_r+0x170>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	1b40      	subs	r0, r0, r5
 80061f2:	fa03 f000 	lsl.w	r0, r3, r0
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	4303      	orrs	r3, r0
 80061fa:	f108 0801 	add.w	r8, r8, #1
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	f898 1000 	ldrb.w	r1, [r8]
 8006204:	482a      	ldr	r0, [pc, #168]	; (80062b0 <_vfiprintf_r+0x220>)
 8006206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800620a:	2206      	movs	r2, #6
 800620c:	f108 0701 	add.w	r7, r8, #1
 8006210:	f7f9 ffee 	bl	80001f0 <memchr>
 8006214:	2800      	cmp	r0, #0
 8006216:	d037      	beq.n	8006288 <_vfiprintf_r+0x1f8>
 8006218:	4b26      	ldr	r3, [pc, #152]	; (80062b4 <_vfiprintf_r+0x224>)
 800621a:	bb1b      	cbnz	r3, 8006264 <_vfiprintf_r+0x1d4>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	3307      	adds	r3, #7
 8006220:	f023 0307 	bic.w	r3, r3, #7
 8006224:	3308      	adds	r3, #8
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	444b      	add	r3, r9
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	e750      	b.n	80060d2 <_vfiprintf_r+0x42>
 8006230:	fb05 3202 	mla	r2, r5, r2, r3
 8006234:	2001      	movs	r0, #1
 8006236:	4688      	mov	r8, r1
 8006238:	e78a      	b.n	8006150 <_vfiprintf_r+0xc0>
 800623a:	2300      	movs	r3, #0
 800623c:	f108 0801 	add.w	r8, r8, #1
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	4619      	mov	r1, r3
 8006244:	250a      	movs	r5, #10
 8006246:	4640      	mov	r0, r8
 8006248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624c:	3a30      	subs	r2, #48	; 0x30
 800624e:	2a09      	cmp	r2, #9
 8006250:	d903      	bls.n	800625a <_vfiprintf_r+0x1ca>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0c3      	beq.n	80061de <_vfiprintf_r+0x14e>
 8006256:	9105      	str	r1, [sp, #20]
 8006258:	e7c1      	b.n	80061de <_vfiprintf_r+0x14e>
 800625a:	fb05 2101 	mla	r1, r5, r1, r2
 800625e:	2301      	movs	r3, #1
 8006260:	4680      	mov	r8, r0
 8006262:	e7f0      	b.n	8006246 <_vfiprintf_r+0x1b6>
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4622      	mov	r2, r4
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <_vfiprintf_r+0x228>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4630      	mov	r0, r6
 8006270:	f7fd fe02 	bl	8003e78 <_printf_float>
 8006274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006278:	4681      	mov	r9, r0
 800627a:	d1d5      	bne.n	8006228 <_vfiprintf_r+0x198>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	065b      	lsls	r3, r3, #25
 8006280:	f53f af7e 	bmi.w	8006180 <_vfiprintf_r+0xf0>
 8006284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006286:	e77d      	b.n	8006184 <_vfiprintf_r+0xf4>
 8006288:	ab03      	add	r3, sp, #12
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	4622      	mov	r2, r4
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <_vfiprintf_r+0x228>)
 8006290:	a904      	add	r1, sp, #16
 8006292:	4630      	mov	r0, r6
 8006294:	f7fe f8a6 	bl	80043e4 <_printf_i>
 8006298:	e7ec      	b.n	8006274 <_vfiprintf_r+0x1e4>
 800629a:	bf00      	nop
 800629c:	080066b4 	.word	0x080066b4
 80062a0:	080067f4 	.word	0x080067f4
 80062a4:	080066d4 	.word	0x080066d4
 80062a8:	08006694 	.word	0x08006694
 80062ac:	080067fa 	.word	0x080067fa
 80062b0:	080067fe 	.word	0x080067fe
 80062b4:	08003e79 	.word	0x08003e79
 80062b8:	0800606b 	.word	0x0800606b

080062bc <_putc_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460d      	mov	r5, r1
 80062c0:	4614      	mov	r4, r2
 80062c2:	4606      	mov	r6, r0
 80062c4:	b118      	cbz	r0, 80062ce <_putc_r+0x12>
 80062c6:	6983      	ldr	r3, [r0, #24]
 80062c8:	b90b      	cbnz	r3, 80062ce <_putc_r+0x12>
 80062ca:	f7ff fa21 	bl	8005710 <__sinit>
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <_putc_r+0x60>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	d112      	bne.n	80062fa <_putc_r+0x3e>
 80062d4:	6874      	ldr	r4, [r6, #4]
 80062d6:	68a3      	ldr	r3, [r4, #8]
 80062d8:	3b01      	subs	r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	da16      	bge.n	800630e <_putc_r+0x52>
 80062e0:	69a2      	ldr	r2, [r4, #24]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	db02      	blt.n	80062ec <_putc_r+0x30>
 80062e6:	b2eb      	uxtb	r3, r5
 80062e8:	2b0a      	cmp	r3, #10
 80062ea:	d110      	bne.n	800630e <_putc_r+0x52>
 80062ec:	4622      	mov	r2, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	4630      	mov	r0, r6
 80062f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062f6:	f7fe ba17 	b.w	8004728 <__swbuf_r>
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <_putc_r+0x64>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d101      	bne.n	8006304 <_putc_r+0x48>
 8006300:	68b4      	ldr	r4, [r6, #8]
 8006302:	e7e8      	b.n	80062d6 <_putc_r+0x1a>
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <_putc_r+0x68>)
 8006306:	429c      	cmp	r4, r3
 8006308:	bf08      	it	eq
 800630a:	68f4      	ldreq	r4, [r6, #12]
 800630c:	e7e3      	b.n	80062d6 <_putc_r+0x1a>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	701d      	strb	r5, [r3, #0]
 8006316:	b2e8      	uxtb	r0, r5
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	bf00      	nop
 800631c:	080066b4 	.word	0x080066b4
 8006320:	080066d4 	.word	0x080066d4
 8006324:	08006694 	.word	0x08006694

08006328 <_sbrk_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4c06      	ldr	r4, [pc, #24]	; (8006344 <_sbrk_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4605      	mov	r5, r0
 8006330:	4608      	mov	r0, r1
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	f7fb fbb6 	bl	8001aa4 <_sbrk>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_sbrk_r+0x1a>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	b103      	cbz	r3, 8006342 <_sbrk_r+0x1a>
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	200003d0 	.word	0x200003d0

08006348 <__sread>:
 8006348:	b510      	push	{r4, lr}
 800634a:	460c      	mov	r4, r1
 800634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006350:	f000 f8a8 	bl	80064a4 <_read_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	bfab      	itete	ge
 8006358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800635a:	89a3      	ldrhlt	r3, [r4, #12]
 800635c:	181b      	addge	r3, r3, r0
 800635e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006362:	bfac      	ite	ge
 8006364:	6563      	strge	r3, [r4, #84]	; 0x54
 8006366:	81a3      	strhlt	r3, [r4, #12]
 8006368:	bd10      	pop	{r4, pc}

0800636a <__swrite>:
 800636a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	461f      	mov	r7, r3
 8006370:	898b      	ldrh	r3, [r1, #12]
 8006372:	05db      	lsls	r3, r3, #23
 8006374:	4605      	mov	r5, r0
 8006376:	460c      	mov	r4, r1
 8006378:	4616      	mov	r6, r2
 800637a:	d505      	bpl.n	8006388 <__swrite+0x1e>
 800637c:	2302      	movs	r3, #2
 800637e:	2200      	movs	r2, #0
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f868 	bl	8006458 <_lseek_r>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800638e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	4632      	mov	r2, r6
 8006396:	463b      	mov	r3, r7
 8006398:	4628      	mov	r0, r5
 800639a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639e:	f000 b817 	b.w	80063d0 <_write_r>

080063a2 <__sseek>:
 80063a2:	b510      	push	{r4, lr}
 80063a4:	460c      	mov	r4, r1
 80063a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063aa:	f000 f855 	bl	8006458 <_lseek_r>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	bf15      	itete	ne
 80063b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063be:	81a3      	strheq	r3, [r4, #12]
 80063c0:	bf18      	it	ne
 80063c2:	81a3      	strhne	r3, [r4, #12]
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <__sclose>:
 80063c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ca:	f000 b813 	b.w	80063f4 <_close_r>
	...

080063d0 <_write_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4c07      	ldr	r4, [pc, #28]	; (80063f0 <_write_r+0x20>)
 80063d4:	4605      	mov	r5, r0
 80063d6:	4608      	mov	r0, r1
 80063d8:	4611      	mov	r1, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7fb fb0f 	bl	8001a02 <_write>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_write_r+0x1e>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_write_r+0x1e>
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	200003d0 	.word	0x200003d0

080063f4 <_close_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4c06      	ldr	r4, [pc, #24]	; (8006410 <_close_r+0x1c>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4605      	mov	r5, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	f7fb fb1b 	bl	8001a3a <_close>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_close_r+0x1a>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	b103      	cbz	r3, 800640e <_close_r+0x1a>
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	200003d0 	.word	0x200003d0

08006414 <_fstat_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4c07      	ldr	r4, [pc, #28]	; (8006434 <_fstat_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4605      	mov	r5, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f7fb fb16 	bl	8001a52 <_fstat>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_fstat_r+0x1c>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	b103      	cbz	r3, 8006430 <_fstat_r+0x1c>
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	200003d0 	.word	0x200003d0

08006438 <_isatty_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4c06      	ldr	r4, [pc, #24]	; (8006454 <_isatty_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4605      	mov	r5, r0
 8006440:	4608      	mov	r0, r1
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f7fb fb15 	bl	8001a72 <_isatty>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_isatty_r+0x1a>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	b103      	cbz	r3, 8006452 <_isatty_r+0x1a>
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	200003d0 	.word	0x200003d0

08006458 <_lseek_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4c07      	ldr	r4, [pc, #28]	; (8006478 <_lseek_r+0x20>)
 800645c:	4605      	mov	r5, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	6022      	str	r2, [r4, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fb fb0e 	bl	8001a88 <_lseek>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_lseek_r+0x1e>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	b103      	cbz	r3, 8006476 <_lseek_r+0x1e>
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	200003d0 	.word	0x200003d0

0800647c <__ascii_mbtowc>:
 800647c:	b082      	sub	sp, #8
 800647e:	b901      	cbnz	r1, 8006482 <__ascii_mbtowc+0x6>
 8006480:	a901      	add	r1, sp, #4
 8006482:	b142      	cbz	r2, 8006496 <__ascii_mbtowc+0x1a>
 8006484:	b14b      	cbz	r3, 800649a <__ascii_mbtowc+0x1e>
 8006486:	7813      	ldrb	r3, [r2, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	1c10      	adds	r0, r2, #0
 800648e:	bf18      	it	ne
 8006490:	2001      	movne	r0, #1
 8006492:	b002      	add	sp, #8
 8006494:	4770      	bx	lr
 8006496:	4610      	mov	r0, r2
 8006498:	e7fb      	b.n	8006492 <__ascii_mbtowc+0x16>
 800649a:	f06f 0001 	mvn.w	r0, #1
 800649e:	e7f8      	b.n	8006492 <__ascii_mbtowc+0x16>

080064a0 <__malloc_lock>:
 80064a0:	4770      	bx	lr

080064a2 <__malloc_unlock>:
 80064a2:	4770      	bx	lr

080064a4 <_read_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4c07      	ldr	r4, [pc, #28]	; (80064c4 <_read_r+0x20>)
 80064a8:	4605      	mov	r5, r0
 80064aa:	4608      	mov	r0, r1
 80064ac:	4611      	mov	r1, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fb fa88 	bl	80019c8 <_read>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_read_r+0x1e>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_read_r+0x1e>
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	200003d0 	.word	0x200003d0

080064c8 <__ascii_wctomb>:
 80064c8:	b149      	cbz	r1, 80064de <__ascii_wctomb+0x16>
 80064ca:	2aff      	cmp	r2, #255	; 0xff
 80064cc:	bf85      	ittet	hi
 80064ce:	238a      	movhi	r3, #138	; 0x8a
 80064d0:	6003      	strhi	r3, [r0, #0]
 80064d2:	700a      	strbls	r2, [r1, #0]
 80064d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80064d8:	bf98      	it	ls
 80064da:	2001      	movls	r0, #1
 80064dc:	4770      	bx	lr
 80064de:	4608      	mov	r0, r1
 80064e0:	4770      	bx	lr
	...

080064e4 <_init>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr

080064f0 <_fini>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr
