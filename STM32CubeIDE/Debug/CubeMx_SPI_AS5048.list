
CubeMx_SPI_AS5048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005cb8  08005cb8  00015cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080060d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001e0  080062b4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080062b4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010412  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026c5  00000000  00000000  00030622  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000060dc  00000000  00000000  00032ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a70  00000000  00000000  00038dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009d0  00000000  00000000  00039838  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00019f45  00000000  00000000  0003a208  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009e59  00000000  00000000  0005414d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008b6ef  00000000  00000000  0005dfa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000e9695  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029d4  00000000  00000000  000e9710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c9c 	.word	0x08005c9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08005c9c 	.word	0x08005c9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <_ZN8IcHausMuC1Eh>:
#include "IcHausMu.hpp"


// ############################### Constructors ###############################

IcHausMu::IcHausMu(const unsigned char hwRev)
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	4d14      	ldr	r5, [pc, #80]	; (8000fb0 <_ZN8IcHausMuC1Eh+0x58>)
 8000f60:	267f      	movs	r6, #127	; 0x7f
 8000f62:	4632      	mov	r2, r6
 8000f64:	4629      	mov	r1, r5
 8000f66:	3001      	adds	r0, #1
 8000f68:	f002 fab8 	bl	80034dc <memcpy>
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8000f72:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8000f76:	f002 fab1 	bl	80034dc <memcpy>
//  : _address(0x00) // can be used to initialize as list method
{
    debugVal = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	7023      	strb	r3, [r4, #0]
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 8000f7e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 8000f82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    _address = 0x00;
 8000f86:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
    _hardRev = hwRev;
 8000f8a:	f884 7109 	strb.w	r7, [r4, #265]	; 0x109
    _csFct_ptr = NULL;
 8000f8e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    _streamFct_ptr = NULL;
 8000f92:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    _initStatus = RET_W_UNINIT;
 8000f96:	220a      	movs	r2, #10
 8000f98:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
    _sdadOutMsb = 0;
 8000f9c:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
    _sdadOutLsb = 0;
 8000fa0:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
    _sdadOutSize = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
}
 8000faa:	4620      	mov	r0, r4
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08005cb8 	.word	0x08005cb8

08000fb4 <_ZN8IcHausMu16csFunctionAttachEPFvbE>:
// ############################### Public Methods ###############################

// ---------------- low level functions ----------------

void IcHausMu::csFunctionAttach(void (*fct_ptr)(const bool)) {
    _csFct_ptr = fct_ptr;
 8000fb4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
}
 8000fb8:	4770      	bx	lr

08000fba <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>:

void IcHausMu::streamFunctionAttach(void (*fct_ptr)(unsigned char* const, unsigned char*, const unsigned int)) {
    _streamFct_ptr = fct_ptr;
 8000fba:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
}
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>:
}

unsigned char IcHausMu::icMuRegSize(const icMuRegister_t reg) {
    unsigned char tmpVal = 0;

    tmpVal = _icMuRegisterMask[reg];                    // this tab contains masks and register unions size (x), identified by 0x8x (x!=0, mask must be contiguous by definition)
 8000fc0:	4401      	add	r1, r0
 8000fc2:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
    if (0x80<tmpVal && 0x90>tmpVal) {tmpVal &= 0x0F;}   // the union size is returned.
 8000fc6:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b0e      	cmp	r3, #14
 8000fce:	d802      	bhi.n	8000fd6 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister+0x16>
 8000fd0:	f000 000f 	and.w	r0, r0, #15
 8000fd4:	4770      	bx	lr
    else {tmpVal = 1;}                                  // single register, size = 1
 8000fd6:	2001      	movs	r0, #1
    return tmpVal;
}
 8000fd8:	4770      	bx	lr

08000fda <_ZN8IcHausMu16getLastByteValueEv>:

unsigned char IcHausMu::getLastByteValue(void) {
    return _tmpBuff64.bytes_le.lsb;
}
 8000fda:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 8000fde:	4770      	bx	lr

08000fe0 <_ZN8IcHausMu14_readRegStatusEv>:
    return retVal;
}

// ############################### Private Methods ###############################

fctStatus IcHausMu::_readRegStatus(void) {
 8000fe0:	b500      	push	{lr}
 8000fe2:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {STATUS_DATA, 0x00};
 8000fe4:	23ad      	movs	r3, #173	; 0xad
 8000fe6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fea:	2300      	movs	r3, #0
 8000fec:	f88d 3005 	strb.w	r3, [sp, #5]

    // Do the transfert and get the STATUS register
    _streamFct_ptr((unsigned char*)&internalBuffer, (unsigned char*)&internalBuffer, 2);
 8000ff0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	a901      	add	r1, sp, #4
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4798      	blx	r3

    if (STATUS_DATA == internalBuffer[0]) {
 8000ffc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001000:	2bad      	cmp	r3, #173	; 0xad
 8001002:	d10f      	bne.n	8001024 <_ZN8IcHausMu14_readRegStatusEv+0x44>
       // Register is correctly addressed
       // Decode the status byte
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 8001004:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001008:	f013 0f80 	tst.w	r3, #128	; 0x80
 800100c:	d10e      	bne.n	800102c <_ZN8IcHausMu14_readRegStatusEv+0x4c>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 800100e:	2b07      	cmp	r3, #7
 8001010:	d80e      	bhi.n	8001030 <_ZN8IcHausMu14_readRegStatusEv+0x50>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 8001012:	2b03      	cmp	r3, #3
 8001014:	d80e      	bhi.n	8001034 <_ZN8IcHausMu14_readRegStatusEv+0x54>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 8001016:	2b01      	cmp	r3, #1
 8001018:	d80e      	bhi.n	8001038 <_ZN8IcHausMu14_readRegStatusEv+0x58>
       else if (0x00 == internalBuffer[1]) {retVal = RET_E_NOK;}
 800101a:	b90b      	cbnz	r3, 8001020 <_ZN8IcHausMu14_readRegStatusEv+0x40>
 800101c:	2001      	movs	r0, #1
 800101e:	e002      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>
    fctStatus retVal = RET_OK;
 8001020:	2000      	movs	r0, #0
 8001022:	e000      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else { /* data is valid. retVal=RET_OK */ }
    }
    else {
        retVal = RET_E_OPCODE;
 8001024:	2005      	movs	r0, #5
    }
    return retVal;
}
 8001026:	b003      	add	sp, #12
 8001028:	f85d fb04 	ldr.w	pc, [sp], #4
       if (0x80 <= internalBuffer[1]) {retVal = RET_E_SENSORERROR;}
 800102c:	2001      	movs	r0, #1
 800102e:	e7fa      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x08 <= internalBuffer[1]) {retVal = RET_W_SENSORDISMISS;}
 8001030:	2004      	movs	r0, #4
 8001032:	e7f8      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x04 <= internalBuffer[1]) {retVal = RET_E_SENSORFAIL;}
 8001034:	2003      	movs	r0, #3
 8001036:	e7f6      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>
       else if (0x02 <= internalBuffer[1]) {retVal = RET_W_SENSORBUSY;}
 8001038:	2002      	movs	r0, #2
 800103a:	e7f4      	b.n	8001026 <_ZN8IcHausMu14_readRegStatusEv+0x46>

0800103c <_ZN8IcHausMu13_readRegisterEhjPh>:

fctStatus IcHausMu::_readRegister(const unsigned char registerToRead, const unsigned int bytesToRead, unsigned char* buffPtr) {
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 8001040:	2400      	movs	r4, #0
 8001042:	f8ad 4004 	strh.w	r4, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 8001046:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 800104a:	bb85      	cbnz	r5, 80010ae <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
 800104c:	b37b      	cbz	r3, 80010ae <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
 800104e:	461e      	mov	r6, r3
 8001050:	4617      	mov	r7, r2
 8001052:	460d      	mov	r5, r1
 8001054:	4604      	mov	r4, r0
        // select the device
        _csFct_ptr(true);
 8001056:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800105a:	2001      	movs	r0, #1
 800105c:	4798      	blx	r3

        // send the read command with the register address to read:
        internalBuffer[0] = READ_REG;
 800105e:	2397      	movs	r3, #151	; 0x97
 8001060:	f88d 3004 	strb.w	r3, [sp, #4]
        internalBuffer[1] = registerToRead;
 8001064:	f88d 5005 	strb.w	r5, [sp, #5]
        _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 8001068:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800106c:	2202      	movs	r2, #2
 800106e:	a901      	add	r1, sp, #4
 8001070:	4608      	mov	r0, r1
 8001072:	4798      	blx	r3
        // Check if the register read command has been sent as expected
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 8001074:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001078:	2b97      	cmp	r3, #151	; 0x97
 800107a:	d01b      	beq.n	80010b4 <_ZN8IcHausMu13_readRegisterEhjPh+0x78>
            retVal = RET_E_OPCODE;
 800107c:	2505      	movs	r5, #5
        }

        // unselect the device
        _csFct_ptr(false);
 800107e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001082:	2000      	movs	r0, #0
 8001084:	4798      	blx	r3

        if (RET_OK == retVal) {
 8001086:	b995      	cbnz	r5, 80010ae <_ZN8IcHausMu13_readRegisterEhjPh+0x72>
            // select the device
            _csFct_ptr(true);
 8001088:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800108c:	2001      	movs	r0, #1
 800108e:	4798      	blx	r3

            retVal = _readRegStatus();    // same function is used to read status and data
 8001090:	4620      	mov	r0, r4
 8001092:	f7ff ffa5 	bl	8000fe0 <_ZN8IcHausMu14_readRegStatusEv>
            if (RET_OK == retVal) {
 8001096:	4605      	mov	r5, r0
 8001098:	b928      	cbnz	r0, 80010a6 <_ZN8IcHausMu13_readRegisterEhjPh+0x6a>
                _streamFct_ptr(buffPtr, buffPtr, bytesToRead);
 800109a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800109e:	463a      	mov	r2, r7
 80010a0:	4631      	mov	r1, r6
 80010a2:	4630      	mov	r0, r6
 80010a4:	4798      	blx	r3
            }

            // unselect the device
            _csFct_ptr(false);
 80010a6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80010aa:	2000      	movs	r0, #0
 80010ac:	4798      	blx	r3
        retVal = _initStatus;
    }

    // return the function status:
    return retVal;
}
 80010ae:	4628      	mov	r0, r5
 80010b0:	b003      	add	sp, #12
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( READ_REG!=internalBuffer[0] || registerToRead!=internalBuffer[1] ) {
 80010b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010b8:	42ab      	cmp	r3, r5
 80010ba:	d001      	beq.n	80010c0 <_ZN8IcHausMu13_readRegisterEhjPh+0x84>
            retVal = RET_E_OPCODE;
 80010bc:	2505      	movs	r5, #5
 80010be:	e7de      	b.n	800107e <_ZN8IcHausMu13_readRegisterEhjPh+0x42>
    fctStatus retVal = RET_OK;
 80010c0:	2500      	movs	r5, #0
 80010c2:	e7dc      	b.n	800107e <_ZN8IcHausMu13_readRegisterEhjPh+0x42>

080010c4 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::readIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 80010c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c8:	4606      	mov	r6, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4617      	mov	r7, r2
    regSize = icMuRegSize(reg);
 80010ce:	f7ff ff77 	bl	8000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 80010d2:	4605      	mov	r5, r0
    if (1 < regSize) {
 80010d4:	2801      	cmp	r0, #1
 80010d6:	d901      	bls.n	80010dc <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x18>
        tmpRegAddr = reg+1;
 80010d8:	3401      	adds	r4, #1
 80010da:	b2e4      	uxtb	r4, r4
    retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 80010dc:	46a0      	mov	r8, r4
 80010de:	1931      	adds	r1, r6, r4
 80010e0:	463b      	mov	r3, r7
 80010e2:	462a      	mov	r2, r5
 80010e4:	7849      	ldrb	r1, [r1, #1]
 80010e6:	4630      	mov	r0, r6
 80010e8:	f7ff ffa8 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
    if (1 < regSize) {
 80010ec:	2d01      	cmp	r5, #1
 80010ee:	d908      	bls.n	8001102 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x3e>
        regSize--;
 80010f0:	3d01      	subs	r5, #1
 80010f2:	b2ed      	uxtb	r5, r5
        *(buffPtr->tab+regSize) &= _icMuRegisterMask[tmpRegAddr+regSize];
 80010f4:	442c      	add	r4, r5
 80010f6:	4434      	add	r4, r6
 80010f8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80010fc:	5d7a      	ldrb	r2, [r7, r5]
 80010fe:	4013      	ands	r3, r2
 8001100:	557b      	strb	r3, [r7, r5]
    *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 8001102:	4446      	add	r6, r8
 8001104:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
 8001108:	783a      	ldrb	r2, [r7, #0]
 800110a:	4013      	ands	r3, r2
 800110c:	703b      	strb	r3, [r7, #0]
}
 800110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001112 <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>:
fctStatus IcHausMu::readIcMuRegister(const icMuRegister_t reg) {
 8001112:	b508      	push	{r3, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 800111a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    retVal = readIcMuRegister_leu(reg, &_tmpBuff64);
 800111e:	f500 7280 	add.w	r2, r0, #256	; 0x100
 8001122:	f7ff ffcf 	bl	80010c4 <_ZN8IcHausMu20readIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 8001126:	bd08      	pop	{r3, pc}

08001128 <_ZN8IcHausMu4initEv>:
fctStatus IcHausMu::init(void) {
 8001128:	b510      	push	{r4, lr}
 800112a:	4604      	mov	r4, r0
    if (NULL!=_csFct_ptr && NULL!=_streamFct_ptr) {
 800112c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001130:	b133      	cbz	r3, 8001140 <_ZN8IcHausMu4initEv+0x18>
 8001132:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8001136:	b11b      	cbz	r3, 8001140 <_ZN8IcHausMu4initEv+0x18>
        _initStatus = RET_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
 800113e:	e002      	b.n	8001146 <_ZN8IcHausMu4initEv+0x1e>
        _initStatus = RET_E_NULLPTR;
 8001140:	2309      	movs	r3, #9
 8001142:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
    if (RET_OK == _initStatus) {
 8001146:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 800114a:	b17b      	cbz	r3, 800116c <_ZN8IcHausMu4initEv+0x44>
    if (RET_OK == _initStatus) {
 800114c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8001150:	b94b      	cbnz	r3, 8001166 <_ZN8IcHausMu4initEv+0x3e>
        if(getLastByteValue() != _hardRev) {    // compare the value read.
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff ff41 	bl	8000fda <_ZN8IcHausMu16getLastByteValueEv>
 8001158:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 800115c:	4298      	cmp	r0, r3
 800115e:	d002      	beq.n	8001166 <_ZN8IcHausMu4initEv+0x3e>
            _initStatus = RET_E_DATA;
 8001160:	2307      	movs	r3, #7
 8001162:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
}
 8001166:	f894 010d 	ldrb.w	r0, [r4, #269]	; 0x10d
 800116a:	bd10      	pop	{r4, pc}
        _initStatus = readIcMuRegister(HARD_REV);
 800116c:	211c      	movs	r1, #28
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ffcf 	bl	8001112 <_ZN8IcHausMu16readIcMuRegisterE12icMuRegister>
 8001174:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
 8001178:	e7e8      	b.n	800114c <_ZN8IcHausMu4initEv+0x24>

0800117a <_ZN8IcHausMu14_writeRegisterEhjPh>:

fctStatus IcHausMu::_writeRegister(const unsigned char registerToWrite, const unsigned int bytesToWrite, unsigned char* buffPtr) {
 800117a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117c:	b083      	sub	sp, #12
    fctStatus retVal = RET_OK;
    unsigned char internalBuffer[2] = {0x00};           // incoming word from the SPI
 800117e:	2400      	movs	r4, #0
 8001180:	f8ad 4004 	strh.w	r4, [sp, #4]

    // check if the functions are available
    if (RET_OK==_initStatus && NULL!=buffPtr) {
 8001184:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
 8001188:	b9e5      	cbnz	r5, 80011c4 <_ZN8IcHausMu14_writeRegisterEhjPh+0x4a>
 800118a:	b1db      	cbz	r3, 80011c4 <_ZN8IcHausMu14_writeRegisterEhjPh+0x4a>
 800118c:	461d      	mov	r5, r3
 800118e:	4617      	mov	r7, r2
 8001190:	460e      	mov	r6, r1
 8001192:	4604      	mov	r4, r0
      // select the device
      _csFct_ptr(true);
 8001194:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001198:	2001      	movs	r0, #1
 800119a:	4798      	blx	r3

      // send the read command with the register address to read:
      internalBuffer[0] = WRITE_REG;
 800119c:	23d2      	movs	r3, #210	; 0xd2
 800119e:	f88d 3004 	strb.w	r3, [sp, #4]
      internalBuffer[1] = registerToWrite;
 80011a2:	f88d 6005 	strb.w	r6, [sp, #5]

      _streamFct_ptr((unsigned char *)&internalBuffer, (unsigned char *)&internalBuffer, 2);
 80011a6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011aa:	2202      	movs	r2, #2
 80011ac:	a901      	add	r1, sp, #4
 80011ae:	4608      	mov	r0, r1
 80011b0:	4798      	blx	r3
      // Check if the register write command has been sent as expected
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011b6:	2bd2      	cmp	r3, #210	; 0xd2
 80011b8:	d007      	beq.n	80011ca <_ZN8IcHausMu14_writeRegisterEhjPh+0x50>
 80011ba:	2505      	movs	r5, #5
          _csFct_ptr(true);
          retVal = _readRegStatus();          // check the validity of the writing operation
      }

      // unselect the device
      _csFct_ptr(false);
 80011bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011c0:	2000      	movs	r0, #0
 80011c2:	4798      	blx	r3
      retVal = _initStatus;
    }

    // return the result:
    return retVal;
}
 80011c4:	4628      	mov	r0, r5
 80011c6:	b003      	add	sp, #12
 80011c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( WRITE_REG!=internalBuffer[0] || registerToWrite!=internalBuffer[1] ) {
 80011ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011ce:	42b3      	cmp	r3, r6
 80011d0:	d112      	bne.n	80011f8 <_ZN8IcHausMu14_writeRegisterEhjPh+0x7e>
          _streamFct_ptr(buffPtr, buffPtr, bytesToWrite);
 80011d2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011d6:	463a      	mov	r2, r7
 80011d8:	4629      	mov	r1, r5
 80011da:	4628      	mov	r0, r5
 80011dc:	4798      	blx	r3
          _csFct_ptr(false);
 80011de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011e2:	2000      	movs	r0, #0
 80011e4:	4798      	blx	r3
          _csFct_ptr(true);
 80011e6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80011ea:	2001      	movs	r0, #1
 80011ec:	4798      	blx	r3
          retVal = _readRegStatus();          // check the validity of the writing operation
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fef6 	bl	8000fe0 <_ZN8IcHausMu14_readRegStatusEv>
 80011f4:	4605      	mov	r5, r0
 80011f6:	e7e1      	b.n	80011bc <_ZN8IcHausMu14_writeRegisterEhjPh+0x42>
 80011f8:	2505      	movs	r5, #5
 80011fa:	e7df      	b.n	80011bc <_ZN8IcHausMu14_writeRegisterEhjPh+0x42>

080011fc <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>:
fctStatus IcHausMu::writeIcMuRegister_leu(const icMuRegister_t reg, uint64_leu* buffPtr) {
 80011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	4606      	mov	r6, r0
 8001204:	460c      	mov	r4, r1
 8001206:	4615      	mov	r5, r2
    unsigned char tmpData = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	f88d 3007 	strb.w	r3, [sp, #7]
    regSize = icMuRegSize(reg);
 800120e:	f7ff fed7 	bl	8000fc0 <_ZN8IcHausMu11icMuRegSizeE12icMuRegister>
 8001212:	4607      	mov	r7, r0
    if (1 < regSize) {
 8001214:	2801      	cmp	r0, #1
 8001216:	d91f      	bls.n	8001258 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x5c>
        tmpRegAddr = reg+regSize;
 8001218:	eb04 0800 	add.w	r8, r4, r0
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 800121c:	fa56 f888 	uxtab	r8, r6, r8
 8001220:	f10d 0307 	add.w	r3, sp, #7
 8001224:	2201      	movs	r2, #1
 8001226:	f898 1001 	ldrb.w	r1, [r8, #1]
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff ff06 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 8001230:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 8001234:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001238:	ea22 0203 	bic.w	r2, r2, r3
 800123c:	f88d 2007 	strb.w	r2, [sp, #7]
        *(buffPtr->tab+regSize-1) &= _icMuRegisterMask[tmpRegAddr];
 8001240:	1e7a      	subs	r2, r7, #1
 8001242:	5ca9      	ldrb	r1, [r5, r2]
 8001244:	400b      	ands	r3, r1
 8001246:	54ab      	strb	r3, [r5, r2]
        *(buffPtr->tab+regSize-1) |= tmpData;
 8001248:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800124c:	430b      	orrs	r3, r1
 800124e:	54ab      	strb	r3, [r5, r2]
        tmpRegAddr = reg+1;
 8001250:	3401      	adds	r4, #1
 8001252:	b2e4      	uxtb	r4, r4
    if (RET_OK == retVal) {
 8001254:	4602      	mov	r2, r0
 8001256:	b9c0      	cbnz	r0, 800128a <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x8e>
        tmpData = 0x00;
 8001258:	ab02      	add	r3, sp, #8
 800125a:	2200      	movs	r2, #0
 800125c:	f803 2d01 	strb.w	r2, [r3, #-1]!
        retVal = _readRegister(_icMuRegisterAddress[tmpRegAddr], 1, &tmpData);
 8001260:	eb06 0804 	add.w	r8, r6, r4
 8001264:	2201      	movs	r2, #1
 8001266:	f898 1001 	ldrb.w	r1, [r8, #1]
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff fee6 	bl	800103c <_ZN8IcHausMu13_readRegisterEhjPh>
 8001270:	4602      	mov	r2, r0
        tmpData &= ~_icMuRegisterMask[tmpRegAddr];
 8001272:	f898 3080 	ldrb.w	r3, [r8, #128]	; 0x80
 8001276:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800127a:	ea21 0103 	bic.w	r1, r1, r3
 800127e:	f88d 1007 	strb.w	r1, [sp, #7]
        *(buffPtr->tab) &= _icMuRegisterMask[tmpRegAddr];
 8001282:	7828      	ldrb	r0, [r5, #0]
 8001284:	4003      	ands	r3, r0
        *(buffPtr->tab) |= tmpData;
 8001286:	430b      	orrs	r3, r1
 8001288:	702b      	strb	r3, [r5, #0]
    if (RET_OK == retVal) {
 800128a:	b11a      	cbz	r2, 8001294 <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x98>
}
 800128c:	4610      	mov	r0, r2
 800128e:	b002      	add	sp, #8
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        retVal = _writeRegister(_icMuRegisterAddress[tmpRegAddr], regSize, buffPtr->tab);
 8001294:	4434      	add	r4, r6
 8001296:	462b      	mov	r3, r5
 8001298:	463a      	mov	r2, r7
 800129a:	7861      	ldrb	r1, [r4, #1]
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff ff6c 	bl	800117a <_ZN8IcHausMu14_writeRegisterEhjPh>
 80012a2:	4602      	mov	r2, r0
 80012a4:	e7f2      	b.n	800128c <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu+0x90>

080012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>:
fctStatus IcHausMu::writeIcMuRegister(const icMuRegister_t reg, const unsigned char val) {
 80012a6:	b510      	push	{r4, lr}
    _tmpBuff64.dwords.msb.dword = 0x00000000;
 80012a8:	2400      	movs	r4, #0
 80012aa:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    _tmpBuff64.dwords.lsb.dword = 0x00000000;
 80012ae:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
    _tmpBuff64.bytes_le.lsb = val;
 80012b2:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
    return writeIcMuRegister_leu(reg, &_tmpBuff64);
 80012b6:	f500 7280 	add.w	r2, r0, #256	; 0x100
 80012ba:	f7ff ff9f 	bl	80011fc <_ZN8IcHausMu21writeIcMuRegister_leuE12icMuRegisterP10uint64_leu>
}
 80012be:	bd10      	pop	{r4, pc}

080012c0 <_ZN8IcHausMu16setAutomaticGainEh>:
fctStatus IcHausMu::setAutomaticGain(const unsigned char autoGainEnabled) {
 80012c0:	b508      	push	{r3, lr}
    if (0x00 != autoGainEnabled) {tmpBuff = 0x80;}
 80012c2:	b121      	cbz	r1, 80012ce <_ZN8IcHausMu16setAutomaticGainEh+0xe>
 80012c4:	2280      	movs	r2, #128	; 0x80
    retVal = writeIcMuRegister(ENAC, tmpBuff);
 80012c6:	2101      	movs	r1, #1
 80012c8:	f7ff ffed 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
}
 80012cc:	bd08      	pop	{r3, pc}
    unsigned char tmpBuff = 0x00;
 80012ce:	2200      	movs	r2, #0
 80012d0:	e7f9      	b.n	80012c6 <_ZN8IcHausMu16setAutomaticGainEh+0x6>

080012d2 <_ZN8IcHausMu14changeSdadModeEhhh>:
    if(3>stMode && 38>sdadMsb && 12<sdadMsb && 16>sdadLsb && sdadLsb<sdadMsb) {
 80012d2:	2902      	cmp	r1, #2
 80012d4:	d83e      	bhi.n	8001354 <_ZN8IcHausMu14changeSdadModeEhhh+0x82>
 80012d6:	2a25      	cmp	r2, #37	; 0x25
 80012d8:	d83f      	bhi.n	800135a <_ZN8IcHausMu14changeSdadModeEhhh+0x88>
 80012da:	2a0c      	cmp	r2, #12
 80012dc:	d93f      	bls.n	800135e <_ZN8IcHausMu14changeSdadModeEhhh+0x8c>
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d83f      	bhi.n	8001362 <_ZN8IcHausMu14changeSdadModeEhhh+0x90>
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d93f      	bls.n	8001366 <_ZN8IcHausMu14changeSdadModeEhhh+0x94>
fctStatus IcHausMu::changeSdadMode(unsigned char stMode, unsigned char sdadMsb, unsigned char sdadLsb) {
 80012e6:	b570      	push	{r4, r5, r6, lr}
 80012e8:	461d      	mov	r5, r3
 80012ea:	4614      	mov	r4, r2
 80012ec:	4606      	mov	r6, r0
        retVal = writeIcMuRegister(MODE_ST, stMode<<4);
 80012ee:	0109      	lsls	r1, r1, #4
 80012f0:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
 80012f4:	2124      	movs	r1, #36	; 0x24
 80012f6:	f7ff ffd6 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
        if (RET_OK == retVal) {
 80012fa:	4602      	mov	r2, r0
 80012fc:	b118      	cbz	r0, 8001306 <_ZN8IcHausMu14changeSdadModeEhhh+0x34>
        if (RET_OK == retVal) {
 80012fe:	b15a      	cbz	r2, 8001318 <_ZN8IcHausMu14changeSdadModeEhhh+0x46>
        if (RET_OK == retVal) {
 8001300:	b1ea      	cbz	r2, 800133e <_ZN8IcHausMu14changeSdadModeEhhh+0x6c>
}
 8001302:	4610      	mov	r0, r2
 8001304:	bd70      	pop	{r4, r5, r6, pc}
            retVal = writeIcMuRegister(OUT_LSB, sdadLsb);
 8001306:	462a      	mov	r2, r5
 8001308:	2122      	movs	r1, #34	; 0x22
 800130a:	4630      	mov	r0, r6
 800130c:	f7ff ffcb 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001310:	4602      	mov	r2, r0
            _sdadOutLsb = sdadLsb;
 8001312:	f886 510b 	strb.w	r5, [r6, #267]	; 0x10b
 8001316:	e7f2      	b.n	80012fe <_ZN8IcHausMu14changeSdadModeEhhh+0x2c>
            sdadLsb = 1+sdadMsb-sdadLsb;        // reuse sdadLsb variable for SDAD length and OUT_ZERO computing
 8001318:	1b63      	subs	r3, r4, r5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	b2d2      	uxtb	r2, r2
            _sdadOutSize = (sdadLsb+7)/8;       // SDAD length in bytes
 8001320:	3207      	adds	r2, #7
 8001322:	10d2      	asrs	r2, r2, #3
 8001324:	f886 210c 	strb.w	r2, [r6, #268]	; 0x10c
            sdadLsb = 7-(0x07&(sdadLsb-1));     // nb of zeros to reach a complete byte format for SDAD
 8001328:	43da      	mvns	r2, r3
 800132a:	b2d2      	uxtb	r2, r2
            retVal = writeIcMuRegister(OUT_ZERO, sdadLsb<<5);   // alignment with datasheet
 800132c:	0152      	lsls	r2, r2, #5
 800132e:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8001332:	2123      	movs	r1, #35	; 0x23
 8001334:	4630      	mov	r0, r6
 8001336:	f7ff ffb6 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 800133a:	4602      	mov	r2, r0
 800133c:	e7e0      	b.n	8001300 <_ZN8IcHausMu14changeSdadModeEhhh+0x2e>
            sdadMsb -= 13;                      // offset defined in datasheet
 800133e:	3c0d      	subs	r4, #13
 8001340:	b2e4      	uxtb	r4, r4
            retVal = writeIcMuRegister(OUT_MSB, sdadMsb);
 8001342:	4622      	mov	r2, r4
 8001344:	2121      	movs	r1, #33	; 0x21
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff ffad 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 800134c:	4602      	mov	r2, r0
            _sdadOutMsb = sdadMsb;
 800134e:	f886 410a 	strb.w	r4, [r6, #266]	; 0x10a
 8001352:	e7d6      	b.n	8001302 <_ZN8IcHausMu14changeSdadModeEhhh+0x30>
        retVal = RET_E_PARAMETER;
 8001354:	2206      	movs	r2, #6
}
 8001356:	4610      	mov	r0, r2
 8001358:	4770      	bx	lr
        retVal = RET_E_PARAMETER;
 800135a:	2206      	movs	r2, #6
 800135c:	e7fb      	b.n	8001356 <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 800135e:	2206      	movs	r2, #6
 8001360:	e7f9      	b.n	8001356 <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 8001362:	2206      	movs	r2, #6
 8001364:	e7f7      	b.n	8001356 <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
 8001366:	2206      	movs	r2, #6
 8001368:	e7f5      	b.n	8001356 <_ZN8IcHausMu14changeSdadModeEhhh+0x84>
	...

0800136c <_Z8ChangeCSb>:
	HAL_SPI_TransmitReceive_DMA(hspi_enc, spi_tx, spi_rx, 3);
}

// Function to select the slave (in this case ic-MU)
void ChangeCS(bool state)
{
 800136c:	b508      	push	{r3, lr}
  if(state)
 800136e:	b928      	cbnz	r0, 800137c <_Z8ChangeCSb+0x10>
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_RESET);
  else
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2102      	movs	r1, #2
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <_Z8ChangeCSb+0x1c>)
 8001376:	f000 ff7d 	bl	8002274 <HAL_GPIO_WritePin>
}
 800137a:	bd08      	pop	{r3, pc}
	  HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <_Z8ChangeCSb+0x1c>)
 8001382:	f000 ff77 	bl	8002274 <HAL_GPIO_WritePin>
 8001386:	e7f8      	b.n	800137a <_Z8ChangeCSb+0xe>
 8001388:	40020400 	.word	0x40020400

0800138c <_Z12TransferIcMUPhS_j>:

// Function to exchange data the slave (in this case ic-MU)
void TransferIcMU(unsigned char* const txBuffer, unsigned char* rxBuffer, const unsigned int bufferLen)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	b082      	sub	sp, #8
  //spiExchange(&SPID1, bufferLen, txBuffer, rxBuffer);
  HAL_SPI_TransmitReceive(hspi_enc, txBuffer, rxBuffer, bufferLen, 1);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <_Z12TransferIcMUPhS_j+0x1c>)
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	b293      	uxth	r3, r2
 800139a:	460a      	mov	r2, r1
 800139c:	4601      	mov	r1, r0
 800139e:	4620      	mov	r0, r4
 80013a0:	f001 fbb8 	bl	8002b14 <HAL_SPI_TransmitReceive>

}
 80013a4:	b002      	add	sp, #8
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	200001fc 	.word	0x200001fc

080013ac <_Z41__static_initialization_and_destruction_0ii>:
 80013ac:	2801      	cmp	r0, #1
 80013ae:	d000      	beq.n	80013b2 <_Z41__static_initialization_and_destruction_0ii+0x6>
 80013b0:	4770      	bx	lr
 80013b2:	b508      	push	{r3, lr}
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d000      	beq.n	80013be <_Z41__static_initialization_and_destruction_0ii+0x12>
 80013bc:	bd08      	pop	{r3, pc}
IcHausMu ichausmu_enc(ICHAUSMU_HW_REV);
 80013be:	2107      	movs	r1, #7
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 80013c2:	f7ff fdc9 	bl	8000f58 <_ZN8IcHausMuC1Eh>
}
 80013c6:	e7f9      	b.n	80013bc <_Z41__static_initialization_and_destruction_0ii+0x10>
 80013c8:	20000200 	.word	0x20000200

080013cc <HAL_SPI_TxRxCpltCallback>:
{
 80013cc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2102      	movs	r1, #2
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80013d4:	f000 ff4e 	bl	8002274 <HAL_GPIO_WritePin>
	positionICMU = spi_rx[1] << 8;
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_SPI_TxRxCpltCallback+0x20>)
 80013da:	7851      	ldrb	r1, [r2, #1]
	positionICMU |= spi_rx[2];
 80013dc:	7893      	ldrb	r3, [r2, #2]
 80013de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013e2:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80013e4:	8013      	strh	r3, [r2, #0]
}
 80013e6:	bd08      	pop	{r3, pc}
 80013e8:	40020400 	.word	0x40020400
 80013ec:	20000320 	.word	0x20000320
 80013f0:	2000031e 	.word	0x2000031e

080013f4 <_Z19encoder_init_ichausPh>:
void encoder_init_ichaus(uint8_t* init_seq_status){
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4604      	mov	r4, r0
HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <_Z19encoder_init_ichausPh+0x58>)
 80013fe:	f000 ff39 	bl	8002274 <HAL_GPIO_WritePin>
init_seq_status[0] = (uint8_t)ichausmu_enc.init();
 8001402:	4d13      	ldr	r5, [pc, #76]	; (8001450 <_Z19encoder_init_ichausPh+0x5c>)
 8001404:	4628      	mov	r0, r5
 8001406:	f7ff fe8f 	bl	8001128 <_ZN8IcHausMu4initEv>
 800140a:	7020      	strb	r0, [r4, #0]
init_seq_status[1] = (uint8_t)ichausmu_enc.writeIcMuRegister(CIBM, 0x08);       // set bias current, Determined by firstTimeSetup()
 800140c:	2208      	movs	r2, #8
 800140e:	2100      	movs	r1, #0
 8001410:	4628      	mov	r0, r5
 8001412:	f7ff ff48 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001416:	7060      	strb	r0, [r4, #1]
init_seq_status[2] = (uint8_t)ichausmu_enc.writeIcMuRegister(LIN, 0x00);       // set the target type as rotative
 8001418:	2200      	movs	r2, #0
 800141a:	2130      	movs	r1, #48	; 0x30
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff ff42 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 8001422:	70a0      	strb	r0, [r4, #2]
init_seq_status[3] = (uint8_t)ichausmu_enc.writeIcMuRegister(MPC, 0x05);       // magnetic target is a 32master/31Nonius period
 8001424:	2205      	movs	r2, #5
 8001426:	212f      	movs	r1, #47	; 0x2f
 8001428:	4628      	mov	r0, r5
 800142a:	f7ff ff3c 	bl	80012a6 <_ZN8IcHausMu17writeIcMuRegisterE12icMuRegisterh>
 800142e:	70e0      	strb	r0, [r4, #3]
init_seq_status[4] = (uint8_t)ichausmu_enc.changeSdadMode(0x00, 18, 3);        // define the SDAD output
 8001430:	2303      	movs	r3, #3
 8001432:	2212      	movs	r2, #18
 8001434:	2100      	movs	r1, #0
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff ff4b 	bl	80012d2 <_ZN8IcHausMu14changeSdadModeEhhh>
 800143c:	7120      	strb	r0, [r4, #4]
init_seq_status[5] = (uint8_t)ichausmu_enc.setAutomaticGain(true);
 800143e:	2101      	movs	r1, #1
 8001440:	4628      	mov	r0, r5
 8001442:	f7ff ff3d 	bl	80012c0 <_ZN8IcHausMu16setAutomaticGainEh>
 8001446:	7160      	strb	r0, [r4, #5]
}
 8001448:	bd38      	pop	{r3, r4, r5, pc}
 800144a:	bf00      	nop
 800144c:	40020400 	.word	0x40020400
 8001450:	20000200 	.word	0x20000200

08001454 <_Z33trig_non_blocking_ichaus_pos_readv>:
void trig_non_blocking_ichaus_pos_read(){
 8001454:	b508      	push	{r3, lr}
	DWT_Delay(10);
 8001456:	200a      	movs	r0, #10
 8001458:	f000 fb2e 	bl	8001ab8 <DWT_Delay>
	HAL_GPIO_WritePin(SPI2_ICMU_CS_GPIO_Port, SPI2_ICMU_CS_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2102      	movs	r1, #2
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <_Z33trig_non_blocking_ichaus_pos_readv+0x24>)
 8001462:	f000 ff07 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(hspi_enc, spi_tx, spi_rx, 3);
 8001466:	2303      	movs	r3, #3
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <_Z33trig_non_blocking_ichaus_pos_readv+0x28>)
 800146a:	4905      	ldr	r1, [pc, #20]	; (8001480 <_Z33trig_non_blocking_ichaus_pos_readv+0x2c>)
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <_Z33trig_non_blocking_ichaus_pos_readv+0x30>)
 800146e:	6800      	ldr	r0, [r0, #0]
 8001470:	f001 fc68 	bl	8002d44 <HAL_SPI_TransmitReceive_DMA>
}
 8001474:	bd08      	pop	{r3, pc}
 8001476:	bf00      	nop
 8001478:	40020400 	.word	0x40020400
 800147c:	20000320 	.word	0x20000320
 8001480:	20000000 	.word	0x20000000
 8001484:	200001fc 	.word	0x200001fc

08001488 <_Z16application_mainP19__SPI_HandleTypeDef>:
void application_main (SPI_HandleTypeDef *hspi){
 8001488:	b510      	push	{r4, lr}
 800148a:	4604      	mov	r4, r0
  DWT_Init();  // Init the Data Watchpoint and Trace Unit on TIM4 to enable delays in µs
 800148c:	f000 fafe 	bl	8001a8c <DWT_Init>
  hspi_enc = hspi; // put hspi as global variable for external functions use
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <_Z16application_mainP19__SPI_HandleTypeDef+0x90>)
 8001492:	601c      	str	r4, [r3, #0]
  ichausmu_enc.csFunctionAttach(ChangeCS);
 8001494:	4c21      	ldr	r4, [pc, #132]	; (800151c <_Z16application_mainP19__SPI_HandleTypeDef+0x94>)
 8001496:	4922      	ldr	r1, [pc, #136]	; (8001520 <_Z16application_mainP19__SPI_HandleTypeDef+0x98>)
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff fd8b 	bl	8000fb4 <_ZN8IcHausMu16csFunctionAttachEPFvbE>
  ichausmu_enc.streamFunctionAttach(TransferIcMU);
 800149e:	4921      	ldr	r1, [pc, #132]	; (8001524 <_Z16application_mainP19__SPI_HandleTypeDef+0x9c>)
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fd8a 	bl	8000fba <_ZN8IcHausMu20streamFunctionAttachEPFvPhS0_jE>
  printf("System Init");
 80014a6:	4820      	ldr	r0, [pc, #128]	; (8001528 <_Z16application_mainP19__SPI_HandleTypeDef+0xa0>)
 80014a8:	f002 fc88 	bl	8003dbc <iprintf>
  printf("IcMU Init\n");
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <_Z16application_mainP19__SPI_HandleTypeDef+0xa4>)
 80014ae:	f002 fd0d 	bl	8003ecc <puts>
  encoder_init_ichaus(init_seq);
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <_Z16application_mainP19__SPI_HandleTypeDef+0xa8>)
 80014b4:	f7ff ff9e 	bl	80013f4 <_Z19encoder_init_ichausPh>
  for(unsigned int i = 0; i < sizeof(init_seq); i++)
 80014b8:	2400      	movs	r4, #0
 80014ba:	2c05      	cmp	r4, #5
 80014bc:	d806      	bhi.n	80014cc <_Z16application_mainP19__SPI_HandleTypeDef+0x44>
        printf(" %d ,", init_seq[i]);
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <_Z16application_mainP19__SPI_HandleTypeDef+0xa8>)
 80014c0:	5d19      	ldrb	r1, [r3, r4]
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <_Z16application_mainP19__SPI_HandleTypeDef+0xac>)
 80014c4:	f002 fc7a 	bl	8003dbc <iprintf>
  for(unsigned int i = 0; i < sizeof(init_seq); i++)
 80014c8:	3401      	adds	r4, #1
 80014ca:	e7f6      	b.n	80014ba <_Z16application_mainP19__SPI_HandleTypeDef+0x32>
  printf("\n");
 80014cc:	200a      	movs	r0, #10
 80014ce:	f002 fc8d 	bl	8003dec <putchar>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014d2:	2120      	movs	r1, #32
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <_Z16application_mainP19__SPI_HandleTypeDef+0xb0>)
 80014d6:	f000 fed3 	bl	8002280 <HAL_GPIO_TogglePin>
	  trig_non_blocking_ichaus_pos_read();
 80014da:	f7ff ffbb 	bl	8001454 <_Z33trig_non_blocking_ichaus_pos_readv>
	  DWT_Delay(100); //Let the time to read the latest info | Can be removed when further code will be added
 80014de:	2064      	movs	r0, #100	; 0x64
 80014e0:	f000 faea 	bl	8001ab8 <DWT_Delay>
	  float posDeg = positionICMU*360/65536.0;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <_Z16application_mainP19__SPI_HandleTypeDef+0xb4>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80014ec:	fb00 f003 	mul.w	r0, r0, r3
 80014f0:	f7ff f820 	bl	8000534 <__aeabi_i2d>
 80014f4:	2200      	movs	r2, #0
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <_Z16application_mainP19__SPI_HandleTypeDef+0xb8>)
 80014f8:	f7ff f886 	bl	8000608 <__aeabi_dmul>
 80014fc:	f7ff fb5c 	bl	8000bb8 <__aeabi_d2f>
	  printf("%.3f \n", posDeg);//, status);
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	480e      	ldr	r0, [pc, #56]	; (8001544 <_Z16application_mainP19__SPI_HandleTypeDef+0xbc>)
 800150a:	f002 fc57 	bl	8003dbc <iprintf>
	  HAL_Delay(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f000 fb48 	bl	8001ba4 <HAL_Delay>
 8001514:	e7dd      	b.n	80014d2 <_Z16application_mainP19__SPI_HandleTypeDef+0x4a>
 8001516:	bf00      	nop
 8001518:	200001fc 	.word	0x200001fc
 800151c:	20000200 	.word	0x20000200
 8001520:	0800136d 	.word	0x0800136d
 8001524:	0800138d 	.word	0x0800138d
 8001528:	08005db8 	.word	0x08005db8
 800152c:	08005dc4 	.word	0x08005dc4
 8001530:	20000318 	.word	0x20000318
 8001534:	08005dd0 	.word	0x08005dd0
 8001538:	40020000 	.word	0x40020000
 800153c:	2000031e 	.word	0x2000031e
 8001540:	3ef00000 	.word	0x3ef00000
 8001544:	08005dd8 	.word	0x08005dd8

08001548 <_GLOBAL__sub_I_hspi_enc>:
}
 8001548:	b508      	push	{r3, lr}
 800154a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff ff2c 	bl	80013ac <_Z41__static_initialization_and_destruction_0ii>
 8001554:	bd08      	pop	{r3, pc}

08001556 <cpp_link>:
	extern "C"
	{
#endif

	void cpp_link (SPI_HandleTypeDef *hspi)
		{
 8001556:	b508      	push	{r3, lr}
		application_main(hspi);
 8001558:	f7ff ff96 	bl	8001488 <_Z16application_mainP19__SPI_HandleTypeDef>
		}
 800155c:	bd08      	pop	{r3, pc}
	...

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2400      	movs	r4, #0
 8001566:	9405      	str	r4, [sp, #20]
 8001568:	9406      	str	r4, [sp, #24]
 800156a:	9407      	str	r4, [sp, #28]
 800156c:	9408      	str	r4, [sp, #32]
 800156e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001570:	9401      	str	r4, [sp, #4]
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_GPIO_Init+0xc0>)
 8001574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001576:	f042 0204 	orr.w	r2, r2, #4
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
 800157c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157e:	f002 0204 	and.w	r2, r2, #4
 8001582:	9201      	str	r2, [sp, #4]
 8001584:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	9402      	str	r4, [sp, #8]
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
 8001590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001592:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	9403      	str	r4, [sp, #12]
 800159c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a6:	f002 0201 	and.w	r2, r2, #1
 80015aa:	9203      	str	r2, [sp, #12]
 80015ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	9404      	str	r4, [sp, #16]
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f042 0202 	orr.w	r2, r2, #2
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	9304      	str	r3, [sp, #16]
 80015c0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c2:	4f18      	ldr	r7, [pc, #96]	; (8001624 <MX_GPIO_Init+0xc4>)
 80015c4:	4622      	mov	r2, r4
 80015c6:	2120      	movs	r1, #32
 80015c8:	4638      	mov	r0, r7
 80015ca:	f000 fe53 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_ICMU_CS_Pin|SPI2_AS5048_CS_Pin, GPIO_PIN_RESET);
 80015ce:	4e16      	ldr	r6, [pc, #88]	; (8001628 <MX_GPIO_Init+0xc8>)
 80015d0:	4622      	mov	r2, r4
 80015d2:	f241 0102 	movw	r1, #4098	; 0x1002
 80015d6:	4630      	mov	r0, r6
 80015d8:	f000 fe4c 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_GPIO_Init+0xcc>)
 80015e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	a905      	add	r1, sp, #20
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_GPIO_Init+0xd0>)
 80015ec:	f000 fd70 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015f0:	2320      	movs	r3, #32
 80015f2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2501      	movs	r5, #1
 80015f6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015fc:	a905      	add	r1, sp, #20
 80015fe:	4638      	mov	r0, r7
 8001600:	f000 fd66 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_ICMU_CS_Pin SPI2_AS5048_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_ICMU_CS_Pin|SPI2_AS5048_CS_Pin;
 8001604:	f241 0302 	movw	r3, #4098	; 0x1002
 8001608:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	a905      	add	r1, sp, #20
 8001614:	4630      	mov	r0, r6
 8001616:	f000 fd5b 	bl	80020d0 <HAL_GPIO_Init>

}
 800161a:	b00b      	add	sp, #44	; 0x2c
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	10210000 	.word	0x10210000
 8001630:	40020800 	.word	0x40020800

08001634 <MX_DMA_Init>:
{
 8001634:	b510      	push	{r4, lr}
 8001636:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001638:	2400      	movs	r4, #0
 800163a:	9401      	str	r4, [sp, #4]
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <MX_DMA_Init+0x40>)
 800163e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001640:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 3, 0);
 8001650:	4622      	mov	r2, r4
 8001652:	2103      	movs	r1, #3
 8001654:	200e      	movs	r0, #14
 8001656:	f000 facb 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800165a:	200e      	movs	r0, #14
 800165c:	f000 fafc 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001660:	4622      	mov	r2, r4
 8001662:	2103      	movs	r1, #3
 8001664:	200f      	movs	r0, #15
 8001666:	f000 fac3 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800166a:	200f      	movs	r0, #15
 800166c:	f000 faf4 	bl	8001c58 <HAL_NVIC_EnableIRQ>
}
 8001670:	b002      	add	sp, #8
 8001672:	bd10      	pop	{r4, pc}
 8001674:	40023800 	.word	0x40023800

08001678 <MX_SPI2_Init>:
{
 8001678:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <MX_SPI2_Init+0x34>)
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI2_Init+0x38>)
 800167e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001680:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001684:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	2300      	movs	r3, #0
 8001688:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800168a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001696:	2230      	movs	r2, #48	; 0x30
 8001698:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016a0:	230a      	movs	r3, #10
 80016a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a4:	f001 f9f6 	bl	8002a94 <HAL_SPI_Init>
}
 80016a8:	bd08      	pop	{r3, pc}
 80016aa:	bf00      	nop
 80016ac:	20000330 	.word	0x20000330
 80016b0:	40003800 	.word	0x40003800

080016b4 <MX_USART2_UART_Init>:
{
 80016b4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <MX_USART2_UART_Init+0x24>)
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x28>)
 80016ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016c0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	2300      	movs	r3, #0
 80016c4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ca:	220c      	movs	r2, #12
 80016cc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d2:	f001 fe38 	bl	8003346 <HAL_UART_Init>
}
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	200003e8 	.word	0x200003e8
 80016dc:	40004400 	.word	0x40004400

080016e0 <__io_putchar>:
		{
 80016e0:	b500      	push	{lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	a902      	add	r1, sp, #8
 80016e6:	f841 0d04 	str.w	r0, [r1, #-4]!
		 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	2201      	movs	r2, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <__io_putchar+0x20>)
 80016f2:	f001 fe57 	bl	80033a4 <HAL_UART_Transmit>
		}
 80016f6:	9801      	ldr	r0, [sp, #4]
 80016f8:	b003      	add	sp, #12
 80016fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80016fe:	bf00      	nop
 8001700:	200003e8 	.word	0x200003e8

08001704 <SystemClock_Config>:
{
 8001704:	b530      	push	{r4, r5, lr}
 8001706:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	2100      	movs	r1, #0
 800170c:	a808      	add	r0, sp, #32
 800170e:	f001 fef0 	bl	80034f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001712:	2400      	movs	r4, #0
 8001714:	9403      	str	r4, [sp, #12]
 8001716:	9404      	str	r4, [sp, #16]
 8001718:	9405      	str	r4, [sp, #20]
 800171a:	9406      	str	r4, [sp, #24]
 800171c:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	9401      	str	r4, [sp, #4]
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <SystemClock_Config+0x8c>)
 8001722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001724:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001734:	9402      	str	r4, [sp, #8]
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <SystemClock_Config+0x90>)
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174e:	2502      	movs	r5, #2
 8001750:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001752:	2301      	movs	r3, #1
 8001754:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2310      	movs	r3, #16
 8001758:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800175e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001760:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001764:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001766:	2304      	movs	r3, #4
 8001768:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800176a:	2307      	movs	r3, #7
 800176c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	a808      	add	r0, sp, #32
 8001770:	f000 fd90 	bl	8002294 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001778:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	4629      	mov	r1, r5
 8001786:	a803      	add	r0, sp, #12
 8001788:	f000 ffe6 	bl	8002758 <HAL_RCC_ClockConfig>
}
 800178c:	b015      	add	sp, #84	; 0x54
 800178e:	bd30      	pop	{r4, r5, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <main>:
{
 8001798:	b508      	push	{r3, lr}
  HAL_Init();
 800179a:	f000 f9d7 	bl	8001b4c <HAL_Init>
  SystemClock_Config();
 800179e:	f7ff ffb1 	bl	8001704 <SystemClock_Config>
  MX_GPIO_Init();
 80017a2:	f7ff fedd 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a6:	f7ff ff45 	bl	8001634 <MX_DMA_Init>
  MX_SPI2_Init();
 80017aa:	f7ff ff65 	bl	8001678 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80017ae:	f7ff ff81 	bl	80016b4 <MX_USART2_UART_Init>
  cpp_link(&hspi2);
 80017b2:	4802      	ldr	r0, [pc, #8]	; (80017bc <main+0x24>)
 80017b4:	f7ff fecf 	bl	8001556 <cpp_link>
 80017b8:	e7fe      	b.n	80017b8 <main+0x20>
 80017ba:	bf00      	nop
 80017bc:	20000330 	.word	0x20000330

080017c0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2100      	movs	r1, #0
 80017c8:	9100      	str	r1, [sp, #0]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_MspInit+0x34>)
 80017cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
 80017d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	9101      	str	r1, [sp, #4]
 80017e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	b002      	add	sp, #8
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017fc:	b530      	push	{r4, r5, lr}
 80017fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	2300      	movs	r3, #0
 8001802:	9303      	str	r3, [sp, #12]
 8001804:	9304      	str	r3, [sp, #16]
 8001806:	9305      	str	r3, [sp, #20]
 8001808:	9306      	str	r3, [sp, #24]
 800180a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800180c:	6802      	ldr	r2, [r0, #0]
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_SPI_MspInit+0xd8>)
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001814:	b009      	add	sp, #36	; 0x24
 8001816:	bd30      	pop	{r4, r5, pc}
 8001818:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800181a:	2500      	movs	r5, #0
 800181c:	9501      	str	r5, [sp, #4]
 800181e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	9502      	str	r5, [sp, #8]
 8001836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001838:	f042 0202 	orr.w	r2, r2, #2
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001848:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800184c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001856:	2305      	movs	r3, #5
 8001858:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	a903      	add	r1, sp, #12
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <HAL_SPI_MspInit+0xdc>)
 800185e:	f000 fc37 	bl	80020d0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001862:	481e      	ldr	r0, [pc, #120]	; (80018dc <HAL_SPI_MspInit+0xe0>)
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_SPI_MspInit+0xe4>)
 8001866:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001868:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001874:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001876:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001878:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800187a:	61c5      	str	r5, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800187e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001880:	f000 fa8a 	bl	8001d98 <HAL_DMA_Init>
 8001884:	bb00      	cbnz	r0, 80018c8 <HAL_SPI_MspInit+0xcc>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_SPI_MspInit+0xe0>)
 8001888:	64a3      	str	r3, [r4, #72]	; 0x48
 800188a:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800188c:	4815      	ldr	r0, [pc, #84]	; (80018e4 <HAL_SPI_MspInit+0xe8>)
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_SPI_MspInit+0xec>)
 8001890:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001892:	2300      	movs	r3, #0
 8001894:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800189a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189e:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a0:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a2:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018a4:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018a6:	6203      	str	r3, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018aa:	f000 fa75 	bl	8001d98 <HAL_DMA_Init>
 80018ae:	b970      	cbnz	r0, 80018ce <HAL_SPI_MspInit+0xd2>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_SPI_MspInit+0xe8>)
 80018b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018b4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2104      	movs	r1, #4
 80018ba:	2024      	movs	r0, #36	; 0x24
 80018bc:	f000 f998 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018c0:	2024      	movs	r0, #36	; 0x24
 80018c2:	f000 f9c9 	bl	8001c58 <HAL_NVIC_EnableIRQ>
}
 80018c6:	e7a5      	b.n	8001814 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 80018c8:	f7ff ff7a 	bl	80017c0 <Error_Handler>
 80018cc:	e7db      	b.n	8001886 <HAL_SPI_MspInit+0x8a>
      Error_Handler();
 80018ce:	f7ff ff77 	bl	80017c0 <Error_Handler>
 80018d2:	e7ed      	b.n	80018b0 <HAL_SPI_MspInit+0xb4>
 80018d4:	40003800 	.word	0x40003800
 80018d8:	40020400 	.word	0x40020400
 80018dc:	20000428 	.word	0x20000428
 80018e0:	40026070 	.word	0x40026070
 80018e4:	20000388 	.word	0x20000388
 80018e8:	40026058 	.word	0x40026058

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b500      	push	{lr}
 80018ee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	2300      	movs	r3, #0
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	9305      	str	r3, [sp, #20]
 80018f8:	9306      	str	r3, [sp, #24]
 80018fa:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80018fc:	6802      	ldr	r2, [r0, #0]
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x64>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d002      	beq.n	800190a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001904:	b009      	add	sp, #36	; 0x24
 8001906:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800190a:	2100      	movs	r1, #0
 800190c:	9101      	str	r1, [sp, #4]
 800190e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
 800191a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001920:	9201      	str	r2, [sp, #4]
 8001922:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	9102      	str	r1, [sp, #8]
 8001926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001938:	230c      	movs	r3, #12
 800193a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001940:	2307      	movs	r3, #7
 8001942:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	a903      	add	r1, sp, #12
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <HAL_UART_MspInit+0x68>)
 8001948:	f000 fbc2 	bl	80020d0 <HAL_GPIO_Init>
}
 800194c:	e7da      	b.n	8001904 <HAL_UART_MspInit+0x18>
 800194e:	bf00      	nop
 8001950:	40004400 	.word	0x40004400
 8001954:	40020000 	.word	0x40020000

08001958 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	4770      	bx	lr

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	e7fe      	b.n	800195a <HardFault_Handler>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	e7fe      	b.n	800195c <MemManage_Handler>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	e7fe      	b.n	800195e <BusFault_Handler>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler>

08001962 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f909 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bd08      	pop	{r3, pc}

08001970 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001972:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA1_Stream3_IRQHandler+0xc>)
 8001974:	f000 fabe 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001978:	bd08      	pop	{r3, pc}
 800197a:	bf00      	nop
 800197c:	20000388 	.word	0x20000388

08001980 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001982:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA1_Stream4_IRQHandler+0xc>)
 8001984:	f000 fab6 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop
 800198c:	20000428 	.word	0x20000428

08001990 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001992:	4802      	ldr	r0, [pc, #8]	; (800199c <SPI2_IRQHandler+0xc>)
 8001994:	f001 fb02 	bl	8002f9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop
 800199c:	20000330 	.word	0x20000330

080019a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	460d      	mov	r5, r1
 80019a4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2400      	movs	r4, #0
 80019a8:	e004      	b.n	80019b4 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80019b2:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	42b4      	cmp	r4, r6
 80019b6:	dbf8      	blt.n	80019aa <_read+0xa>
	}

return len;
}
 80019b8:	4630      	mov	r0, r6
 80019ba:	bd70      	pop	{r4, r5, r6, pc}

080019bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2400      	movs	r4, #0
 80019c2:	e005      	b.n	80019d0 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80019c4:	1c4d      	adds	r5, r1, #1
 80019c6:	7808      	ldrb	r0, [r1, #0]
 80019c8:	f7ff fe8a 	bl	80016e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80019ce:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	42b4      	cmp	r4, r6
 80019d2:	dbf7      	blt.n	80019c4 <_write+0x8>
	}
	return len;
}
 80019d4:	4630      	mov	r0, r6
 80019d6:	bd70      	pop	{r4, r5, r6, pc}

080019d8 <_close>:

int _close(int file)
{
	return -1;
}
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	4770      	bx	lr

080019de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80019e4:	2000      	movs	r0, #0
 80019e6:	4770      	bx	lr

080019e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019e8:	2001      	movs	r0, #1
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	4770      	bx	lr

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <_sbrk+0x38>)
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <_sbrk+0x40>)
 80019fa:	6800      	ldr	r0, [r0, #0]
 80019fc:	b140      	cbz	r0, 8001a10 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <_sbrk+0x40>)
 8001a00:	6800      	ldr	r0, [r0, #0]
 8001a02:	4403      	add	r3, r0
 8001a04:	1a52      	subs	r2, r2, r1
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d806      	bhi.n	8001a18 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <_sbrk+0x40>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001a0e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <_sbrk+0x40>)
 8001a12:	4c08      	ldr	r4, [pc, #32]	; (8001a34 <_sbrk+0x44>)
 8001a14:	6004      	str	r4, [r0, #0]
 8001a16:	e7f2      	b.n	80019fe <_sbrk+0xe>
    errno = ENOMEM;
 8001a18:	f001 fd36 	bl	8003488 <__errno>
 8001a1c:	230c      	movs	r3, #12
 8001a1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	e7f3      	b.n	8001a0e <_sbrk+0x1e>
 8001a26:	bf00      	nop
 8001a28:	20018000 	.word	0x20018000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000324 	.word	0x20000324
 8001a34:	20000490 	.word	0x20000490

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3e:	e003      	b.n	8001a48 <LoopCopyDataInit>

08001a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a46:	3104      	adds	r1, #4

08001a48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a50:	d3f6      	bcc.n	8001a40 <CopyDataInit>
  ldr  r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a54:	e002      	b.n	8001a5c <LoopFillZerobss>

08001a56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a58:	f842 3b04 	str.w	r3, [r2], #4

08001a5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a60:	d3f9      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a62:	f000 f83f 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f001 fd15 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7ff fe95 	bl	8001798 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a70:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001a74:	080060d4 	.word	0x080060d4
  ldr  r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a7c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001a80:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001a84:	20000490 	.word	0x20000490

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <DWT_Init+0x24>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a94:	d10b      	bne.n	8001aae <DWT_Init+0x22>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a96:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <DWT_Init+0x24>)
 8001a98:	68d3      	ldr	r3, [r2, #12]
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <DWT_Init+0x28>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    }
}
 8001aae:	4770      	bx	lr
 8001ab0:	e000edf0 	.word	0xe000edf0
 8001ab4:	e0001000 	.word	0xe0001000

08001ab8 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <DWT_Delay+0x20>)
 8001aba:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <DWT_Delay+0x24>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <DWT_Delay+0x28>)
 8001ac2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <DWT_Delay+0x20>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	4283      	cmp	r3, r0
 8001ad4:	d3fa      	bcc.n	8001acc <DWT_Delay+0x14>
}
 8001ad6:	4770      	bx	lr
 8001ad8:	e0001000 	.word	0xe0001000
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SystemInit+0x18>)
 8001ae6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af6:	609a      	str	r2, [r3, #8]
#endif
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_InitTick+0x40>)
 8001b06:	7818      	ldrb	r0, [r3, #0]
 8001b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_InitTick+0x44>)
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b18:	f000 f8ac 	bl	8001c74 <HAL_SYSTICK_Config>
 8001b1c:	b968      	cbnz	r0, 8001b3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	2c0f      	cmp	r4, #15
 8001b20:	d901      	bls.n	8001b26 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
 8001b24:	e00a      	b.n	8001b3c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b26:	2200      	movs	r2, #0
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2e:	f000 f85f 	bl	8001bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_InitTick+0x48>)
 8001b34:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2000      	movs	r0, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000004 	.word	0x20000004
 8001b48:	2000000c 	.word	0x2000000c

08001b4c <HAL_Init>:
{
 8001b4c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_Init+0x30>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b66:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f82f 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff ffc6 	bl	8001b00 <HAL_InitTick>
  HAL_MspInit();
 8001b74:	f7ff fe26 	bl	80017c4 <HAL_MspInit>
}
 8001b78:	2000      	movs	r0, #0
 8001b7a:	bd08      	pop	{r3, pc}
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_IncTick+0x10>)
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_IncTick+0x14>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	440b      	add	r3, r1
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000488 	.word	0x20000488
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <HAL_GetTick+0x8>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000488 	.word	0x20000488

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fff6 	bl	8001b98 <HAL_GetTick>
 8001bac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bb2:	d002      	beq.n	8001bba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_Delay+0x24>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bba:	f7ff ffed 	bl	8001b98 <HAL_GetTick>
 8001bbe:	1b40      	subs	r0, r0, r5
 8001bc0:	42a0      	cmp	r0, r4
 8001bc2:	d3fa      	bcc.n	8001bba <HAL_Delay+0x16>
  {
  }
}
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	0200      	lsls	r0, r0, #8
 8001bda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bde:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001be0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001be4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001be8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_NVIC_SetPriority+0x60>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfa:	f1c3 0407 	rsb	r4, r3, #7
 8001bfe:	2c04      	cmp	r4, #4
 8001c00:	bf28      	it	cs
 8001c02:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c04:	1d1d      	adds	r5, r3, #4
 8001c06:	2d06      	cmp	r5, #6
 8001c08:	d918      	bls.n	8001c3c <HAL_NVIC_SetPriority+0x4c>
 8001c0a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8001c10:	fa05 f404 	lsl.w	r4, r5, r4
 8001c14:	ea21 0104 	bic.w	r1, r1, r4
 8001c18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1a:	fa05 f303 	lsl.w	r3, r5, r3
 8001c1e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c22:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001c24:	2800      	cmp	r0, #0
 8001c26:	db0b      	blt.n	8001c40 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	0109      	lsls	r1, r1, #4
 8001c2a:	b2c9      	uxtb	r1, r1
 8001c2c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001c30:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001c34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c38:	bc30      	pop	{r4, r5}
 8001c3a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e7e5      	b.n	8001c0c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	f000 000f 	and.w	r0, r0, #15
 8001c44:	0109      	lsls	r1, r1, #4
 8001c46:	b2c9      	uxtb	r1, r1
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_NVIC_SetPriority+0x64>)
 8001c4a:	5419      	strb	r1, [r3, r0]
 8001c4c:	e7f4      	b.n	8001c38 <HAL_NVIC_SetPriority+0x48>
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	e000ed14 	.word	0xe000ed14

08001c58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	db07      	blt.n	8001c6c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5c:	f000 021f 	and.w	r2, r0, #31
 8001c60:	0940      	lsrs	r0, r0, #5
 8001c62:	2301      	movs	r3, #1
 8001c64:	4093      	lsls	r3, r2
 8001c66:	4a02      	ldr	r2, [pc, #8]	; (8001c70 <HAL_NVIC_EnableIRQ+0x18>)
 8001c68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	3801      	subs	r0, #1
 8001c76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c7a:	d20a      	bcs.n	8001c92 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_SYSTICK_Config+0x24>)
 8001c7e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_SYSTICK_Config+0x28>)
 8001c82:	21f0      	movs	r1, #240	; 0xf0
 8001c84:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	2000      	movs	r0, #0
 8001c8a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ca2:	6805      	ldr	r5, [r0, #0]
 8001ca4:	682c      	ldr	r4, [r5, #0]
 8001ca6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001caa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cac:	6804      	ldr	r4, [r0, #0]
 8001cae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb0:	6883      	ldr	r3, [r0, #8]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d005      	beq.n	8001cc2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001cb6:	6803      	ldr	r3, [r0, #0]
 8001cb8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	60da      	str	r2, [r3, #12]
  }
}
 8001cbe:	bc30      	pop	{r4, r5}
 8001cc0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001cc2:	6803      	ldr	r3, [r0, #0]
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	60d9      	str	r1, [r3, #12]
 8001cca:	e7f8      	b.n	8001cbe <DMA_SetConfig+0x1e>

08001ccc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ccc:	6802      	ldr	r2, [r0, #0]
 8001cce:	b2d3      	uxtb	r3, r2
 8001cd0:	3b10      	subs	r3, #16
 8001cd2:	490b      	ldr	r1, [pc, #44]	; (8001d00 <DMA_CalcBaseAndBitshift+0x34>)
 8001cd4:	fba1 1303 	umull	r1, r3, r1, r3
 8001cd8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <DMA_CalcBaseAndBitshift+0x38>)
 8001cdc:	5cc9      	ldrb	r1, [r1, r3]
 8001cde:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d806      	bhi.n	8001cf2 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ce4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001ce8:	f022 0203 	bic.w	r2, r2, #3
 8001cec:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001cee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001cf0:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cf2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001cf6:	f022 0203 	bic.w	r2, r2, #3
 8001cfa:	3204      	adds	r2, #4
 8001cfc:	6582      	str	r2, [r0, #88]	; 0x58
 8001cfe:	e7f6      	b.n	8001cee <DMA_CalcBaseAndBitshift+0x22>
 8001d00:	aaaaaaab 	.word	0xaaaaaaab
 8001d04:	08005df8 	.word	0x08005df8

08001d08 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d08:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d0a:	6982      	ldr	r2, [r0, #24]
 8001d0c:	b992      	cbnz	r2, 8001d34 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d00a      	beq.n	8001d28 <DMA_CheckFifoParam+0x20>
 8001d12:	b11b      	cbz	r3, 8001d1c <DMA_CheckFifoParam+0x14>
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d001      	beq.n	8001d1c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d22:	d12c      	bne.n	8001d7e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2000      	movs	r0, #0
 8001d26:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d2e:	d028      	beq.n	8001d82 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001d30:	2000      	movs	r0, #0
 8001d32:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d34:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d38:	d005      	beq.n	8001d46 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d929      	bls.n	8001d92 <DMA_CheckFifoParam+0x8a>
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d015      	beq.n	8001d6e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	4770      	bx	lr
    switch (tmp)
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d803      	bhi.n	8001d52 <DMA_CheckFifoParam+0x4a>
 8001d4a:	e8df f003 	tbb	[pc, r3]
 8001d4e:	041c      	.short	0x041c
 8001d50:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2000      	movs	r0, #0
 8001d54:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d5c:	d115      	bne.n	8001d8a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d68:	d011      	beq.n	8001d8e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d74:	d001      	beq.n	8001d7a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001d76:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001d78:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	4770      	bx	lr
        status = HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	4770      	bx	lr
        status = HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
 8001d84:	4770      	bx	lr
      status = HAL_ERROR;
 8001d86:	2001      	movs	r0, #1
 8001d88:	4770      	bx	lr
        status = HAL_ERROR;
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	4770      	bx	lr
        status = HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	4770      	bx	lr
      status = HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_DMA_Init>:
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff fefc 	bl	8001b98 <HAL_GetTick>
  if(hdma == NULL)
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d05b      	beq.n	8001e5c <HAL_DMA_Init+0xc4>
 8001da4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001da6:	2300      	movs	r3, #0
 8001da8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f012 0f01 	tst.w	r2, #1
 8001dc4:	d00a      	beq.n	8001ddc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc6:	f7ff fee7 	bl	8001b98 <HAL_GetTick>
 8001dca:	1b40      	subs	r0, r0, r5
 8001dcc:	2805      	cmp	r0, #5
 8001dce:	d9f5      	bls.n	8001dbc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001ddc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dde:	4820      	ldr	r0, [pc, #128]	; (8001e60 <HAL_DMA_Init+0xc8>)
 8001de0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	6861      	ldr	r1, [r4, #4]
 8001de4:	68a2      	ldr	r2, [r4, #8]
 8001de6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dea:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	6921      	ldr	r1, [r4, #16]
 8001dee:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df4:	69a1      	ldr	r1, [r4, #24]
 8001df6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	6a21      	ldr	r1, [r4, #32]
 8001dfe:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e00:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e04:	2904      	cmp	r1, #4
 8001e06:	d01e      	beq.n	8001e46 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001e08:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001e0a:	6826      	ldr	r6, [r4, #0]
 8001e0c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e0e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e14:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d107      	bne.n	8001e2a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e1c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e20:	b11b      	cbz	r3, 8001e2a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff ff70 	bl	8001d08 <DMA_CheckFifoParam>
 8001e28:	b990      	cbnz	r0, 8001e50 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001e2a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff ff4d 	bl	8001ccc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e34:	233f      	movs	r3, #63	; 0x3f
 8001e36:	4093      	lsls	r3, r2
 8001e38:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001e44:	e7c9      	b.n	8001dda <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001e4a:	4301      	orrs	r1, r0
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	e7db      	b.n	8001e08 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001e54:	2001      	movs	r0, #1
 8001e56:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001e5a:	e7be      	b.n	8001dda <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	e7bc      	b.n	8001dda <HAL_DMA_Init+0x42>
 8001e60:	f010803f 	.word	0xf010803f

08001e64 <HAL_DMA_Start_IT>:
{
 8001e64:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e66:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001e68:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001e6c:	2c01      	cmp	r4, #1
 8001e6e:	d02c      	beq.n	8001eca <HAL_DMA_Start_IT+0x66>
 8001e70:	2401      	movs	r4, #1
 8001e72:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e76:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001e7a:	b2e4      	uxtb	r4, r4
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001e80:	2300      	movs	r3, #0
 8001e82:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001e86:	2002      	movs	r0, #2
}
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
 8001e8a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e92:	2000      	movs	r0, #0
 8001e94:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ff02 	bl	8001ca0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e9e:	233f      	movs	r3, #63	; 0x3f
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f043 0316 	orr.w	r3, r3, #22
 8001eac:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eb0:	b123      	cbz	r3, 8001ebc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f043 0308 	orr.w	r3, r3, #8
 8001eba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7de      	b.n	8001e88 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8001eca:	2002      	movs	r0, #2
 8001ecc:	e7dc      	b.n	8001e88 <HAL_DMA_Start_IT+0x24>

08001ece <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d003      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	6802      	ldr	r2, [r0, #0]
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_DMA_IRQHandler>:
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_DMA_IRQHandler+0x1d4>)
 8001f00:	681d      	ldr	r5, [r3, #0]
 8001f02:	4b72      	ldr	r3, [pc, #456]	; (80020cc <HAL_DMA_IRQHandler+0x1d8>)
 8001f04:	fba3 3505 	umull	r3, r5, r3, r5
 8001f08:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001f0c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f10:	2308      	movs	r3, #8
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4233      	tst	r3, r6
 8001f16:	d010      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f012 0f04 	tst.w	r2, #4
 8001f20:	d00b      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f022 0204 	bic.w	r2, r2, #4
 8001f28:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f32:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	4233      	tst	r3, r6
 8001f42:	d009      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	6952      	ldr	r2, [r2, #20]
 8001f48:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f4e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	4233      	tst	r3, r6
 8001f60:	d009      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	f012 0f02 	tst.w	r2, #2
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f6c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f78:	2310      	movs	r3, #16
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	4233      	tst	r3, r6
 8001f7e:	d024      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f012 0f08 	tst.w	r2, #8
 8001f88:	d01f      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f8a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001f94:	d00d      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001f9c:	d104      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fa0:	b19b      	cbz	r3, 8001fca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4798      	blx	r3
 8001fa6:	e010      	b.n	8001fca <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001faa:	b173      	cbz	r3, 8001fca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001fac:	4620      	mov	r0, r4
 8001fae:	4798      	blx	r3
 8001fb0:	e00b      	b.n	8001fca <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001fb8:	d103      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc4:	b10b      	cbz	r3, 8001fca <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fcc:	2320      	movs	r3, #32
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	4233      	tst	r3, r6
 8001fd2:	d055      	beq.n	8002080 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f012 0f10 	tst.w	r2, #16
 8001fdc:	d050      	beq.n	8002080 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fde:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fe0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001ff2:	d033      	beq.n	800205c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ffa:	d12a      	bne.n	8002052 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03e      	beq.n	8002080 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002002:	4620      	mov	r0, r4
 8002004:	4798      	blx	r3
 8002006:	e03b      	b.n	8002080 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f023 0316 	bic.w	r3, r3, #22
 8002010:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	6953      	ldr	r3, [r2, #20]
 8002016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800201a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800201e:	b1a3      	cbz	r3, 800204a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f023 0308 	bic.w	r3, r3, #8
 8002028:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800202a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800202c:	233f      	movs	r3, #63	; 0x3f
 800202e:	4093      	lsls	r3, r2
 8002030:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002032:	2300      	movs	r3, #0
 8002034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002038:	2301      	movs	r3, #1
 800203a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800203e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03f      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002044:	4620      	mov	r0, r4
 8002046:	4798      	blx	r3
 8002048:	e03c      	b.n	80020c4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e7      	bne.n	8002020 <HAL_DMA_IRQHandler+0x12c>
 8002050:	e7eb      	b.n	800202a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002054:	b1a3      	cbz	r3, 8002080 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002056:	4620      	mov	r0, r4
 8002058:	4798      	blx	r3
 800205a:	e011      	b.n	8002080 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002062:	d109      	bne.n	8002078 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f022 0210 	bic.w	r2, r2, #16
 800206a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800206c:	2300      	movs	r3, #0
 800206e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002072:	2301      	movs	r3, #1
 8002074:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800207a:	b10b      	cbz	r3, 8002080 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800207c:	4620      	mov	r0, r4
 800207e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002080:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002082:	b1fb      	cbz	r3, 80020c4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002084:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002086:	f013 0f01 	tst.w	r3, #1
 800208a:	d017      	beq.n	80020bc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800208c:	2305      	movs	r3, #5
 800208e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800209c:	9b01      	ldr	r3, [sp, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	42ab      	cmp	r3, r5
 80020a4:	d804      	bhi.n	80020b0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f013 0f01 	tst.w	r3, #1
 80020ae:	d1f5      	bne.n	800209c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80020b0:	2300      	movs	r3, #0
 80020b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80020bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020be:	b10b      	cbz	r3, 80020c4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80020c0:	4620      	mov	r0, r4
 80020c2:	4798      	blx	r3
}
 80020c4:	b003      	add	sp, #12
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	20000004 	.word	0x20000004
 80020cc:	1b4e81b5 	.word	0x1b4e81b5

080020d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f200 80c5 	bhi.w	8002262 <HAL_GPIO_Init+0x192>
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	e039      	b.n	8002152 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	2204      	movs	r2, #4
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x14>
 80020e2:	2200      	movs	r2, #0
 80020e4:	40aa      	lsls	r2, r5
 80020e6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	3402      	adds	r4, #2
 80020ea:	4d5e      	ldr	r5, [pc, #376]	; (8002264 <HAL_GPIO_Init+0x194>)
 80020ec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f0:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_GPIO_Init+0x198>)
 80020f2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	43f2      	mvns	r2, r6
 80020f6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020fa:	684f      	ldr	r7, [r1, #4]
 80020fc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002100:	d001      	beq.n	8002106 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002102:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8002106:	4c58      	ldr	r4, [pc, #352]	; (8002268 <HAL_GPIO_Init+0x198>)
 8002108:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800210a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800210c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	684f      	ldr	r7, [r1, #4]
 8002112:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002116:	d001      	beq.n	800211c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002118:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 800211c:	4c52      	ldr	r4, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x198>)
 800211e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002120:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002122:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002126:	684f      	ldr	r7, [r1, #4]
 8002128:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800212c:	d001      	beq.n	8002132 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800212e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8002132:	4c4d      	ldr	r4, [pc, #308]	; (8002268 <HAL_GPIO_Init+0x198>)
 8002134:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002136:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002138:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213a:	684d      	ldr	r5, [r1, #4]
 800213c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002140:	d001      	beq.n	8002146 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002142:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8002146:	4c48      	ldr	r4, [pc, #288]	; (8002268 <HAL_GPIO_Init+0x198>)
 8002148:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	3301      	adds	r3, #1
 800214c:	2b0f      	cmp	r3, #15
 800214e:	f200 8086 	bhi.w	800225e <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8002152:	2201      	movs	r2, #1
 8002154:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	680c      	ldr	r4, [r1, #0]
 8002158:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 800215c:	42b2      	cmp	r2, r6
 800215e:	d1f4      	bne.n	800214a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	684c      	ldr	r4, [r1, #4]
 8002162:	1e65      	subs	r5, r4, #1
 8002164:	2d01      	cmp	r5, #1
 8002166:	d903      	bls.n	8002170 <HAL_GPIO_Init+0xa0>
 8002168:	2c11      	cmp	r4, #17
 800216a:	d001      	beq.n	8002170 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	2c12      	cmp	r4, #18
 800216e:	d112      	bne.n	8002196 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8002170:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002172:	005f      	lsls	r7, r3, #1
 8002174:	2403      	movs	r4, #3
 8002176:	40bc      	lsls	r4, r7
 8002178:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217c:	68cc      	ldr	r4, [r1, #12]
 800217e:	40bc      	lsls	r4, r7
 8002180:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002182:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002184:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002186:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218a:	684c      	ldr	r4, [r1, #4]
 800218c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002194:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002196:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002198:	005f      	lsls	r7, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	40ba      	lsls	r2, r7
 800219e:	43d2      	mvns	r2, r2
 80021a0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a2:	688d      	ldr	r5, [r1, #8]
 80021a4:	40bd      	lsls	r5, r7
 80021a6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80021a8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021aa:	684c      	ldr	r4, [r1, #4]
 80021ac:	2c02      	cmp	r4, #2
 80021ae:	d001      	beq.n	80021b4 <HAL_GPIO_Init+0xe4>
 80021b0:	2c12      	cmp	r4, #18
 80021b2:	d113      	bne.n	80021dc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	08dd      	lsrs	r5, r3, #3
 80021b6:	3508      	adds	r5, #8
 80021b8:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021bc:	f003 0407 	and.w	r4, r3, #7
 80021c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80021c4:	240f      	movs	r4, #15
 80021c6:	fa04 f40c 	lsl.w	r4, r4, ip
 80021ca:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ce:	690c      	ldr	r4, [r1, #16]
 80021d0:	fa04 f40c 	lsl.w	r4, r4, ip
 80021d4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80021d8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80021dc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	684c      	ldr	r4, [r1, #4]
 80021e2:	f004 0403 	and.w	r4, r4, #3
 80021e6:	40bc      	lsls	r4, r7
 80021e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80021ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ec:	684a      	ldr	r2, [r1, #4]
 80021ee:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80021f2:	d0aa      	beq.n	800214a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	2200      	movs	r2, #0
 80021f6:	9201      	str	r2, [sp, #4]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_GPIO_Init+0x19c>)
 80021fa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80021fc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002200:	6454      	str	r4, [r2, #68]	; 0x44
 8002202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002204:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800220c:	089c      	lsrs	r4, r3, #2
 800220e:	1ca5      	adds	r5, r4, #2
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_GPIO_Init+0x194>)
 8002212:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	0095      	lsls	r5, r2, #2
 800221c:	220f      	movs	r2, #15
 800221e:	40aa      	lsls	r2, r5
 8002220:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_GPIO_Init+0x1a0>)
 8002226:	4290      	cmp	r0, r2
 8002228:	f43f af5b 	beq.w	80020e2 <HAL_GPIO_Init+0x12>
 800222c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002230:	4290      	cmp	r0, r2
 8002232:	d00e      	beq.n	8002252 <HAL_GPIO_Init+0x182>
 8002234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002238:	4290      	cmp	r0, r2
 800223a:	d00c      	beq.n	8002256 <HAL_GPIO_Init+0x186>
 800223c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002240:	4290      	cmp	r0, r2
 8002242:	d00a      	beq.n	800225a <HAL_GPIO_Init+0x18a>
 8002244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002248:	4290      	cmp	r0, r2
 800224a:	f43f af48 	beq.w	80020de <HAL_GPIO_Init+0xe>
 800224e:	2207      	movs	r2, #7
 8002250:	e748      	b.n	80020e4 <HAL_GPIO_Init+0x14>
 8002252:	2201      	movs	r2, #1
 8002254:	e746      	b.n	80020e4 <HAL_GPIO_Init+0x14>
 8002256:	2202      	movs	r2, #2
 8002258:	e744      	b.n	80020e4 <HAL_GPIO_Init+0x14>
 800225a:	2203      	movs	r2, #3
 800225c:	e742      	b.n	80020e4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800225e:	b003      	add	sp, #12
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	4770      	bx	lr
 8002264:	40013800 	.word	0x40013800
 8002268:	40013c00 	.word	0x40013c00
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	b912      	cbnz	r2, 800227c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002276:	0409      	lsls	r1, r1, #16
 8002278:	6181      	str	r1, [r0, #24]
  }
}
 800227a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800227c:	6181      	str	r1, [r0, #24]
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002280:	6943      	ldr	r3, [r0, #20]
 8002282:	ea31 0303 	bics.w	r3, r1, r3
 8002286:	d001      	beq.n	800228c <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002288:	6181      	str	r1, [r0, #24]
  }
}
 800228a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800228c:	0409      	lsls	r1, r1, #16
 800228e:	6181      	str	r1, [r0, #24]
 8002290:	4770      	bx	lr
	...

08002294 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	2800      	cmp	r0, #0
 8002296:	f000 81e4 	beq.w	8002662 <HAL_RCC_OscConfig+0x3ce>
{
 800229a:	b570      	push	{r4, r5, r6, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a0:	6803      	ldr	r3, [r0, #0]
 80022a2:	f013 0f01 	tst.w	r3, #1
 80022a6:	d03b      	beq.n	8002320 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a8:	4ba7      	ldr	r3, [pc, #668]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d02c      	beq.n	800230e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b4:	4ba4      	ldr	r3, [pc, #656]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d021      	beq.n	8002304 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c6:	d04f      	beq.n	8002368 <HAL_RCC_OscConfig+0xd4>
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d052      	beq.n	8002374 <HAL_RCC_OscConfig+0xe0>
 80022ce:	4b9e      	ldr	r3, [pc, #632]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d050      	beq.n	8002388 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fc57 	bl	8001b98 <HAL_GetTick>
 80022ea:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ec:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f6:	f7ff fc4f 	bl	8001b98 <HAL_GetTick>
 80022fa:	1b40      	subs	r0, r0, r5
 80022fc:	2864      	cmp	r0, #100	; 0x64
 80022fe:	d9f5      	bls.n	80022ec <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	e1b3      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002304:	4b90      	ldr	r3, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800230c:	d0d8      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002316:	d003      	beq.n	8002320 <HAL_RCC_OscConfig+0x8c>
 8002318:	6863      	ldr	r3, [r4, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 81a3 	beq.w	8002666 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	f013 0f02 	tst.w	r3, #2
 8002326:	d055      	beq.n	80023d4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002328:	4b87      	ldr	r3, [pc, #540]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f013 0f0c 	tst.w	r3, #12
 8002330:	d03e      	beq.n	80023b0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b85      	ldr	r3, [pc, #532]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d033      	beq.n	80023a6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d068      	beq.n	8002416 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_OscConfig+0x2b8>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7ff fc25 	bl	8001b98 <HAL_GetTick>
 800234e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f013 0f02 	tst.w	r3, #2
 8002358:	d154      	bne.n	8002404 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff fc1d 	bl	8001b98 <HAL_GetTick>
 800235e:	1b40      	subs	r0, r0, r5
 8002360:	2802      	cmp	r0, #2
 8002362:	d9f5      	bls.n	8002350 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002364:	2003      	movs	r0, #3
 8002366:	e181      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002368:	4a77      	ldr	r2, [pc, #476]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e7b5      	b.n	80022e0 <HAL_RCC_OscConfig+0x4c>
 8002374:	4b74      	ldr	r3, [pc, #464]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e7ab      	b.n	80022e0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002388:	f7ff fc06 	bl	8001b98 <HAL_GetTick>
 800238c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002396:	d0c3      	beq.n	8002320 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fbfe 	bl	8001b98 <HAL_GetTick>
 800239c:	1b40      	subs	r0, r0, r5
 800239e:	2864      	cmp	r0, #100	; 0x64
 80023a0:	d9f5      	bls.n	800238e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80023a2:	2003      	movs	r0, #3
 80023a4:	e162      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023ae:	d1c6      	bne.n	800233e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b0:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f013 0f02 	tst.w	r3, #2
 80023b8:	d004      	beq.n	80023c4 <HAL_RCC_OscConfig+0x130>
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e153      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4a60      	ldr	r2, [pc, #384]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023cc:	6921      	ldr	r1, [r4, #16]
 80023ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	f013 0f08 	tst.w	r3, #8
 80023da:	d040      	beq.n	800245e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023dc:	6963      	ldr	r3, [r4, #20]
 80023de:	b363      	cbz	r3, 800243a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x2bc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7ff fbd7 	bl	8001b98 <HAL_GetTick>
 80023ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ec:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f013 0f02 	tst.w	r3, #2
 80023f4:	d133      	bne.n	800245e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f6:	f7ff fbcf 	bl	8001b98 <HAL_GetTick>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9f5      	bls.n	80023ec <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e133      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800240c:	6921      	ldr	r1, [r4, #16]
 800240e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e7de      	b.n	80023d4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_OscConfig+0x2b8>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800241c:	f7ff fbbc 	bl	8001b98 <HAL_GetTick>
 8002420:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f013 0f02 	tst.w	r3, #2
 800242a:	d0d3      	beq.n	80023d4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fbb4 	bl	8001b98 <HAL_GetTick>
 8002430:	1b40      	subs	r0, r0, r5
 8002432:	2802      	cmp	r0, #2
 8002434:	d9f5      	bls.n	8002422 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002436:	2003      	movs	r0, #3
 8002438:	e118      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_RCC_OscConfig+0x2bc>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7ff fbaa 	bl	8001b98 <HAL_GetTick>
 8002444:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002446:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	f013 0f02 	tst.w	r3, #2
 800244e:	d006      	beq.n	800245e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fba2 	bl	8001b98 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2802      	cmp	r0, #2
 8002458:	d9f5      	bls.n	8002446 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e106      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	f013 0f04 	tst.w	r3, #4
 8002464:	d079      	beq.n	800255a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800246e:	d133      	bne.n	80024d8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002488:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x2c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002492:	d023      	beq.n	80024dc <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	68a3      	ldr	r3, [r4, #8]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d034      	beq.n	8002504 <HAL_RCC_OscConfig+0x270>
 800249a:	2b05      	cmp	r3, #5
 800249c:	d038      	beq.n	8002510 <HAL_RCC_OscConfig+0x27c>
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80024a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	671a      	str	r2, [r3, #112]	; 0x70
 80024a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d036      	beq.n	8002524 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff fb6f 	bl	8001b98 <HAL_GetTick>
 80024ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	d148      	bne.n	8002558 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb67 	bl	8001b98 <HAL_GetTick>
 80024ca:	1b80      	subs	r0, r0, r6
 80024cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80024d0:	4298      	cmp	r0, r3
 80024d2:	d9f3      	bls.n	80024bc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
 80024d6:	e0c9      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 80024d8:	2500      	movs	r5, #0
 80024da:	e7d6      	b.n	800248a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x2c0>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024e6:	f7ff fb57 	bl	8001b98 <HAL_GetTick>
 80024ea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_OscConfig+0x2c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024f4:	d1ce      	bne.n	8002494 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7ff fb4f 	bl	8001b98 <HAL_GetTick>
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	2802      	cmp	r0, #2
 80024fe:	d9f5      	bls.n	80024ec <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002500:	2003      	movs	r0, #3
 8002502:	e0b3      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002506:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	e7cf      	b.n	80024b0 <HAL_RCC_OscConfig+0x21c>
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 8002512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	671a      	str	r2, [r3, #112]	; 0x70
 800251a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	671a      	str	r2, [r3, #112]	; 0x70
 8002522:	e7c5      	b.n	80024b0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fb38 	bl	8001b98 <HAL_GetTick>
 8002528:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_OscConfig+0x2b4>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	f013 0f02 	tst.w	r3, #2
 8002532:	d011      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff fb30 	bl	8001b98 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	f241 3388 	movw	r3, #5000	; 0x1388
 800253e:	4298      	cmp	r0, r3
 8002540:	d9f3      	bls.n	800252a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002542:	2003      	movs	r0, #3
 8002544:	e092      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	42470000 	.word	0x42470000
 8002550:	42470e80 	.word	0x42470e80
 8002554:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002558:	b9ed      	cbnz	r5, 8002596 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	69a3      	ldr	r3, [r4, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8084 	beq.w	800266a <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002562:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	f002 020c 	and.w	r2, r2, #12
 800256a:	2a08      	cmp	r2, #8
 800256c:	d051      	beq.n	8002612 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256e:	2b02      	cmp	r3, #2
 8002570:	d017      	beq.n	80025a2 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_OscConfig+0x3e8>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fb0e 	bl	8001b98 <HAL_GetTick>
 800257c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002586:	d042      	beq.n	800260e <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff fb06 	bl	8001b98 <HAL_GetTick>
 800258c:	1b00      	subs	r0, r0, r4
 800258e:	2802      	cmp	r0, #2
 8002590:	d9f5      	bls.n	800257e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
 8002594:	e06a      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002596:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 8002598:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	e7db      	b.n	800255a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x3e8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7ff faf6 	bl	8001b98 <HAL_GetTick>
 80025ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025b6:	d006      	beq.n	80025c6 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff faee 	bl	8001b98 <HAL_GetTick>
 80025bc:	1b40      	subs	r0, r0, r5
 80025be:	2802      	cmp	r0, #2
 80025c0:	d9f5      	bls.n	80025ae <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
 80025c4:	e052      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c6:	69e3      	ldr	r3, [r4, #28]
 80025c8:	6a22      	ldr	r2, [r4, #32]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80025d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025d4:	0852      	lsrs	r2, r2, #1
 80025d6:	3a01      	subs	r2, #1
 80025d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 80025e4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_OscConfig+0x3e8>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025ec:	f7ff fad4 	bl	8001b98 <HAL_GetTick>
 80025f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7ff facc 	bl	8001b98 <HAL_GetTick>
 8002600:	1b00      	subs	r0, r0, r4
 8002602:	2802      	cmp	r0, #2
 8002604:	d9f5      	bls.n	80025f2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
 8002608:	e030      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800260a:	2000      	movs	r0, #0
 800260c:	e02e      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
 800260e:	2000      	movs	r0, #0
 8002610:	e02c      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002612:	2b01      	cmp	r3, #1
 8002614:	d02c      	beq.n	8002670 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_RCC_OscConfig+0x3e4>)
 8002618:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800261e:	69e2      	ldr	r2, [r4, #28]
 8002620:	4291      	cmp	r1, r2
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e021      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262c:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	428a      	cmp	r2, r1
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e01a      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002636:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002638:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800263c:	401a      	ands	r2, r3
 800263e:	428a      	cmp	r2, r1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8002642:	2001      	movs	r0, #1
 8002644:	e012      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800264c:	428a      	cmp	r2, r1
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8002650:	2001      	movs	r0, #1
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002654:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800265a:	4293      	cmp	r3, r2
 800265c:	d00a      	beq.n	8002674 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e004      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
}
 8002664:	4770      	bx	lr
        return HAL_ERROR;
 8002666:	2001      	movs	r0, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800266a:	2000      	movs	r0, #0
}
 800266c:	b002      	add	sp, #8
 800266e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002670:	2001      	movs	r0, #1
 8002672:	e7fb      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8002674:	2000      	movs	r0, #0
 8002676:	e7f9      	b.n	800266c <HAL_RCC_OscConfig+0x3d8>
 8002678:	40023800 	.word	0x40023800
 800267c:	42470060 	.word	0x42470060

08002680 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d05c      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0xc6>
 800268c:	2b08      	cmp	r3, #8
 800268e:	d001      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002690:	482f      	ldr	r0, [pc, #188]	; (8002750 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002692:	4770      	bx	lr
{
 8002694:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCC_GetSysClockFreq+0xcc>)
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80026a6:	d02b      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_RCC_GetSysClockFreq+0xcc>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80026b0:	461e      	mov	r6, r3
 80026b2:	2700      	movs	r7, #0
 80026b4:	015c      	lsls	r4, r3, #5
 80026b6:	2500      	movs	r5, #0
 80026b8:	1ae4      	subs	r4, r4, r3
 80026ba:	eb65 0507 	sbc.w	r5, r5, r7
 80026be:	01a9      	lsls	r1, r5, #6
 80026c0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80026c4:	01a0      	lsls	r0, r4, #6
 80026c6:	1b00      	subs	r0, r0, r4
 80026c8:	eb61 0105 	sbc.w	r1, r1, r5
 80026cc:	00cb      	lsls	r3, r1, #3
 80026ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80026d2:	00c4      	lsls	r4, r0, #3
 80026d4:	19a0      	adds	r0, r4, r6
 80026d6:	eb43 0107 	adc.w	r1, r3, r7
 80026da:	024b      	lsls	r3, r1, #9
 80026dc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80026e0:	0244      	lsls	r4, r0, #9
 80026e2:	4620      	mov	r0, r4
 80026e4:	4619      	mov	r1, r3
 80026e6:	2300      	movs	r3, #0
 80026e8:	f7fe fab6 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_RCC_GetSysClockFreq+0xcc>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026f4:	3301      	adds	r3, #1
 80026f6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80026f8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026fc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002708:	461e      	mov	r6, r3
 800270a:	2700      	movs	r7, #0
 800270c:	015c      	lsls	r4, r3, #5
 800270e:	2500      	movs	r5, #0
 8002710:	1ae4      	subs	r4, r4, r3
 8002712:	eb65 0507 	sbc.w	r5, r5, r7
 8002716:	01a9      	lsls	r1, r5, #6
 8002718:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800271c:	01a0      	lsls	r0, r4, #6
 800271e:	1b00      	subs	r0, r0, r4
 8002720:	eb61 0105 	sbc.w	r1, r1, r5
 8002724:	00cb      	lsls	r3, r1, #3
 8002726:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800272a:	00c4      	lsls	r4, r0, #3
 800272c:	19a0      	adds	r0, r4, r6
 800272e:	eb43 0107 	adc.w	r1, r3, r7
 8002732:	028b      	lsls	r3, r1, #10
 8002734:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002738:	0284      	lsls	r4, r0, #10
 800273a:	4620      	mov	r0, r4
 800273c:	4619      	mov	r1, r3
 800273e:	2300      	movs	r3, #0
 8002740:	f7fe fa8a 	bl	8000c58 <__aeabi_uldivmod>
 8002744:	e7d2      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8002746:	4803      	ldr	r0, [pc, #12]	; (8002754 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400
 8002754:	007a1200 	.word	0x007a1200

08002758 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002758:	2800      	cmp	r0, #0
 800275a:	f000 809e 	beq.w	800289a <HAL_RCC_ClockConfig+0x142>
{
 800275e:	b570      	push	{r4, r5, r6, lr}
 8002760:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002762:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x14c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	428b      	cmp	r3, r1
 800276c:	d209      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	b2cb      	uxtb	r3, r1
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_RCC_ClockConfig+0x14c>)
 8002772:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	428b      	cmp	r3, r1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800277e:	2001      	movs	r0, #1
}
 8002780:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f013 0f02 	tst.w	r3, #2
 8002788:	d017      	beq.n	80027ba <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	f013 0f04 	tst.w	r3, #4
 800278e:	d004      	beq.n	800279a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 8002792:	6893      	ldr	r3, [r2, #8]
 8002794:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002798:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f013 0f08 	tst.w	r3, #8
 80027a0:	d004      	beq.n	80027ac <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a2:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 80027a4:	6893      	ldr	r3, [r2, #8]
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4a3e      	ldr	r2, [pc, #248]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 80027ae:	6893      	ldr	r3, [r2, #8]
 80027b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b4:	68a0      	ldr	r0, [r4, #8]
 80027b6:	4303      	orrs	r3, r0
 80027b8:	6093      	str	r3, [r2, #8]
 80027ba:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	f013 0f01 	tst.w	r3, #1
 80027c2:	d032      	beq.n	800282a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d021      	beq.n	800280e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	1e9a      	subs	r2, r3, #2
 80027cc:	2a01      	cmp	r2, #1
 80027ce:	d925      	bls.n	800281c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4a35      	ldr	r2, [pc, #212]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f012 0f02 	tst.w	r2, #2
 80027d8:	d061      	beq.n	800289e <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4933      	ldr	r1, [pc, #204]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 80027dc:	688a      	ldr	r2, [r1, #8]
 80027de:	f022 0203 	bic.w	r2, r2, #3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80027e6:	f7ff f9d7 	bl	8001b98 <HAL_GetTick>
 80027ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ec:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027fa:	d016      	beq.n	800282a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7ff f9cc 	bl	8001b98 <HAL_GetTick>
 8002800:	1b80      	subs	r0, r0, r6
 8002802:	f241 3388 	movw	r3, #5000	; 0x1388
 8002806:	4298      	cmp	r0, r3
 8002808:	d9f0      	bls.n	80027ec <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800280a:	2003      	movs	r0, #3
 800280c:	e7b8      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002816:	d1e0      	bne.n	80027da <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002818:	2001      	movs	r0, #1
 800281a:	e7b1      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002824:	d1d9      	bne.n	80027da <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002826:	2001      	movs	r0, #1
 8002828:	e7aa      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_RCC_ClockConfig+0x14c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	42ab      	cmp	r3, r5
 8002834:	d909      	bls.n	800284a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	b2ea      	uxtb	r2, r5
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_ClockConfig+0x14c>)
 800283a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	42ab      	cmp	r3, r5
 8002844:	d001      	beq.n	800284a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
 8002848:	e79a      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	f013 0f04 	tst.w	r3, #4
 8002850:	d006      	beq.n	8002860 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 8002854:	6893      	ldr	r3, [r2, #8]
 8002856:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800285a:	68e1      	ldr	r1, [r4, #12]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	f013 0f08 	tst.w	r3, #8
 8002866:	d007      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 800286a:	6893      	ldr	r3, [r2, #8]
 800286c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002870:	6921      	ldr	r1, [r4, #16]
 8002872:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002876:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002878:	f7ff ff02 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x150>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002884:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x154>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	40d8      	lsrs	r0, r3
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x158>)
 800288c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x15c>)
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	f7ff f935 	bl	8001b00 <HAL_InitTick>
  return HAL_OK;
 8002896:	2000      	movs	r0, #0
 8002898:	e772      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
}
 800289c:	4770      	bx	lr
        return HAL_ERROR;
 800289e:	2001      	movs	r0, #1
 80028a0:	e76e      	b.n	8002780 <HAL_RCC_ClockConfig+0x28>
 80028a2:	bf00      	nop
 80028a4:	40023c00 	.word	0x40023c00
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08005de0 	.word	0x08005de0
 80028b0:	20000004 	.word	0x20000004
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028c6:	f7ff fff7 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80028d6:	40d8      	lsrs	r0, r3
 80028d8:	bd08      	pop	{r3, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08005df0 	.word	0x08005df0

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e6:	f7ff ffe7 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028f2:	4a03      	ldr	r2, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80028f6:	40d8      	lsrs	r0, r3
 80028f8:	bd08      	pop	{r3, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	08005df0 	.word	0x08005df0

08002904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	4605      	mov	r5, r0
 8002908:	460f      	mov	r7, r1
 800290a:	4616      	mov	r6, r2
 800290c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290e:	682b      	ldr	r3, [r5, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	ea37 0303 	bics.w	r3, r7, r3
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	42b3      	cmp	r3, r6
 800291e:	d037      	beq.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002920:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002924:	d0f3      	beq.n	800290e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002926:	f7ff f937 	bl	8001b98 <HAL_GetTick>
 800292a:	9b06      	ldr	r3, [sp, #24]
 800292c:	1ac0      	subs	r0, r0, r3
 800292e:	42a0      	cmp	r0, r4
 8002930:	d201      	bcs.n	8002936 <SPI_WaitFlagStateUntilTimeout+0x32>
 8002932:	2c00      	cmp	r4, #0
 8002934:	d1eb      	bne.n	800290e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002936:	682a      	ldr	r2, [r5, #0]
 8002938:	6853      	ldr	r3, [r2, #4]
 800293a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800293e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002940:	686b      	ldr	r3, [r5, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002946:	d00b      	beq.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002948:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294e:	d014      	beq.n	800297a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002950:	2301      	movs	r3, #1
 8002952:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002956:	2300      	movs	r3, #0
 8002958:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 800295c:	2003      	movs	r0, #3
 800295e:	e018      	b.n	8002992 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002960:	68ab      	ldr	r3, [r5, #8]
 8002962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002966:	d002      	beq.n	800296e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d1ec      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800296e:	682a      	ldr	r2, [r5, #0]
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e7e6      	b.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800297a:	682a      	ldr	r2, [r5, #0]
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	682a      	ldr	r2, [r5, #0]
 8002986:	6813      	ldr	r3, [r2, #0]
 8002988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e7df      	b.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8002990:	2000      	movs	r0, #0
}
 8002992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b530      	push	{r4, r5, lr}
 8002996:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002998:	4c16      	ldr	r4, [pc, #88]	; (80029f4 <SPI_EndRxTxTransaction+0x60>)
 800299a:	6824      	ldr	r4, [r4, #0]
 800299c:	4d16      	ldr	r5, [pc, #88]	; (80029f8 <SPI_EndRxTxTransaction+0x64>)
 800299e:	fba5 3404 	umull	r3, r4, r5, r4
 80029a2:	0d64      	lsrs	r4, r4, #21
 80029a4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80029a8:	fb05 f404 	mul.w	r4, r5, r4
 80029ac:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	6844      	ldr	r4, [r0, #4]
 80029b0:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80029b4:	d00b      	beq.n	80029ce <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029b6:	9b03      	ldr	r3, [sp, #12]
 80029b8:	b1c3      	cbz	r3, 80029ec <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80029ba:	9b03      	ldr	r3, [sp, #12]
 80029bc:	3b01      	subs	r3, #1
 80029be:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029c0:	6803      	ldr	r3, [r0, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029c8:	d1f5      	bne.n	80029b6 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e00f      	b.n	80029ee <SPI_EndRxTxTransaction+0x5a>
 80029ce:	460b      	mov	r3, r1
 80029d0:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d2:	9200      	str	r2, [sp, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	f7ff ff94 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	b130      	cbz	r0, 80029ee <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029e2:	f043 0320 	orr.w	r3, r3, #32
 80029e6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e000      	b.n	80029ee <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	b005      	add	sp, #20
 80029f2:	bd30      	pop	{r4, r5, pc}
 80029f4:	20000004 	.word	0x20000004
 80029f8:	165e9f81 	.word	0x165e9f81

080029fc <SPI_EndRxTransaction>:
{
 80029fc:	b510      	push	{r4, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a02:	6840      	ldr	r0, [r0, #4]
 8002a04:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8002a08:	d016      	beq.n	8002a38 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a0a:	6860      	ldr	r0, [r4, #4]
 8002a0c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8002a10:	d12e      	bne.n	8002a70 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a12:	68a3      	ldr	r3, [r4, #8]
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d01b      	beq.n	8002a52 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff ff6e 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b350      	cbz	r0, 8002a82 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a2e:	f043 0320 	orr.w	r3, r3, #32
 8002a32:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e024      	b.n	8002a82 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a38:	68a3      	ldr	r3, [r4, #8]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d002      	beq.n	8002a46 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d1e1      	bne.n	8002a0a <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	6803      	ldr	r3, [r0, #0]
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	6003      	str	r3, [r0, #0]
 8002a50:	e7db      	b.n	8002a0a <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a52:	9200      	str	r2, [sp, #0]
 8002a54:	460b      	mov	r3, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f7ff ff52 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b170      	cbz	r0, 8002a82 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e008      	b.n	8002a82 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	460b      	mov	r3, r1
 8002a74:	2200      	movs	r2, #0
 8002a76:	2101      	movs	r1, #1
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7ff ff43 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b910      	cbnz	r0, 8002a88 <SPI_EndRxTransaction+0x8c>
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	b002      	add	sp, #8
 8002a86:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a8a:	f043 0320 	orr.w	r3, r3, #32
 8002a8e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e7f6      	b.n	8002a82 <SPI_EndRxTransaction+0x86>

08002a94 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d03b      	beq.n	8002b10 <HAL_SPI_Init+0x7c>
{
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02e      	beq.n	8002b06 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	68a2      	ldr	r2, [r4, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	68e2      	ldr	r2, [r4, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	6922      	ldr	r2, [r4, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	6962      	ldr	r2, [r4, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	69a2      	ldr	r2, [r4, #24]
 8002acc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	69e2      	ldr	r2, [r4, #28]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	6a22      	ldr	r2, [r4, #32]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ae2:	8b63      	ldrh	r3, [r4, #26]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	69d3      	ldr	r3, [r2, #28]
 8002af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afa:	2000      	movs	r0, #0
 8002afc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002b04:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002b06:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002b0a:	f7fe fe77 	bl	80017fc <HAL_SPI_MspInit>
 8002b0e:	e7cb      	b.n	8002aa8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
}
 8002b12:	4770      	bx	lr

08002b14 <HAL_SPI_TransmitReceive>:
{
 8002b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002b1e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8002b22:	2c01      	cmp	r4, #1
 8002b24:	f000 810b 	beq.w	8002d3e <HAL_SPI_TransmitReceive+0x22a>
 8002b28:	461d      	mov	r5, r3
 8002b2a:	4617      	mov	r7, r2
 8002b2c:	460e      	mov	r6, r1
 8002b2e:	4604      	mov	r4, r0
 8002b30:	2301      	movs	r3, #1
 8002b32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002b36:	f7ff f82f 	bl	8001b98 <HAL_GetTick>
 8002b3a:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8002b3c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002b40:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8002b42:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b44:	2801      	cmp	r0, #1
 8002b46:	d015      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x60>
 8002b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b4c:	d00a      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b50:	2201      	movs	r2, #1
 8002b52:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	b003      	add	sp, #12
 8002b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b64:	68a3      	ldr	r3, [r4, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80db 	bne.w	8002d22 <HAL_SPI_TransmitReceive+0x20e>
 8002b6c:	2804      	cmp	r0, #4
 8002b6e:	d001      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e7ed      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b74:	2e00      	cmp	r6, #0
 8002b76:	f000 80d6 	beq.w	8002d26 <HAL_SPI_TransmitReceive+0x212>
 8002b7a:	2f00      	cmp	r7, #0
 8002b7c:	f000 80d5 	beq.w	8002d2a <HAL_SPI_TransmitReceive+0x216>
 8002b80:	2d00      	cmp	r5, #0
 8002b82:	f000 80d4 	beq.w	8002d2e <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b86:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b90:	2305      	movs	r3, #5
 8002b92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b9a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b9c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b9e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ba0:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ba2:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ba4:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8002ba6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ba8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002bb2:	d103      	bne.n	8002bbc <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bbc:	68e3      	ldr	r3, [r4, #12]
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	d010      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc4:	6863      	ldr	r3, [r4, #4]
 8002bc6:	b10b      	cbz	r3, 8002bcc <HAL_SPI_TransmitReceive+0xb8>
 8002bc8:	2d01      	cmp	r5, #1
 8002bca:	d10a      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002bda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002be2:	2501      	movs	r5, #1
 8002be4:	e069      	b.n	8002cba <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be6:	6863      	ldr	r3, [r4, #4]
 8002be8:	b10b      	cbz	r3, 8002bee <HAL_SPI_TransmitReceive+0xda>
 8002bea:	2d01      	cmp	r5, #1
 8002bec:	d10a      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002c04:	2501      	movs	r5, #1
 8002c06:	e01b      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	f012 0f01 	tst.w	r2, #1
 8002c10:	d00d      	beq.n	8002c2e <HAL_SPI_TransmitReceive+0x11a>
 8002c12:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002c14:	b292      	uxth	r2, r2
 8002c16:	b152      	cbz	r2, 8002c2e <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c20:	3302      	adds	r3, #2
 8002c22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c2c:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c2e:	f7fe ffb3 	bl	8001b98 <HAL_GetTick>
 8002c32:	eba0 0009 	sub.w	r0, r0, r9
 8002c36:	4540      	cmp	r0, r8
 8002c38:	d302      	bcc.n	8002c40 <HAL_SPI_TransmitReceive+0x12c>
 8002c3a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002c3e:	d178      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b91b      	cbnz	r3, 8002c4e <HAL_SPI_TransmitReceive+0x13a>
 8002c46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d052      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f012 0f02 	tst.w	r2, #2
 8002c56:	d0d7      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0xf4>
 8002c58:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d0d3      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0xf4>
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	d0d1      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002c78:	2500      	movs	r5, #0
 8002c7a:	e7c5      	b.n	8002c08 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	f012 0f01 	tst.w	r2, #1
 8002c84:	d00d      	beq.n	8002ca2 <HAL_SPI_TransmitReceive+0x18e>
 8002c86:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	b152      	cbz	r2, 8002ca2 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c94:	3301      	adds	r3, #1
 8002c96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002ca0:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ca2:	f7fe ff79 	bl	8001b98 <HAL_GetTick>
 8002ca6:	eba0 0009 	sub.w	r0, r0, r9
 8002caa:	4540      	cmp	r0, r8
 8002cac:	d302      	bcc.n	8002cb4 <HAL_SPI_TransmitReceive+0x1a0>
 8002cae:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002cb2:	d140      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x222>
 8002cb4:	f1b8 0f00 	cmp.w	r8, #0
 8002cb8:	d03f      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b913      	cbnz	r3, 8002cc6 <HAL_SPI_TransmitReceive+0x1b2>
 8002cc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b1b3      	cbz	r3, 8002cf4 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	f012 0f02 	tst.w	r2, #2
 8002cce:	d0d5      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x168>
 8002cd0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d0d1      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x168>
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d0cf      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cdc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ce8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002cf0:	2500      	movs	r5, #0
 8002cf2:	e7c3      	b.n	8002c7c <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf4:	464a      	mov	r2, r9
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff fe4b 	bl	8002994 <SPI_EndRxTxTransaction>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b118      	cbz	r0, 8002d0a <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d02:	2320      	movs	r3, #32
 8002d04:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
    goto error;
 8002d08:	e722      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0a:	68a2      	ldr	r2, [r4, #8]
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	f47f af1f 	bne.w	8002b50 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d12:	9201      	str	r2, [sp, #4]
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	68d1      	ldr	r1, [r2, #12]
 8002d18:	9101      	str	r1, [sp, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	9a01      	ldr	r2, [sp, #4]
 8002d20:	e716      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	e714      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e712      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e710      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e70e      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e70c      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e70a      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e708      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e70c      	b.n	8002b5c <HAL_SPI_TransmitReceive+0x48>
	...

08002d44 <HAL_SPI_TransmitReceive_DMA>:
{
 8002d44:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002d46:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8002d4a:	2c01      	cmp	r4, #1
 8002d4c:	f000 8095 	beq.w	8002e7a <HAL_SPI_TransmitReceive_DMA+0x136>
 8002d50:	4604      	mov	r4, r0
 8002d52:	2001      	movs	r0, #1
 8002d54:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8002d58:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002d5c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8002d5e:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002d60:	2801      	cmp	r0, #1
 8002d62:	d00f      	beq.n	8002d84 <HAL_SPI_TransmitReceive_DMA+0x40>
 8002d64:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8002d68:	d005      	beq.n	8002d76 <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d76:	68a5      	ldr	r5, [r4, #8]
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d176      	bne.n	8002e6a <HAL_SPI_TransmitReceive_DMA+0x126>
 8002d7c:	2804      	cmp	r0, #4
 8002d7e:	d001      	beq.n	8002d84 <HAL_SPI_TransmitReceive_DMA+0x40>
    errorcode = HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	e7f3      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d072      	beq.n	8002e6e <HAL_SPI_TransmitReceive_DMA+0x12a>
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d072      	beq.n	8002e72 <HAL_SPI_TransmitReceive_DMA+0x12e>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d072      	beq.n	8002e76 <HAL_SPI_TransmitReceive_DMA+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d90:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002d94:	b2c0      	uxtb	r0, r0
 8002d96:	2804      	cmp	r0, #4
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d9a:	2005      	movs	r0, #5
 8002d9c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da0:	2000      	movs	r0, #0
 8002da2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002da4:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002da6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002da8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002daa:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dac:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002dae:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002db0:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db2:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002db4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d01b      	beq.n	8002df6 <HAL_SPI_TransmitReceive_DMA+0xb2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002dbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <HAL_SPI_TransmitReceive_DMA+0x13c>)
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002dc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dc6:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <HAL_SPI_TransmitReceive_DMA+0x140>)
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <HAL_SPI_TransmitReceive_DMA+0x144>)
 8002dce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002dd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002dd6:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8002dd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ddc:	310c      	adds	r1, #12
 8002dde:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002de0:	f7ff f840 	bl	8001e64 <HAL_DMA_Start_IT>
 8002de4:	b170      	cbz	r0, 8002e04 <HAL_SPI_TransmitReceive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002de6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002df4:	e7ba      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002df6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002df8:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <HAL_SPI_TransmitReceive_DMA+0x148>)
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002dfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_SPI_TransmitReceive_DMA+0x14c>)
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e02:	e7e2      	b.n	8002dca <HAL_SPI_TransmitReceive_DMA+0x86>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	6853      	ldr	r3, [r2, #4]
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e10:	2300      	movs	r3, #0
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e16:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e1e:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e20:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8002e22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e24:	320c      	adds	r2, #12
 8002e26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002e2a:	f7ff f81b 	bl	8001e64 <HAL_DMA_Start_IT>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b138      	cbz	r0, 8002e42 <HAL_SPI_TransmitReceive_DMA+0xfe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e34:	f043 0310 	orr.w	r3, r3, #16
 8002e38:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002e40:	e794      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6811      	ldr	r1, [r2, #0]
 8002e46:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e4a:	d103      	bne.n	8002e54 <HAL_SPI_TransmitReceive_DMA+0x110>
    __HAL_SPI_ENABLE(hspi);
 8002e4c:	6811      	ldr	r1, [r2, #0]
 8002e4e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e52:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e54:	6821      	ldr	r1, [r4, #0]
 8002e56:	684a      	ldr	r2, [r1, #4]
 8002e58:	f042 0220 	orr.w	r2, r2, #32
 8002e5c:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e5e:	6821      	ldr	r1, [r4, #0]
 8002e60:	684a      	ldr	r2, [r1, #4]
 8002e62:	f042 0202 	orr.w	r2, r2, #2
 8002e66:	604a      	str	r2, [r1, #4]
 8002e68:	e780      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e77e      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e77c      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e77a      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e778      	b.n	8002d6c <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e779      	b.n	8002d72 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8002e7e:	bf00      	nop
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002f41 	.word	0x08002f41
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002e99 	.word	0x08002e99
 8002e90:	08002ed3 	.word	0x08002ed3

08002e94 <HAL_SPI_RxCpltCallback>:
}
 8002e94:	4770      	bx	lr

08002e96 <HAL_SPI_RxHalfCpltCallback>:
}
 8002e96:	4770      	bx	lr

08002e98 <SPI_DMAHalfReceiveCplt>:
{
 8002e98:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e9c:	f7ff fffb 	bl	8002e96 <HAL_SPI_RxHalfCpltCallback>
}
 8002ea0:	bd08      	pop	{r3, pc}

08002ea2 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8002ea2:	4770      	bx	lr

08002ea4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002ea4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002ea6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002ea8:	f7ff fffb 	bl	8002ea2 <HAL_SPI_TxRxHalfCpltCallback>
}
 8002eac:	bd08      	pop	{r3, pc}

08002eae <HAL_SPI_ErrorCallback>:
}
 8002eae:	4770      	bx	lr

08002eb0 <SPI_DMAError>:
{
 8002eb0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002eb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002eb4:	6802      	ldr	r2, [r0, #0]
 8002eb6:	6853      	ldr	r3, [r2, #4]
 8002eb8:	f023 0303 	bic.w	r3, r3, #3
 8002ebc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ebe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ec0:	f043 0310 	orr.w	r3, r3, #16
 8002ec4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002ecc:	f7ff ffef 	bl	8002eae <HAL_SPI_ErrorCallback>
}
 8002ed0:	bd08      	pop	{r3, pc}

08002ed2 <SPI_DMAReceiveCplt>:
{
 8002ed2:	b538      	push	{r3, r4, r5, lr}
 8002ed4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ed6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002ed8:	f7fe fe5e 	bl	8001b98 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ee4:	d11e      	bne.n	8002f24 <SPI_DMAReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	684b      	ldr	r3, [r1, #4]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ef0:	68a3      	ldr	r3, [r4, #8]
 8002ef2:	b91b      	cbnz	r3, 8002efc <SPI_DMAReceiveCplt+0x2a>
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efa:	d017      	beq.n	8002f2c <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	6853      	ldr	r3, [r2, #4]
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f06:	4602      	mov	r2, r0
 8002f08:	2164      	movs	r1, #100	; 0x64
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fd76 	bl	80029fc <SPI_EndRxTransaction>
 8002f10:	b108      	cbz	r0, 8002f16 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f12:	2320      	movs	r3, #32
 8002f14:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f22:	b94b      	cbnz	r3, 8002f38 <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7ff ffb5 	bl	8002e94 <HAL_SPI_RxCpltCallback>
}
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	6853      	ldr	r3, [r2, #4]
 8002f30:	f023 0303 	bic.w	r3, r3, #3
 8002f34:	6053      	str	r3, [r2, #4]
 8002f36:	e7e6      	b.n	8002f06 <SPI_DMAReceiveCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ffb8 	bl	8002eae <HAL_SPI_ErrorCallback>
      return;
 8002f3e:	e7f4      	b.n	8002f2a <SPI_DMAReceiveCplt+0x58>

08002f40 <SPI_DMATransmitReceiveCplt>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f44:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002f46:	f7fe fe27 	bl	8001b98 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f52:	d11b      	bne.n	8002f8c <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	6853      	ldr	r3, [r2, #4]
 8002f58:	f023 0320 	bic.w	r3, r3, #32
 8002f5c:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f5e:	4602      	mov	r2, r0
 8002f60:	2164      	movs	r1, #100	; 0x64
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff fd16 	bl	8002994 <SPI_EndRxTxTransaction>
 8002f68:	b118      	cbz	r0, 8002f72 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f6c:	f043 0320 	orr.w	r3, r3, #32
 8002f70:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6853      	ldr	r3, [r2, #4]
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002f80:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f8a:	b91b      	cbnz	r3, 8002f94 <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7fe fa1d 	bl	80013cc <HAL_SPI_TxRxCpltCallback>
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff ff8a 	bl	8002eae <HAL_SPI_ErrorCallback>
      return;
 8002f9a:	e7fa      	b.n	8002f92 <SPI_DMATransmitReceiveCplt+0x52>

08002f9c <HAL_SPI_IRQHandler>:
{
 8002f9c:	b530      	push	{r4, r5, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002fa2:	6802      	ldr	r2, [r0, #0]
 8002fa4:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002fa6:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fa8:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8002fac:	b949      	cbnz	r1, 8002fc2 <HAL_SPI_IRQHandler+0x26>
 8002fae:	f013 0f01 	tst.w	r3, #1
 8002fb2:	d006      	beq.n	8002fc2 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fb8:	d003      	beq.n	8002fc2 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8002fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	4798      	blx	r3
    return;
 8002fc0:	e008      	b.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002fc2:	f013 0f02 	tst.w	r3, #2
 8002fc6:	d007      	beq.n	8002fd8 <HAL_SPI_IRQHandler+0x3c>
 8002fc8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002fcc:	d004      	beq.n	8002fd8 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8002fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4798      	blx	r3
}
 8002fd4:	b005      	add	sp, #20
 8002fd6:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fd8:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8002fdc:	b91d      	cbnz	r5, 8002fe6 <HAL_SPI_IRQHandler+0x4a>
 8002fde:	b911      	cbnz	r1, 8002fe6 <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002fe0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fe4:	d0f6      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
 8002fe6:	f010 0f20 	tst.w	r0, #32
 8002fea:	d0f3      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fec:	b179      	cbz	r1, 800300e <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fee:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8002ff2:	b2c9      	uxtb	r1, r1
 8002ff4:	2903      	cmp	r1, #3
 8002ff6:	d053      	beq.n	80030a0 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ff8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002ffa:	f041 0104 	orr.w	r1, r1, #4
 8002ffe:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003000:	2100      	movs	r1, #0
 8003002:	9100      	str	r1, [sp, #0]
 8003004:	68d1      	ldr	r1, [r2, #12]
 8003006:	9100      	str	r1, [sp, #0]
 8003008:	6891      	ldr	r1, [r2, #8]
 800300a:	9100      	str	r1, [sp, #0]
 800300c:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800300e:	b165      	cbz	r5, 800302a <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003010:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003012:	f041 0101 	orr.w	r1, r1, #1
 8003016:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003018:	2100      	movs	r1, #0
 800301a:	9102      	str	r1, [sp, #8]
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	9102      	str	r1, [sp, #8]
 8003020:	6811      	ldr	r1, [r2, #0]
 8003022:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003026:	6011      	str	r1, [r2, #0]
 8003028:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800302a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800302e:	d009      	beq.n	8003044 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003030:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003038:	2300      	movs	r3, #0
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	9303      	str	r3, [sp, #12]
 8003042:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003044:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c4      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	6853      	ldr	r3, [r2, #4]
 800304e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003052:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003054:	2301      	movs	r3, #1
 8003056:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800305a:	f010 0f03 	tst.w	r0, #3
 800305e:	d027      	beq.n	80030b0 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	6853      	ldr	r3, [r2, #4]
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800306a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800306c:	b14b      	cbz	r3, 8003082 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_SPI_IRQHandler+0x11c>)
 8003070:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003072:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003074:	f7fe ff2b 	bl	8001ece <HAL_DMA_Abort_IT>
 8003078:	b118      	cbz	r0, 8003082 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800307a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800307c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003080:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003082:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0a5      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003088:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <HAL_SPI_IRQHandler+0x11c>)
 800308a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800308c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800308e:	f7fe ff1e 	bl	8001ece <HAL_DMA_Abort_IT>
 8003092:	2800      	cmp	r0, #0
 8003094:	d09e      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003096:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309c:	6563      	str	r3, [r4, #84]	; 0x54
 800309e:	e799      	b.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a0:	2300      	movs	r3, #0
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	68d3      	ldr	r3, [r2, #12]
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	6893      	ldr	r3, [r2, #8]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	9b01      	ldr	r3, [sp, #4]
        return;
 80030ae:	e791      	b.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff fefc 	bl	8002eae <HAL_SPI_ErrorCallback>
 80030b6:	e78d      	b.n	8002fd4 <HAL_SPI_IRQHandler+0x38>
 80030b8:	080030bd 	.word	0x080030bd

080030bc <SPI_DMAAbortOnError>:
{
 80030bc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80030c4:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80030c6:	f7ff fef2 	bl	8002eae <HAL_SPI_ErrorCallback>
}
 80030ca:	bd08      	pop	{r3, pc}

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80030d0:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d2:	6802      	ldr	r2, [r0, #0]
 80030d4:	6913      	ldr	r3, [r2, #16]
 80030d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030da:	68c1      	ldr	r1, [r0, #12]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e0:	6883      	ldr	r3, [r0, #8]
 80030e2:	6902      	ldr	r2, [r0, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	6942      	ldr	r2, [r0, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	69c2      	ldr	r2, [r0, #28]
 80030ec:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80030ee:	6801      	ldr	r1, [r0, #0]
 80030f0:	68cb      	ldr	r3, [r1, #12]
 80030f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030f6:	f023 030c 	bic.w	r3, r3, #12
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	6953      	ldr	r3, [r2, #20]
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	6981      	ldr	r1, [r0, #24]
 8003108:	430b      	orrs	r3, r1
 800310a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310c:	69c3      	ldr	r3, [r0, #28]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d03b      	beq.n	800318c <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003114:	6803      	ldr	r3, [r0, #0]
 8003116:	4a71      	ldr	r2, [pc, #452]	; (80032dc <UART_SetConfig+0x210>)
 8003118:	4293      	cmp	r3, r2
 800311a:	f000 80ab 	beq.w	8003274 <UART_SetConfig+0x1a8>
 800311e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003122:	4293      	cmp	r3, r2
 8003124:	f000 80a6 	beq.w	8003274 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003128:	f7ff fbcc 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800312c:	f04f 0900 	mov.w	r9, #0
 8003130:	1806      	adds	r6, r0, r0
 8003132:	eb49 0709 	adc.w	r7, r9, r9
 8003136:	eb16 0b00 	adds.w	fp, r6, r0
 800313a:	eb47 0c09 	adc.w	ip, r7, r9
 800313e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8003142:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003146:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800314a:	4693      	mov	fp, r2
 800314c:	469c      	mov	ip, r3
 800314e:	6863      	ldr	r3, [r4, #4]
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	0f9b      	lsrs	r3, r3, #30
 8003154:	eb10 000b 	adds.w	r0, r0, fp
 8003158:	eb49 010c 	adc.w	r1, r9, ip
 800315c:	f7fd fd7c 	bl	8000c58 <__aeabi_uldivmod>
 8003160:	4d5f      	ldr	r5, [pc, #380]	; (80032e0 <UART_SetConfig+0x214>)
 8003162:	fba5 3200 	umull	r3, r2, r5, r0
 8003166:	0951      	lsrs	r1, r2, #5
 8003168:	2264      	movs	r2, #100	; 0x64
 800316a:	fb02 0211 	mls	r2, r2, r1, r0
 800316e:	0113      	lsls	r3, r2, #4
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	fba5 2303 	umull	r2, r3, r5, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800317c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	6821      	ldr	r1, [r4, #0]
 8003186:	4413      	add	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
    }
  }
}
 800318a:	e0a4      	b.n	80032d6 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	6803      	ldr	r3, [r0, #0]
 800318e:	4a53      	ldr	r2, [pc, #332]	; (80032dc <UART_SetConfig+0x210>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d039      	beq.n	8003208 <UART_SetConfig+0x13c>
 8003194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003198:	4293      	cmp	r3, r2
 800319a:	d035      	beq.n	8003208 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800319c:	f7ff fb92 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031a0:	4683      	mov	fp, r0
 80031a2:	f04f 0c00 	mov.w	ip, #0
 80031a6:	1806      	adds	r6, r0, r0
 80031a8:	eb4c 070c 	adc.w	r7, ip, ip
 80031ac:	eb16 0800 	adds.w	r8, r6, r0
 80031b0:	eb47 090c 	adc.w	r9, r7, ip
 80031b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c0:	4690      	mov	r8, r2
 80031c2:	4699      	mov	r9, r3
 80031c4:	6862      	ldr	r2, [r4, #4]
 80031c6:	2100      	movs	r1, #0
 80031c8:	1892      	adds	r2, r2, r2
 80031ca:	eb41 0301 	adc.w	r3, r1, r1
 80031ce:	eb1b 0008 	adds.w	r0, fp, r8
 80031d2:	eb4c 0109 	adc.w	r1, ip, r9
 80031d6:	f7fd fd3f 	bl	8000c58 <__aeabi_uldivmod>
 80031da:	4d41      	ldr	r5, [pc, #260]	; (80032e0 <UART_SetConfig+0x214>)
 80031dc:	fba5 3200 	umull	r3, r2, r5, r0
 80031e0:	0951      	lsrs	r1, r2, #5
 80031e2:	2264      	movs	r2, #100	; 0x64
 80031e4:	fb02 0211 	mls	r2, r2, r1, r0
 80031e8:	00d3      	lsls	r3, r2, #3
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	fba5 2303 	umull	r2, r3, r5, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	005a      	lsls	r2, r3, #1
 80031f4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80031f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	6821      	ldr	r1, [r4, #0]
 8003202:	4413      	add	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
 8003206:	e066      	b.n	80032d6 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff fb6c 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800320c:	4680      	mov	r8, r0
 800320e:	f04f 0900 	mov.w	r9, #0
 8003212:	1806      	adds	r6, r0, r0
 8003214:	eb49 0709 	adc.w	r7, r9, r9
 8003218:	eb16 0b00 	adds.w	fp, r6, r0
 800321c:	eb47 0c09 	adc.w	ip, r7, r9
 8003220:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8003224:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003228:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800322c:	4693      	mov	fp, r2
 800322e:	469c      	mov	ip, r3
 8003230:	6862      	ldr	r2, [r4, #4]
 8003232:	2100      	movs	r1, #0
 8003234:	1892      	adds	r2, r2, r2
 8003236:	eb41 0301 	adc.w	r3, r1, r1
 800323a:	eb18 000b 	adds.w	r0, r8, fp
 800323e:	eb49 010c 	adc.w	r1, r9, ip
 8003242:	f7fd fd09 	bl	8000c58 <__aeabi_uldivmod>
 8003246:	4d26      	ldr	r5, [pc, #152]	; (80032e0 <UART_SetConfig+0x214>)
 8003248:	fba5 3200 	umull	r3, r2, r5, r0
 800324c:	0951      	lsrs	r1, r2, #5
 800324e:	2264      	movs	r2, #100	; 0x64
 8003250:	fb02 0211 	mls	r2, r2, r1, r0
 8003254:	00d3      	lsls	r3, r2, #3
 8003256:	3332      	adds	r3, #50	; 0x32
 8003258:	fba5 2303 	umull	r2, r3, r5, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	005a      	lsls	r2, r3, #1
 8003260:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003264:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	6821      	ldr	r1, [r4, #0]
 800326e:	4413      	add	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e030      	b.n	80032d6 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7ff fb36 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003278:	f04f 0900 	mov.w	r9, #0
 800327c:	1806      	adds	r6, r0, r0
 800327e:	eb49 0709 	adc.w	r7, r9, r9
 8003282:	eb16 0b00 	adds.w	fp, r6, r0
 8003286:	eb47 0c09 	adc.w	ip, r7, r9
 800328a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800328e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003292:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8003296:	4693      	mov	fp, r2
 8003298:	469c      	mov	ip, r3
 800329a:	6863      	ldr	r3, [r4, #4]
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	0f9b      	lsrs	r3, r3, #30
 80032a0:	eb10 000b 	adds.w	r0, r0, fp
 80032a4:	eb49 010c 	adc.w	r1, r9, ip
 80032a8:	f7fd fcd6 	bl	8000c58 <__aeabi_uldivmod>
 80032ac:	4d0c      	ldr	r5, [pc, #48]	; (80032e0 <UART_SetConfig+0x214>)
 80032ae:	fba5 3200 	umull	r3, r2, r5, r0
 80032b2:	0951      	lsrs	r1, r2, #5
 80032b4:	2264      	movs	r2, #100	; 0x64
 80032b6:	fb02 0211 	mls	r2, r2, r1, r0
 80032ba:	0113      	lsls	r3, r2, #4
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	fba5 2303 	umull	r2, r3, r5, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	6821      	ldr	r1, [r4, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
}
 80032d6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80032da:	bf00      	nop
 80032dc:	40011000 	.word	0x40011000
 80032e0:	51eb851f 	.word	0x51eb851f

080032e4 <UART_WaitOnFlagUntilTimeout>:
{
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	4605      	mov	r5, r0
 80032ea:	460f      	mov	r7, r1
 80032ec:	4616      	mov	r6, r2
 80032ee:	4698      	mov	r8, r3
 80032f0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	ea37 0303 	bics.w	r3, r7, r3
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	42b3      	cmp	r3, r6
 8003302:	d11d      	bne.n	8003340 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003304:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003308:	d0f3      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800330a:	b12c      	cbz	r4, 8003318 <UART_WaitOnFlagUntilTimeout+0x34>
 800330c:	f7fe fc44 	bl	8001b98 <HAL_GetTick>
 8003310:	eba0 0008 	sub.w	r0, r0, r8
 8003314:	42a0      	cmp	r0, r4
 8003316:	d9ec      	bls.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003318:	682a      	ldr	r2, [r5, #0]
 800331a:	68d3      	ldr	r3, [r2, #12]
 800331c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003320:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	682a      	ldr	r2, [r5, #0]
 8003324:	6953      	ldr	r3, [r2, #20]
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800332c:	2320      	movs	r3, #32
 800332e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003332:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	e000      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8003340:	2000      	movs	r0, #0
}
 8003342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003346 <HAL_UART_Init>:
  if (huart == NULL)
 8003346:	b358      	cbz	r0, 80033a0 <HAL_UART_Init+0x5a>
{
 8003348:	b510      	push	{r4, lr}
 800334a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800334c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003350:	b30b      	cbz	r3, 8003396 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003352:	2324      	movs	r3, #36	; 0x24
 8003354:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	68d3      	ldr	r3, [r2, #12]
 800335c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003360:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff feb2 	bl	80030cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	6913      	ldr	r3, [r2, #16]
 800336c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003370:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	6953      	ldr	r3, [r2, #20]
 8003376:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800337a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	68d3      	ldr	r3, [r2, #12]
 8003380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003384:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	2000      	movs	r0, #0
 8003388:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800338a:	2320      	movs	r3, #32
 800338c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003394:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003396:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800339a:	f7fe faa7 	bl	80018ec <HAL_UART_MspInit>
 800339e:	e7d8      	b.n	8003352 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
}
 80033a2:	4770      	bx	lr

080033a4 <HAL_UART_Transmit>:
{
 80033a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033a8:	b083      	sub	sp, #12
 80033aa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80033ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d156      	bne.n	8003464 <HAL_UART_Transmit+0xc0>
 80033b6:	4604      	mov	r4, r0
 80033b8:	460d      	mov	r5, r1
 80033ba:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80033bc:	2900      	cmp	r1, #0
 80033be:	d056      	beq.n	800346e <HAL_UART_Transmit+0xca>
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d056      	beq.n	8003472 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80033c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d054      	beq.n	8003476 <HAL_UART_Transmit+0xd2>
 80033cc:	2301      	movs	r3, #1
 80033ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	f04f 0900 	mov.w	r9, #0
 80033d6:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033da:	2321      	movs	r3, #33	; 0x21
 80033dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80033e0:	f7fe fbda 	bl	8001b98 <HAL_GetTick>
 80033e4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80033e6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80033ee:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80033f2:	e010      	b.n	8003416 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f4:	9600      	str	r6, [sp, #0]
 80033f6:	463b      	mov	r3, r7
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff ff71 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 8003402:	2800      	cmp	r0, #0
 8003404:	d139      	bne.n	800347a <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003406:	882b      	ldrh	r3, [r5, #0]
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003410:	6923      	ldr	r3, [r4, #16]
 8003412:	b9c3      	cbnz	r3, 8003446 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8003414:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8003416:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003418:	b29b      	uxth	r3, r3
 800341a:	b1b3      	cbz	r3, 800344a <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 800341c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800341e:	3b01      	subs	r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003424:	68a3      	ldr	r3, [r4, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d0e3      	beq.n	80033f4 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342c:	9600      	str	r6, [sp, #0]
 800342e:	463b      	mov	r3, r7
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff ff55 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 800343a:	bb00      	cbnz	r0, 800347e <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800343c:	782a      	ldrb	r2, [r5, #0]
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	3501      	adds	r5, #1
 8003444:	e7e7      	b.n	8003416 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8003446:	3501      	adds	r5, #1
 8003448:	e7e5      	b.n	8003416 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	9600      	str	r6, [sp, #0]
 800344c:	463b      	mov	r3, r7
 800344e:	2200      	movs	r2, #0
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ff46 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	b990      	cbnz	r0, 8003482 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 800345c:	2220      	movs	r2, #32
 800345e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 8003462:	e000      	b.n	8003466 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
}
 8003466:	4618      	mov	r0, r3
 8003468:	b003      	add	sp, #12
 800346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e7f9      	b.n	8003466 <HAL_UART_Transmit+0xc2>
 8003472:	2301      	movs	r3, #1
 8003474:	e7f7      	b.n	8003466 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8003476:	2302      	movs	r3, #2
 8003478:	e7f5      	b.n	8003466 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e7f3      	b.n	8003466 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e7f1      	b.n	8003466 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e7ef      	b.n	8003466 <HAL_UART_Transmit+0xc2>
	...

08003488 <__errno>:
 8003488:	4b01      	ldr	r3, [pc, #4]	; (8003490 <__errno+0x8>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000010 	.word	0x20000010

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4e0d      	ldr	r6, [pc, #52]	; (80034cc <__libc_init_array+0x38>)
 8003498:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <__libc_init_array+0x3c>)
 800349a:	1ba4      	subs	r4, r4, r6
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	2500      	movs	r5, #0
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	4e0b      	ldr	r6, [pc, #44]	; (80034d4 <__libc_init_array+0x40>)
 80034a6:	4c0c      	ldr	r4, [pc, #48]	; (80034d8 <__libc_init_array+0x44>)
 80034a8:	f002 fbf8 	bl	8005c9c <_init>
 80034ac:	1ba4      	subs	r4, r4, r6
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	2500      	movs	r5, #0
 80034b2:	42a5      	cmp	r5, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034bc:	4798      	blx	r3
 80034be:	3501      	adds	r5, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034c6:	4798      	blx	r3
 80034c8:	3501      	adds	r5, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	080060c8 	.word	0x080060c8
 80034d0:	080060c8 	.word	0x080060c8
 80034d4:	080060c8 	.word	0x080060c8
 80034d8:	080060d0 	.word	0x080060d0

080034dc <memcpy>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	1e43      	subs	r3, r0, #1
 80034e0:	440a      	add	r2, r1
 80034e2:	4291      	cmp	r1, r2
 80034e4:	d100      	bne.n	80034e8 <memcpy+0xc>
 80034e6:	bd10      	pop	{r4, pc}
 80034e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034f0:	e7f7      	b.n	80034e2 <memcpy+0x6>

080034f2 <memset>:
 80034f2:	4402      	add	r2, r0
 80034f4:	4603      	mov	r3, r0
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d100      	bne.n	80034fc <memset+0xa>
 80034fa:	4770      	bx	lr
 80034fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003500:	e7f9      	b.n	80034f6 <memset+0x4>

08003502 <__cvt>:
 8003502:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003506:	ec55 4b10 	vmov	r4, r5, d0
 800350a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800350c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003510:	2d00      	cmp	r5, #0
 8003512:	460e      	mov	r6, r1
 8003514:	4691      	mov	r9, r2
 8003516:	4619      	mov	r1, r3
 8003518:	bfb8      	it	lt
 800351a:	4622      	movlt	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f027 0720 	bic.w	r7, r7, #32
 8003522:	bfbb      	ittet	lt
 8003524:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003528:	461d      	movlt	r5, r3
 800352a:	2300      	movge	r3, #0
 800352c:	232d      	movlt	r3, #45	; 0x2d
 800352e:	bfb8      	it	lt
 8003530:	4614      	movlt	r4, r2
 8003532:	2f46      	cmp	r7, #70	; 0x46
 8003534:	700b      	strb	r3, [r1, #0]
 8003536:	d004      	beq.n	8003542 <__cvt+0x40>
 8003538:	2f45      	cmp	r7, #69	; 0x45
 800353a:	d100      	bne.n	800353e <__cvt+0x3c>
 800353c:	3601      	adds	r6, #1
 800353e:	2102      	movs	r1, #2
 8003540:	e000      	b.n	8003544 <__cvt+0x42>
 8003542:	2103      	movs	r1, #3
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	ab02      	add	r3, sp, #8
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4632      	mov	r2, r6
 800354e:	4653      	mov	r3, sl
 8003550:	ec45 4b10 	vmov	d0, r4, r5
 8003554:	f000 fe10 	bl	8004178 <_dtoa_r>
 8003558:	2f47      	cmp	r7, #71	; 0x47
 800355a:	4680      	mov	r8, r0
 800355c:	d102      	bne.n	8003564 <__cvt+0x62>
 800355e:	f019 0f01 	tst.w	r9, #1
 8003562:	d026      	beq.n	80035b2 <__cvt+0xb0>
 8003564:	2f46      	cmp	r7, #70	; 0x46
 8003566:	eb08 0906 	add.w	r9, r8, r6
 800356a:	d111      	bne.n	8003590 <__cvt+0x8e>
 800356c:	f898 3000 	ldrb.w	r3, [r8]
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d10a      	bne.n	800358a <__cvt+0x88>
 8003574:	2200      	movs	r2, #0
 8003576:	2300      	movs	r3, #0
 8003578:	4620      	mov	r0, r4
 800357a:	4629      	mov	r1, r5
 800357c:	f7fd faac 	bl	8000ad8 <__aeabi_dcmpeq>
 8003580:	b918      	cbnz	r0, 800358a <__cvt+0x88>
 8003582:	f1c6 0601 	rsb	r6, r6, #1
 8003586:	f8ca 6000 	str.w	r6, [sl]
 800358a:	f8da 3000 	ldr.w	r3, [sl]
 800358e:	4499      	add	r9, r3
 8003590:	2200      	movs	r2, #0
 8003592:	2300      	movs	r3, #0
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	f7fd fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800359c:	b938      	cbnz	r0, 80035ae <__cvt+0xac>
 800359e:	2230      	movs	r2, #48	; 0x30
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	454b      	cmp	r3, r9
 80035a4:	d205      	bcs.n	80035b2 <__cvt+0xb0>
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	9103      	str	r1, [sp, #12]
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e7f8      	b.n	80035a0 <__cvt+0x9e>
 80035ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035b6:	eba3 0308 	sub.w	r3, r3, r8
 80035ba:	4640      	mov	r0, r8
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	b004      	add	sp, #16
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035c4 <__exponent>:
 80035c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c6:	2900      	cmp	r1, #0
 80035c8:	4604      	mov	r4, r0
 80035ca:	bfba      	itte	lt
 80035cc:	4249      	neglt	r1, r1
 80035ce:	232d      	movlt	r3, #45	; 0x2d
 80035d0:	232b      	movge	r3, #43	; 0x2b
 80035d2:	2909      	cmp	r1, #9
 80035d4:	f804 2b02 	strb.w	r2, [r4], #2
 80035d8:	7043      	strb	r3, [r0, #1]
 80035da:	dd20      	ble.n	800361e <__exponent+0x5a>
 80035dc:	f10d 0307 	add.w	r3, sp, #7
 80035e0:	461f      	mov	r7, r3
 80035e2:	260a      	movs	r6, #10
 80035e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80035e8:	fb06 1115 	mls	r1, r6, r5, r1
 80035ec:	3130      	adds	r1, #48	; 0x30
 80035ee:	2d09      	cmp	r5, #9
 80035f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035f4:	f103 32ff 	add.w	r2, r3, #4294967295
 80035f8:	4629      	mov	r1, r5
 80035fa:	dc09      	bgt.n	8003610 <__exponent+0x4c>
 80035fc:	3130      	adds	r1, #48	; 0x30
 80035fe:	3b02      	subs	r3, #2
 8003600:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003604:	42bb      	cmp	r3, r7
 8003606:	4622      	mov	r2, r4
 8003608:	d304      	bcc.n	8003614 <__exponent+0x50>
 800360a:	1a10      	subs	r0, r2, r0
 800360c:	b003      	add	sp, #12
 800360e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003610:	4613      	mov	r3, r2
 8003612:	e7e7      	b.n	80035e4 <__exponent+0x20>
 8003614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003618:	f804 2b01 	strb.w	r2, [r4], #1
 800361c:	e7f2      	b.n	8003604 <__exponent+0x40>
 800361e:	2330      	movs	r3, #48	; 0x30
 8003620:	4419      	add	r1, r3
 8003622:	7083      	strb	r3, [r0, #2]
 8003624:	1d02      	adds	r2, r0, #4
 8003626:	70c1      	strb	r1, [r0, #3]
 8003628:	e7ef      	b.n	800360a <__exponent+0x46>
	...

0800362c <_printf_float>:
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003630:	b08d      	sub	sp, #52	; 0x34
 8003632:	460c      	mov	r4, r1
 8003634:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003638:	4616      	mov	r6, r2
 800363a:	461f      	mov	r7, r3
 800363c:	4605      	mov	r5, r0
 800363e:	f001 fccd 	bl	8004fdc <_localeconv_r>
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc fdca 	bl	80001e0 <strlen>
 800364c:	2300      	movs	r3, #0
 800364e:	930a      	str	r3, [sp, #40]	; 0x28
 8003650:	f8d8 3000 	ldr.w	r3, [r8]
 8003654:	9005      	str	r0, [sp, #20]
 8003656:	3307      	adds	r3, #7
 8003658:	f023 0307 	bic.w	r3, r3, #7
 800365c:	f103 0208 	add.w	r2, r3, #8
 8003660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003664:	f8d4 b000 	ldr.w	fp, [r4]
 8003668:	f8c8 2000 	str.w	r2, [r8]
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003674:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003678:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800367c:	9307      	str	r3, [sp, #28]
 800367e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	4ba7      	ldr	r3, [pc, #668]	; (8003924 <_printf_float+0x2f8>)
 8003688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800368c:	f7fd fa56 	bl	8000b3c <__aeabi_dcmpun>
 8003690:	bb70      	cbnz	r0, 80036f0 <_printf_float+0xc4>
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	4ba3      	ldr	r3, [pc, #652]	; (8003924 <_printf_float+0x2f8>)
 8003698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800369c:	f7fd fa30 	bl	8000b00 <__aeabi_dcmple>
 80036a0:	bb30      	cbnz	r0, 80036f0 <_printf_float+0xc4>
 80036a2:	2200      	movs	r2, #0
 80036a4:	2300      	movs	r3, #0
 80036a6:	4640      	mov	r0, r8
 80036a8:	4649      	mov	r1, r9
 80036aa:	f7fd fa1f 	bl	8000aec <__aeabi_dcmplt>
 80036ae:	b110      	cbz	r0, 80036b6 <_printf_float+0x8a>
 80036b0:	232d      	movs	r3, #45	; 0x2d
 80036b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036b6:	4a9c      	ldr	r2, [pc, #624]	; (8003928 <_printf_float+0x2fc>)
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <_printf_float+0x300>)
 80036ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80036be:	bf8c      	ite	hi
 80036c0:	4690      	movhi	r8, r2
 80036c2:	4698      	movls	r8, r3
 80036c4:	2303      	movs	r3, #3
 80036c6:	f02b 0204 	bic.w	r2, fp, #4
 80036ca:	6123      	str	r3, [r4, #16]
 80036cc:	6022      	str	r2, [r4, #0]
 80036ce:	f04f 0900 	mov.w	r9, #0
 80036d2:	9700      	str	r7, [sp, #0]
 80036d4:	4633      	mov	r3, r6
 80036d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80036d8:	4621      	mov	r1, r4
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 f9e6 	bl	8003aac <_printf_common>
 80036e0:	3001      	adds	r0, #1
 80036e2:	f040 808d 	bne.w	8003800 <_printf_float+0x1d4>
 80036e6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ea:	b00d      	add	sp, #52	; 0x34
 80036ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	4640      	mov	r0, r8
 80036f6:	4649      	mov	r1, r9
 80036f8:	f7fd fa20 	bl	8000b3c <__aeabi_dcmpun>
 80036fc:	b110      	cbz	r0, 8003704 <_printf_float+0xd8>
 80036fe:	4a8c      	ldr	r2, [pc, #560]	; (8003930 <_printf_float+0x304>)
 8003700:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <_printf_float+0x308>)
 8003702:	e7da      	b.n	80036ba <_printf_float+0x8e>
 8003704:	6861      	ldr	r1, [r4, #4]
 8003706:	1c4b      	adds	r3, r1, #1
 8003708:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800370c:	a80a      	add	r0, sp, #40	; 0x28
 800370e:	d13e      	bne.n	800378e <_printf_float+0x162>
 8003710:	2306      	movs	r3, #6
 8003712:	6063      	str	r3, [r4, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800371a:	ab09      	add	r3, sp, #36	; 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	ec49 8b10 	vmov	d0, r8, r9
 8003722:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003726:	6022      	str	r2, [r4, #0]
 8003728:	f8cd a004 	str.w	sl, [sp, #4]
 800372c:	6861      	ldr	r1, [r4, #4]
 800372e:	4628      	mov	r0, r5
 8003730:	f7ff fee7 	bl	8003502 <__cvt>
 8003734:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003738:	2b47      	cmp	r3, #71	; 0x47
 800373a:	4680      	mov	r8, r0
 800373c:	d109      	bne.n	8003752 <_printf_float+0x126>
 800373e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003740:	1cd8      	adds	r0, r3, #3
 8003742:	db02      	blt.n	800374a <_printf_float+0x11e>
 8003744:	6862      	ldr	r2, [r4, #4]
 8003746:	4293      	cmp	r3, r2
 8003748:	dd47      	ble.n	80037da <_printf_float+0x1ae>
 800374a:	f1aa 0a02 	sub.w	sl, sl, #2
 800374e:	fa5f fa8a 	uxtb.w	sl, sl
 8003752:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003758:	d824      	bhi.n	80037a4 <_printf_float+0x178>
 800375a:	3901      	subs	r1, #1
 800375c:	4652      	mov	r2, sl
 800375e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003762:	9109      	str	r1, [sp, #36]	; 0x24
 8003764:	f7ff ff2e 	bl	80035c4 <__exponent>
 8003768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800376a:	1813      	adds	r3, r2, r0
 800376c:	2a01      	cmp	r2, #1
 800376e:	4681      	mov	r9, r0
 8003770:	6123      	str	r3, [r4, #16]
 8003772:	dc02      	bgt.n	800377a <_printf_float+0x14e>
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	07d1      	lsls	r1, r2, #31
 8003778:	d501      	bpl.n	800377e <_printf_float+0x152>
 800377a:	3301      	adds	r3, #1
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0a5      	beq.n	80036d2 <_printf_float+0xa6>
 8003786:	232d      	movs	r3, #45	; 0x2d
 8003788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800378c:	e7a1      	b.n	80036d2 <_printf_float+0xa6>
 800378e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003792:	f000 8177 	beq.w	8003a84 <_printf_float+0x458>
 8003796:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800379a:	d1bb      	bne.n	8003714 <_printf_float+0xe8>
 800379c:	2900      	cmp	r1, #0
 800379e:	d1b9      	bne.n	8003714 <_printf_float+0xe8>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e7b6      	b.n	8003712 <_printf_float+0xe6>
 80037a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80037a8:	d119      	bne.n	80037de <_printf_float+0x1b2>
 80037aa:	2900      	cmp	r1, #0
 80037ac:	6863      	ldr	r3, [r4, #4]
 80037ae:	dd0c      	ble.n	80037ca <_printf_float+0x19e>
 80037b0:	6121      	str	r1, [r4, #16]
 80037b2:	b913      	cbnz	r3, 80037ba <_printf_float+0x18e>
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	07d2      	lsls	r2, r2, #31
 80037b8:	d502      	bpl.n	80037c0 <_printf_float+0x194>
 80037ba:	3301      	adds	r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80037c4:	f04f 0900 	mov.w	r9, #0
 80037c8:	e7d9      	b.n	800377e <_printf_float+0x152>
 80037ca:	b913      	cbnz	r3, 80037d2 <_printf_float+0x1a6>
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	07d0      	lsls	r0, r2, #31
 80037d0:	d501      	bpl.n	80037d6 <_printf_float+0x1aa>
 80037d2:	3302      	adds	r3, #2
 80037d4:	e7f3      	b.n	80037be <_printf_float+0x192>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e7f1      	b.n	80037be <_printf_float+0x192>
 80037da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80037de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80037e2:	4293      	cmp	r3, r2
 80037e4:	db05      	blt.n	80037f2 <_printf_float+0x1c6>
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	6123      	str	r3, [r4, #16]
 80037ea:	07d1      	lsls	r1, r2, #31
 80037ec:	d5e8      	bpl.n	80037c0 <_printf_float+0x194>
 80037ee:	3301      	adds	r3, #1
 80037f0:	e7e5      	b.n	80037be <_printf_float+0x192>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bfd4      	ite	le
 80037f6:	f1c3 0302 	rsble	r3, r3, #2
 80037fa:	2301      	movgt	r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	e7de      	b.n	80037be <_printf_float+0x192>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	055a      	lsls	r2, r3, #21
 8003804:	d407      	bmi.n	8003816 <_printf_float+0x1ea>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	4642      	mov	r2, r8
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	d12b      	bne.n	800386c <_printf_float+0x240>
 8003814:	e767      	b.n	80036e6 <_printf_float+0xba>
 8003816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800381a:	f240 80dc 	bls.w	80039d6 <_printf_float+0x3aa>
 800381e:	2200      	movs	r2, #0
 8003820:	2300      	movs	r3, #0
 8003822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003826:	f7fd f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800382a:	2800      	cmp	r0, #0
 800382c:	d033      	beq.n	8003896 <_printf_float+0x26a>
 800382e:	2301      	movs	r3, #1
 8003830:	4a41      	ldr	r2, [pc, #260]	; (8003938 <_printf_float+0x30c>)
 8003832:	4631      	mov	r1, r6
 8003834:	4628      	mov	r0, r5
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f af54 	beq.w	80036e6 <_printf_float+0xba>
 800383e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003842:	429a      	cmp	r2, r3
 8003844:	db02      	blt.n	800384c <_printf_float+0x220>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	07d8      	lsls	r0, r3, #31
 800384a:	d50f      	bpl.n	800386c <_printf_float+0x240>
 800384c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003850:	4631      	mov	r1, r6
 8003852:	4628      	mov	r0, r5
 8003854:	47b8      	blx	r7
 8003856:	3001      	adds	r0, #1
 8003858:	f43f af45 	beq.w	80036e6 <_printf_float+0xba>
 800385c:	f04f 0800 	mov.w	r8, #0
 8003860:	f104 091a 	add.w	r9, r4, #26
 8003864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	4543      	cmp	r3, r8
 800386a:	dc09      	bgt.n	8003880 <_printf_float+0x254>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	079b      	lsls	r3, r3, #30
 8003870:	f100 8103 	bmi.w	8003a7a <_printf_float+0x44e>
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003878:	4298      	cmp	r0, r3
 800387a:	bfb8      	it	lt
 800387c:	4618      	movlt	r0, r3
 800387e:	e734      	b.n	80036ea <_printf_float+0xbe>
 8003880:	2301      	movs	r3, #1
 8003882:	464a      	mov	r2, r9
 8003884:	4631      	mov	r1, r6
 8003886:	4628      	mov	r0, r5
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	f43f af2b 	beq.w	80036e6 <_printf_float+0xba>
 8003890:	f108 0801 	add.w	r8, r8, #1
 8003894:	e7e6      	b.n	8003864 <_printf_float+0x238>
 8003896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	dc2b      	bgt.n	80038f4 <_printf_float+0x2c8>
 800389c:	2301      	movs	r3, #1
 800389e:	4a26      	ldr	r2, [pc, #152]	; (8003938 <_printf_float+0x30c>)
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f af1d 	beq.w	80036e6 <_printf_float+0xba>
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	b923      	cbnz	r3, 80038ba <_printf_float+0x28e>
 80038b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038b2:	b913      	cbnz	r3, 80038ba <_printf_float+0x28e>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	d5d8      	bpl.n	800386c <_printf_float+0x240>
 80038ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b8      	blx	r7
 80038c4:	3001      	adds	r0, #1
 80038c6:	f43f af0e 	beq.w	80036e6 <_printf_float+0xba>
 80038ca:	f04f 0900 	mov.w	r9, #0
 80038ce:	f104 0a1a 	add.w	sl, r4, #26
 80038d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d4:	425b      	negs	r3, r3
 80038d6:	454b      	cmp	r3, r9
 80038d8:	dc01      	bgt.n	80038de <_printf_float+0x2b2>
 80038da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038dc:	e794      	b.n	8003808 <_printf_float+0x1dc>
 80038de:	2301      	movs	r3, #1
 80038e0:	4652      	mov	r2, sl
 80038e2:	4631      	mov	r1, r6
 80038e4:	4628      	mov	r0, r5
 80038e6:	47b8      	blx	r7
 80038e8:	3001      	adds	r0, #1
 80038ea:	f43f aefc 	beq.w	80036e6 <_printf_float+0xba>
 80038ee:	f109 0901 	add.w	r9, r9, #1
 80038f2:	e7ee      	b.n	80038d2 <_printf_float+0x2a6>
 80038f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bfa8      	it	ge
 80038fc:	461a      	movge	r2, r3
 80038fe:	2a00      	cmp	r2, #0
 8003900:	4691      	mov	r9, r2
 8003902:	dd07      	ble.n	8003914 <_printf_float+0x2e8>
 8003904:	4613      	mov	r3, r2
 8003906:	4631      	mov	r1, r6
 8003908:	4642      	mov	r2, r8
 800390a:	4628      	mov	r0, r5
 800390c:	47b8      	blx	r7
 800390e:	3001      	adds	r0, #1
 8003910:	f43f aee9 	beq.w	80036e6 <_printf_float+0xba>
 8003914:	f104 031a 	add.w	r3, r4, #26
 8003918:	f04f 0b00 	mov.w	fp, #0
 800391c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003920:	9306      	str	r3, [sp, #24]
 8003922:	e015      	b.n	8003950 <_printf_float+0x324>
 8003924:	7fefffff 	.word	0x7fefffff
 8003928:	08005e08 	.word	0x08005e08
 800392c:	08005e04 	.word	0x08005e04
 8003930:	08005e10 	.word	0x08005e10
 8003934:	08005e0c 	.word	0x08005e0c
 8003938:	08005e14 	.word	0x08005e14
 800393c:	2301      	movs	r3, #1
 800393e:	9a06      	ldr	r2, [sp, #24]
 8003940:	4631      	mov	r1, r6
 8003942:	4628      	mov	r0, r5
 8003944:	47b8      	blx	r7
 8003946:	3001      	adds	r0, #1
 8003948:	f43f aecd 	beq.w	80036e6 <_printf_float+0xba>
 800394c:	f10b 0b01 	add.w	fp, fp, #1
 8003950:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003954:	ebaa 0309 	sub.w	r3, sl, r9
 8003958:	455b      	cmp	r3, fp
 800395a:	dcef      	bgt.n	800393c <_printf_float+0x310>
 800395c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003960:	429a      	cmp	r2, r3
 8003962:	44d0      	add	r8, sl
 8003964:	db15      	blt.n	8003992 <_printf_float+0x366>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	07da      	lsls	r2, r3, #31
 800396a:	d412      	bmi.n	8003992 <_printf_float+0x366>
 800396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800396e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003970:	eba3 020a 	sub.w	r2, r3, sl
 8003974:	eba3 0a01 	sub.w	sl, r3, r1
 8003978:	4592      	cmp	sl, r2
 800397a:	bfa8      	it	ge
 800397c:	4692      	movge	sl, r2
 800397e:	f1ba 0f00 	cmp.w	sl, #0
 8003982:	dc0e      	bgt.n	80039a2 <_printf_float+0x376>
 8003984:	f04f 0800 	mov.w	r8, #0
 8003988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800398c:	f104 091a 	add.w	r9, r4, #26
 8003990:	e019      	b.n	80039c6 <_printf_float+0x39a>
 8003992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003996:	4631      	mov	r1, r6
 8003998:	4628      	mov	r0, r5
 800399a:	47b8      	blx	r7
 800399c:	3001      	adds	r0, #1
 800399e:	d1e5      	bne.n	800396c <_printf_float+0x340>
 80039a0:	e6a1      	b.n	80036e6 <_printf_float+0xba>
 80039a2:	4653      	mov	r3, sl
 80039a4:	4642      	mov	r2, r8
 80039a6:	4631      	mov	r1, r6
 80039a8:	4628      	mov	r0, r5
 80039aa:	47b8      	blx	r7
 80039ac:	3001      	adds	r0, #1
 80039ae:	d1e9      	bne.n	8003984 <_printf_float+0x358>
 80039b0:	e699      	b.n	80036e6 <_printf_float+0xba>
 80039b2:	2301      	movs	r3, #1
 80039b4:	464a      	mov	r2, r9
 80039b6:	4631      	mov	r1, r6
 80039b8:	4628      	mov	r0, r5
 80039ba:	47b8      	blx	r7
 80039bc:	3001      	adds	r0, #1
 80039be:	f43f ae92 	beq.w	80036e6 <_printf_float+0xba>
 80039c2:	f108 0801 	add.w	r8, r8, #1
 80039c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	eba3 030a 	sub.w	r3, r3, sl
 80039d0:	4543      	cmp	r3, r8
 80039d2:	dcee      	bgt.n	80039b2 <_printf_float+0x386>
 80039d4:	e74a      	b.n	800386c <_printf_float+0x240>
 80039d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039d8:	2a01      	cmp	r2, #1
 80039da:	dc01      	bgt.n	80039e0 <_printf_float+0x3b4>
 80039dc:	07db      	lsls	r3, r3, #31
 80039de:	d53a      	bpl.n	8003a56 <_printf_float+0x42a>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4642      	mov	r2, r8
 80039e4:	4631      	mov	r1, r6
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b8      	blx	r7
 80039ea:	3001      	adds	r0, #1
 80039ec:	f43f ae7b 	beq.w	80036e6 <_printf_float+0xba>
 80039f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f4:	4631      	mov	r1, r6
 80039f6:	4628      	mov	r0, r5
 80039f8:	47b8      	blx	r7
 80039fa:	3001      	adds	r0, #1
 80039fc:	f108 0801 	add.w	r8, r8, #1
 8003a00:	f43f ae71 	beq.w	80036e6 <_printf_float+0xba>
 8003a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a06:	2200      	movs	r2, #0
 8003a08:	f103 3aff 	add.w	sl, r3, #4294967295
 8003a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a10:	2300      	movs	r3, #0
 8003a12:	f7fd f861 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a16:	b9c8      	cbnz	r0, 8003a4c <_printf_float+0x420>
 8003a18:	4653      	mov	r3, sl
 8003a1a:	4642      	mov	r2, r8
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b8      	blx	r7
 8003a22:	3001      	adds	r0, #1
 8003a24:	d10e      	bne.n	8003a44 <_printf_float+0x418>
 8003a26:	e65e      	b.n	80036e6 <_printf_float+0xba>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	4628      	mov	r0, r5
 8003a30:	47b8      	blx	r7
 8003a32:	3001      	adds	r0, #1
 8003a34:	f43f ae57 	beq.w	80036e6 <_printf_float+0xba>
 8003a38:	f108 0801 	add.w	r8, r8, #1
 8003a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4543      	cmp	r3, r8
 8003a42:	dcf1      	bgt.n	8003a28 <_printf_float+0x3fc>
 8003a44:	464b      	mov	r3, r9
 8003a46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a4a:	e6de      	b.n	800380a <_printf_float+0x1de>
 8003a4c:	f04f 0800 	mov.w	r8, #0
 8003a50:	f104 0a1a 	add.w	sl, r4, #26
 8003a54:	e7f2      	b.n	8003a3c <_printf_float+0x410>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e7df      	b.n	8003a1a <_printf_float+0x3ee>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	464a      	mov	r2, r9
 8003a5e:	4631      	mov	r1, r6
 8003a60:	4628      	mov	r0, r5
 8003a62:	47b8      	blx	r7
 8003a64:	3001      	adds	r0, #1
 8003a66:	f43f ae3e 	beq.w	80036e6 <_printf_float+0xba>
 8003a6a:	f108 0801 	add.w	r8, r8, #1
 8003a6e:	68e3      	ldr	r3, [r4, #12]
 8003a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	4543      	cmp	r3, r8
 8003a76:	dcf0      	bgt.n	8003a5a <_printf_float+0x42e>
 8003a78:	e6fc      	b.n	8003874 <_printf_float+0x248>
 8003a7a:	f04f 0800 	mov.w	r8, #0
 8003a7e:	f104 0919 	add.w	r9, r4, #25
 8003a82:	e7f4      	b.n	8003a6e <_printf_float+0x442>
 8003a84:	2900      	cmp	r1, #0
 8003a86:	f43f ae8b 	beq.w	80037a0 <_printf_float+0x174>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a90:	ab09      	add	r3, sp, #36	; 0x24
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	ec49 8b10 	vmov	d0, r8, r9
 8003a98:	6022      	str	r2, [r4, #0]
 8003a9a:	f8cd a004 	str.w	sl, [sp, #4]
 8003a9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f7ff fd2d 	bl	8003502 <__cvt>
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	e648      	b.n	800373e <_printf_float+0x112>

08003aac <_printf_common>:
 8003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	4691      	mov	r9, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	688a      	ldr	r2, [r1, #8]
 8003ab6:	690b      	ldr	r3, [r1, #16]
 8003ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bfb8      	it	lt
 8003ac0:	4613      	movlt	r3, r2
 8003ac2:	f8c9 3000 	str.w	r3, [r9]
 8003ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aca:	4606      	mov	r6, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	b112      	cbz	r2, 8003ad6 <_printf_common+0x2a>
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f8c9 3000 	str.w	r3, [r9]
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	0699      	lsls	r1, r3, #26
 8003ada:	bf42      	ittt	mi
 8003adc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ae0:	3302      	addmi	r3, #2
 8003ae2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ae6:	6825      	ldr	r5, [r4, #0]
 8003ae8:	f015 0506 	ands.w	r5, r5, #6
 8003aec:	d107      	bne.n	8003afe <_printf_common+0x52>
 8003aee:	f104 0a19 	add.w	sl, r4, #25
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	f8d9 2000 	ldr.w	r2, [r9]
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	42ab      	cmp	r3, r5
 8003afc:	dc28      	bgt.n	8003b50 <_printf_common+0xa4>
 8003afe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	3300      	adds	r3, #0
 8003b06:	bf18      	it	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	0692      	lsls	r2, r2, #26
 8003b0c:	d42d      	bmi.n	8003b6a <_printf_common+0xbe>
 8003b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b12:	4639      	mov	r1, r7
 8003b14:	4630      	mov	r0, r6
 8003b16:	47c0      	blx	r8
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d020      	beq.n	8003b5e <_printf_common+0xb2>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	68e5      	ldr	r5, [r4, #12]
 8003b20:	f8d9 2000 	ldr.w	r2, [r9]
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	bf08      	it	eq
 8003b2c:	1aad      	subeq	r5, r5, r2
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	f04f 0900 	mov.w	r9, #0
 8003b46:	341a      	adds	r4, #26
 8003b48:	454d      	cmp	r5, r9
 8003b4a:	d11a      	bne.n	8003b82 <_printf_common+0xd6>
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e008      	b.n	8003b62 <_printf_common+0xb6>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4652      	mov	r2, sl
 8003b54:	4639      	mov	r1, r7
 8003b56:	4630      	mov	r0, r6
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d103      	bne.n	8003b66 <_printf_common+0xba>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b66:	3501      	adds	r5, #1
 8003b68:	e7c3      	b.n	8003af2 <_printf_common+0x46>
 8003b6a:	18e1      	adds	r1, r4, r3
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	2030      	movs	r0, #48	; 0x30
 8003b70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b74:	4422      	add	r2, r4
 8003b76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7e:	3302      	adds	r3, #2
 8003b80:	e7c5      	b.n	8003b0e <_printf_common+0x62>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4622      	mov	r2, r4
 8003b86:	4639      	mov	r1, r7
 8003b88:	4630      	mov	r0, r6
 8003b8a:	47c0      	blx	r8
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d0e6      	beq.n	8003b5e <_printf_common+0xb2>
 8003b90:	f109 0901 	add.w	r9, r9, #1
 8003b94:	e7d8      	b.n	8003b48 <_printf_common+0x9c>
	...

08003b98 <_printf_i>:
 8003b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	7e09      	ldrb	r1, [r1, #24]
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	296e      	cmp	r1, #110	; 0x6e
 8003ba8:	4617      	mov	r7, r2
 8003baa:	4606      	mov	r6, r0
 8003bac:	4698      	mov	r8, r3
 8003bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bb0:	f000 80b3 	beq.w	8003d1a <_printf_i+0x182>
 8003bb4:	d822      	bhi.n	8003bfc <_printf_i+0x64>
 8003bb6:	2963      	cmp	r1, #99	; 0x63
 8003bb8:	d036      	beq.n	8003c28 <_printf_i+0x90>
 8003bba:	d80a      	bhi.n	8003bd2 <_printf_i+0x3a>
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	f000 80b9 	beq.w	8003d34 <_printf_i+0x19c>
 8003bc2:	2958      	cmp	r1, #88	; 0x58
 8003bc4:	f000 8083 	beq.w	8003cce <_printf_i+0x136>
 8003bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bd0:	e032      	b.n	8003c38 <_printf_i+0xa0>
 8003bd2:	2964      	cmp	r1, #100	; 0x64
 8003bd4:	d001      	beq.n	8003bda <_printf_i+0x42>
 8003bd6:	2969      	cmp	r1, #105	; 0x69
 8003bd8:	d1f6      	bne.n	8003bc8 <_printf_i+0x30>
 8003bda:	6820      	ldr	r0, [r4, #0]
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	0605      	lsls	r5, r0, #24
 8003be0:	f103 0104 	add.w	r1, r3, #4
 8003be4:	d52a      	bpl.n	8003c3c <_printf_i+0xa4>
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da03      	bge.n	8003bf6 <_printf_i+0x5e>
 8003bee:	222d      	movs	r2, #45	; 0x2d
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bf6:	486f      	ldr	r0, [pc, #444]	; (8003db4 <_printf_i+0x21c>)
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	e039      	b.n	8003c70 <_printf_i+0xd8>
 8003bfc:	2973      	cmp	r1, #115	; 0x73
 8003bfe:	f000 809d 	beq.w	8003d3c <_printf_i+0x1a4>
 8003c02:	d808      	bhi.n	8003c16 <_printf_i+0x7e>
 8003c04:	296f      	cmp	r1, #111	; 0x6f
 8003c06:	d020      	beq.n	8003c4a <_printf_i+0xb2>
 8003c08:	2970      	cmp	r1, #112	; 0x70
 8003c0a:	d1dd      	bne.n	8003bc8 <_printf_i+0x30>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	f043 0320 	orr.w	r3, r3, #32
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	e003      	b.n	8003c1e <_printf_i+0x86>
 8003c16:	2975      	cmp	r1, #117	; 0x75
 8003c18:	d017      	beq.n	8003c4a <_printf_i+0xb2>
 8003c1a:	2978      	cmp	r1, #120	; 0x78
 8003c1c:	d1d4      	bne.n	8003bc8 <_printf_i+0x30>
 8003c1e:	2378      	movs	r3, #120	; 0x78
 8003c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c24:	4864      	ldr	r0, [pc, #400]	; (8003db8 <_printf_i+0x220>)
 8003c26:	e055      	b.n	8003cd4 <_printf_i+0x13c>
 8003c28:	6813      	ldr	r3, [r2, #0]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6011      	str	r1, [r2, #0]
 8003c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e08c      	b.n	8003d56 <_printf_i+0x1be>
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6011      	str	r1, [r2, #0]
 8003c40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c44:	bf18      	it	ne
 8003c46:	b21b      	sxthne	r3, r3
 8003c48:	e7cf      	b.n	8003bea <_printf_i+0x52>
 8003c4a:	6813      	ldr	r3, [r2, #0]
 8003c4c:	6825      	ldr	r5, [r4, #0]
 8003c4e:	1d18      	adds	r0, r3, #4
 8003c50:	6010      	str	r0, [r2, #0]
 8003c52:	0628      	lsls	r0, r5, #24
 8003c54:	d501      	bpl.n	8003c5a <_printf_i+0xc2>
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	e002      	b.n	8003c60 <_printf_i+0xc8>
 8003c5a:	0668      	lsls	r0, r5, #25
 8003c5c:	d5fb      	bpl.n	8003c56 <_printf_i+0xbe>
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	4854      	ldr	r0, [pc, #336]	; (8003db4 <_printf_i+0x21c>)
 8003c62:	296f      	cmp	r1, #111	; 0x6f
 8003c64:	bf14      	ite	ne
 8003c66:	220a      	movne	r2, #10
 8003c68:	2208      	moveq	r2, #8
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c70:	6865      	ldr	r5, [r4, #4]
 8003c72:	60a5      	str	r5, [r4, #8]
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	f2c0 8095 	blt.w	8003da4 <_printf_i+0x20c>
 8003c7a:	6821      	ldr	r1, [r4, #0]
 8003c7c:	f021 0104 	bic.w	r1, r1, #4
 8003c80:	6021      	str	r1, [r4, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13d      	bne.n	8003d02 <_printf_i+0x16a>
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	f040 808e 	bne.w	8003da8 <_printf_i+0x210>
 8003c8c:	4665      	mov	r5, ip
 8003c8e:	2a08      	cmp	r2, #8
 8003c90:	d10b      	bne.n	8003caa <_printf_i+0x112>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	07db      	lsls	r3, r3, #31
 8003c96:	d508      	bpl.n	8003caa <_printf_i+0x112>
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	6862      	ldr	r2, [r4, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bfde      	ittt	le
 8003ca0:	2330      	movle	r3, #48	; 0x30
 8003ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003caa:	ebac 0305 	sub.w	r3, ip, r5
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	f8cd 8000 	str.w	r8, [sp]
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	aa03      	add	r2, sp, #12
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7ff fef6 	bl	8003aac <_printf_common>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d14d      	bne.n	8003d60 <_printf_i+0x1c8>
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	b005      	add	sp, #20
 8003cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cce:	4839      	ldr	r0, [pc, #228]	; (8003db4 <_printf_i+0x21c>)
 8003cd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cd4:	6813      	ldr	r3, [r2, #0]
 8003cd6:	6821      	ldr	r1, [r4, #0]
 8003cd8:	1d1d      	adds	r5, r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6015      	str	r5, [r2, #0]
 8003cde:	060a      	lsls	r2, r1, #24
 8003ce0:	d50b      	bpl.n	8003cfa <_printf_i+0x162>
 8003ce2:	07ca      	lsls	r2, r1, #31
 8003ce4:	bf44      	itt	mi
 8003ce6:	f041 0120 	orrmi.w	r1, r1, #32
 8003cea:	6021      	strmi	r1, [r4, #0]
 8003cec:	b91b      	cbnz	r3, 8003cf6 <_printf_i+0x15e>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	f022 0220 	bic.w	r2, r2, #32
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	e7b7      	b.n	8003c6a <_printf_i+0xd2>
 8003cfa:	064d      	lsls	r5, r1, #25
 8003cfc:	bf48      	it	mi
 8003cfe:	b29b      	uxthmi	r3, r3
 8003d00:	e7ef      	b.n	8003ce2 <_printf_i+0x14a>
 8003d02:	4665      	mov	r5, ip
 8003d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d08:	fb02 3311 	mls	r3, r2, r1, r3
 8003d0c:	5cc3      	ldrb	r3, [r0, r3]
 8003d0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d12:	460b      	mov	r3, r1
 8003d14:	2900      	cmp	r1, #0
 8003d16:	d1f5      	bne.n	8003d04 <_printf_i+0x16c>
 8003d18:	e7b9      	b.n	8003c8e <_printf_i+0xf6>
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	6825      	ldr	r5, [r4, #0]
 8003d1e:	6961      	ldr	r1, [r4, #20]
 8003d20:	1d18      	adds	r0, r3, #4
 8003d22:	6010      	str	r0, [r2, #0]
 8003d24:	0628      	lsls	r0, r5, #24
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	d501      	bpl.n	8003d2e <_printf_i+0x196>
 8003d2a:	6019      	str	r1, [r3, #0]
 8003d2c:	e002      	b.n	8003d34 <_printf_i+0x19c>
 8003d2e:	066a      	lsls	r2, r5, #25
 8003d30:	d5fb      	bpl.n	8003d2a <_printf_i+0x192>
 8003d32:	8019      	strh	r1, [r3, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	6123      	str	r3, [r4, #16]
 8003d38:	4665      	mov	r5, ip
 8003d3a:	e7b9      	b.n	8003cb0 <_printf_i+0x118>
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	1d19      	adds	r1, r3, #4
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	681d      	ldr	r5, [r3, #0]
 8003d44:	6862      	ldr	r2, [r4, #4]
 8003d46:	2100      	movs	r1, #0
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f7fc fa51 	bl	80001f0 <memchr>
 8003d4e:	b108      	cbz	r0, 8003d54 <_printf_i+0x1bc>
 8003d50:	1b40      	subs	r0, r0, r5
 8003d52:	6060      	str	r0, [r4, #4]
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d5e:	e7a7      	b.n	8003cb0 <_printf_i+0x118>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	462a      	mov	r2, r5
 8003d64:	4639      	mov	r1, r7
 8003d66:	4630      	mov	r0, r6
 8003d68:	47c0      	blx	r8
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d0aa      	beq.n	8003cc4 <_printf_i+0x12c>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	079b      	lsls	r3, r3, #30
 8003d72:	d413      	bmi.n	8003d9c <_printf_i+0x204>
 8003d74:	68e0      	ldr	r0, [r4, #12]
 8003d76:	9b03      	ldr	r3, [sp, #12]
 8003d78:	4298      	cmp	r0, r3
 8003d7a:	bfb8      	it	lt
 8003d7c:	4618      	movlt	r0, r3
 8003d7e:	e7a3      	b.n	8003cc8 <_printf_i+0x130>
 8003d80:	2301      	movs	r3, #1
 8003d82:	464a      	mov	r2, r9
 8003d84:	4639      	mov	r1, r7
 8003d86:	4630      	mov	r0, r6
 8003d88:	47c0      	blx	r8
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d09a      	beq.n	8003cc4 <_printf_i+0x12c>
 8003d8e:	3501      	adds	r5, #1
 8003d90:	68e3      	ldr	r3, [r4, #12]
 8003d92:	9a03      	ldr	r2, [sp, #12]
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	42ab      	cmp	r3, r5
 8003d98:	dcf2      	bgt.n	8003d80 <_printf_i+0x1e8>
 8003d9a:	e7eb      	b.n	8003d74 <_printf_i+0x1dc>
 8003d9c:	2500      	movs	r5, #0
 8003d9e:	f104 0919 	add.w	r9, r4, #25
 8003da2:	e7f5      	b.n	8003d90 <_printf_i+0x1f8>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ac      	bne.n	8003d02 <_printf_i+0x16a>
 8003da8:	7803      	ldrb	r3, [r0, #0]
 8003daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db2:	e76c      	b.n	8003c8e <_printf_i+0xf6>
 8003db4:	08005e16 	.word	0x08005e16
 8003db8:	08005e27 	.word	0x08005e27

08003dbc <iprintf>:
 8003dbc:	b40f      	push	{r0, r1, r2, r3}
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <iprintf+0x2c>)
 8003dc0:	b513      	push	{r0, r1, r4, lr}
 8003dc2:	681c      	ldr	r4, [r3, #0]
 8003dc4:	b124      	cbz	r4, 8003dd0 <iprintf+0x14>
 8003dc6:	69a3      	ldr	r3, [r4, #24]
 8003dc8:	b913      	cbnz	r3, 8003dd0 <iprintf+0x14>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f001 f87c 	bl	8004ec8 <__sinit>
 8003dd0:	ab05      	add	r3, sp, #20
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	68a1      	ldr	r1, [r4, #8]
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f001 fd35 	bl	8005848 <_vfiprintf_r>
 8003dde:	b002      	add	sp, #8
 8003de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de4:	b004      	add	sp, #16
 8003de6:	4770      	bx	lr
 8003de8:	20000010 	.word	0x20000010

08003dec <putchar>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <putchar+0x24>)
 8003df0:	681c      	ldr	r4, [r3, #0]
 8003df2:	4605      	mov	r5, r0
 8003df4:	b124      	cbz	r4, 8003e00 <putchar+0x14>
 8003df6:	69a3      	ldr	r3, [r4, #24]
 8003df8:	b913      	cbnz	r3, 8003e00 <putchar+0x14>
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f001 f864 	bl	8004ec8 <__sinit>
 8003e00:	68a2      	ldr	r2, [r4, #8]
 8003e02:	4629      	mov	r1, r5
 8003e04:	4620      	mov	r0, r4
 8003e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e0a:	f001 be33 	b.w	8005a74 <_putc_r>
 8003e0e:	bf00      	nop
 8003e10:	20000010 	.word	0x20000010

08003e14 <_puts_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	460e      	mov	r6, r1
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b118      	cbz	r0, 8003e24 <_puts_r+0x10>
 8003e1c:	6983      	ldr	r3, [r0, #24]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <_puts_r+0x10>
 8003e20:	f001 f852 	bl	8004ec8 <__sinit>
 8003e24:	69ab      	ldr	r3, [r5, #24]
 8003e26:	68ac      	ldr	r4, [r5, #8]
 8003e28:	b913      	cbnz	r3, 8003e30 <_puts_r+0x1c>
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f001 f84c 	bl	8004ec8 <__sinit>
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <_puts_r+0xac>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d117      	bne.n	8003e66 <_puts_r+0x52>
 8003e36:	686c      	ldr	r4, [r5, #4]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	d51d      	bpl.n	8003e7a <_puts_r+0x66>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	b1db      	cbz	r3, 8003e7a <_puts_r+0x66>
 8003e42:	3e01      	subs	r6, #1
 8003e44:	68a3      	ldr	r3, [r4, #8]
 8003e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	b9e9      	cbnz	r1, 8003e8c <_puts_r+0x78>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da2e      	bge.n	8003eb2 <_puts_r+0x9e>
 8003e54:	4622      	mov	r2, r4
 8003e56:	210a      	movs	r1, #10
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f83f 	bl	8003edc <__swbuf_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d011      	beq.n	8003e86 <_puts_r+0x72>
 8003e62:	200a      	movs	r0, #10
 8003e64:	e011      	b.n	8003e8a <_puts_r+0x76>
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <_puts_r+0xb0>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d101      	bne.n	8003e70 <_puts_r+0x5c>
 8003e6c:	68ac      	ldr	r4, [r5, #8]
 8003e6e:	e7e3      	b.n	8003e38 <_puts_r+0x24>
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <_puts_r+0xb4>)
 8003e72:	429c      	cmp	r4, r3
 8003e74:	bf08      	it	eq
 8003e76:	68ec      	ldreq	r4, [r5, #12]
 8003e78:	e7de      	b.n	8003e38 <_puts_r+0x24>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 f87f 	bl	8003f80 <__swsetup_r>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0dd      	beq.n	8003e42 <_puts_r+0x2e>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da04      	bge.n	8003e9a <_puts_r+0x86>
 8003e90:	69a2      	ldr	r2, [r4, #24]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	dc06      	bgt.n	8003ea4 <_puts_r+0x90>
 8003e96:	290a      	cmp	r1, #10
 8003e98:	d004      	beq.n	8003ea4 <_puts_r+0x90>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	6022      	str	r2, [r4, #0]
 8003ea0:	7019      	strb	r1, [r3, #0]
 8003ea2:	e7cf      	b.n	8003e44 <_puts_r+0x30>
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 f818 	bl	8003edc <__swbuf_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d1c9      	bne.n	8003e44 <_puts_r+0x30>
 8003eb0:	e7e9      	b.n	8003e86 <_puts_r+0x72>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	200a      	movs	r0, #10
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	6022      	str	r2, [r4, #0]
 8003eba:	7018      	strb	r0, [r3, #0]
 8003ebc:	e7e5      	b.n	8003e8a <_puts_r+0x76>
 8003ebe:	bf00      	nop
 8003ec0:	08005e68 	.word	0x08005e68
 8003ec4:	08005e88 	.word	0x08005e88
 8003ec8:	08005e48 	.word	0x08005e48

08003ecc <puts>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <puts+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f7ff bf9f 	b.w	8003e14 <_puts_r>
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010

08003edc <__swbuf_r>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	460e      	mov	r6, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	b118      	cbz	r0, 8003eee <__swbuf_r+0x12>
 8003ee6:	6983      	ldr	r3, [r0, #24]
 8003ee8:	b90b      	cbnz	r3, 8003eee <__swbuf_r+0x12>
 8003eea:	f000 ffed 	bl	8004ec8 <__sinit>
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <__swbuf_r+0x98>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d12a      	bne.n	8003f4a <__swbuf_r+0x6e>
 8003ef4:	686c      	ldr	r4, [r5, #4]
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	071a      	lsls	r2, r3, #28
 8003efe:	d52e      	bpl.n	8003f5e <__swbuf_r+0x82>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	b363      	cbz	r3, 8003f5e <__swbuf_r+0x82>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	b2f6      	uxtb	r6, r6
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	4637      	mov	r7, r6
 8003f12:	dc04      	bgt.n	8003f1e <__swbuf_r+0x42>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 ff6c 	bl	8004df4 <_fflush_r>
 8003f1c:	bb28      	cbnz	r0, 8003f6a <__swbuf_r+0x8e>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	701e      	strb	r6, [r3, #0]
 8003f2c:	6963      	ldr	r3, [r4, #20]
 8003f2e:	3001      	adds	r0, #1
 8003f30:	4283      	cmp	r3, r0
 8003f32:	d004      	beq.n	8003f3e <__swbuf_r+0x62>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	07db      	lsls	r3, r3, #31
 8003f38:	d519      	bpl.n	8003f6e <__swbuf_r+0x92>
 8003f3a:	2e0a      	cmp	r6, #10
 8003f3c:	d117      	bne.n	8003f6e <__swbuf_r+0x92>
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 ff57 	bl	8004df4 <_fflush_r>
 8003f46:	b190      	cbz	r0, 8003f6e <__swbuf_r+0x92>
 8003f48:	e00f      	b.n	8003f6a <__swbuf_r+0x8e>
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <__swbuf_r+0x9c>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d101      	bne.n	8003f54 <__swbuf_r+0x78>
 8003f50:	68ac      	ldr	r4, [r5, #8]
 8003f52:	e7d0      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <__swbuf_r+0xa0>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	bf08      	it	eq
 8003f5a:	68ec      	ldreq	r4, [r5, #12]
 8003f5c:	e7cb      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f80d 	bl	8003f80 <__swsetup_r>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0cc      	beq.n	8003f04 <__swbuf_r+0x28>
 8003f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f6e:	4638      	mov	r0, r7
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	08005e68 	.word	0x08005e68
 8003f78:	08005e88 	.word	0x08005e88
 8003f7c:	08005e48 	.word	0x08005e48

08003f80 <__swsetup_r>:
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <__swsetup_r+0xcc>)
 8003f82:	b570      	push	{r4, r5, r6, lr}
 8003f84:	681d      	ldr	r5, [r3, #0]
 8003f86:	4606      	mov	r6, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	b125      	cbz	r5, 8003f96 <__swsetup_r+0x16>
 8003f8c:	69ab      	ldr	r3, [r5, #24]
 8003f8e:	b913      	cbnz	r3, 8003f96 <__swsetup_r+0x16>
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 ff99 	bl	8004ec8 <__sinit>
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <__swsetup_r+0xd0>)
 8003f98:	429c      	cmp	r4, r3
 8003f9a:	d10f      	bne.n	8003fbc <__swsetup_r+0x3c>
 8003f9c:	686c      	ldr	r4, [r5, #4]
 8003f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	0715      	lsls	r5, r2, #28
 8003fa6:	d42c      	bmi.n	8004002 <__swsetup_r+0x82>
 8003fa8:	06d0      	lsls	r0, r2, #27
 8003faa:	d411      	bmi.n	8003fd0 <__swsetup_r+0x50>
 8003fac:	2209      	movs	r2, #9
 8003fae:	6032      	str	r2, [r6, #0]
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fba:	e03e      	b.n	800403a <__swsetup_r+0xba>
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <__swsetup_r+0xd4>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d101      	bne.n	8003fc6 <__swsetup_r+0x46>
 8003fc2:	68ac      	ldr	r4, [r5, #8]
 8003fc4:	e7eb      	b.n	8003f9e <__swsetup_r+0x1e>
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <__swsetup_r+0xd8>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	bf08      	it	eq
 8003fcc:	68ec      	ldreq	r4, [r5, #12]
 8003fce:	e7e6      	b.n	8003f9e <__swsetup_r+0x1e>
 8003fd0:	0751      	lsls	r1, r2, #29
 8003fd2:	d512      	bpl.n	8003ffa <__swsetup_r+0x7a>
 8003fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd6:	b141      	cbz	r1, 8003fea <__swsetup_r+0x6a>
 8003fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	d002      	beq.n	8003fe6 <__swsetup_r+0x66>
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f001 fb5f 	bl	80056a4 <_free_r>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6063      	str	r3, [r4, #4]
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	6923      	ldr	r3, [r4, #16]
 8004004:	b94b      	cbnz	r3, 800401a <__swsetup_r+0x9a>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d003      	beq.n	800401a <__swsetup_r+0x9a>
 8004012:	4621      	mov	r1, r4
 8004014:	4630      	mov	r0, r6
 8004016:	f001 f813 	bl	8005040 <__smakebuf_r>
 800401a:	89a2      	ldrh	r2, [r4, #12]
 800401c:	f012 0301 	ands.w	r3, r2, #1
 8004020:	d00c      	beq.n	800403c <__swsetup_r+0xbc>
 8004022:	2300      	movs	r3, #0
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6963      	ldr	r3, [r4, #20]
 8004028:	425b      	negs	r3, r3
 800402a:	61a3      	str	r3, [r4, #24]
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	b953      	cbnz	r3, 8004046 <__swsetup_r+0xc6>
 8004030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004034:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004038:	d1ba      	bne.n	8003fb0 <__swsetup_r+0x30>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	0792      	lsls	r2, r2, #30
 800403e:	bf58      	it	pl
 8004040:	6963      	ldrpl	r3, [r4, #20]
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	e7f2      	b.n	800402c <__swsetup_r+0xac>
 8004046:	2000      	movs	r0, #0
 8004048:	e7f7      	b.n	800403a <__swsetup_r+0xba>
 800404a:	bf00      	nop
 800404c:	20000010 	.word	0x20000010
 8004050:	08005e68 	.word	0x08005e68
 8004054:	08005e88 	.word	0x08005e88
 8004058:	08005e48 	.word	0x08005e48

0800405c <quorem>:
 800405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	6903      	ldr	r3, [r0, #16]
 8004062:	690c      	ldr	r4, [r1, #16]
 8004064:	42a3      	cmp	r3, r4
 8004066:	4680      	mov	r8, r0
 8004068:	f2c0 8082 	blt.w	8004170 <quorem+0x114>
 800406c:	3c01      	subs	r4, #1
 800406e:	f101 0714 	add.w	r7, r1, #20
 8004072:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004076:	f100 0614 	add.w	r6, r0, #20
 800407a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800407e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004082:	eb06 030c 	add.w	r3, r6, ip
 8004086:	3501      	adds	r5, #1
 8004088:	eb07 090c 	add.w	r9, r7, ip
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004092:	b395      	cbz	r5, 80040fa <quorem+0x9e>
 8004094:	f04f 0a00 	mov.w	sl, #0
 8004098:	4638      	mov	r0, r7
 800409a:	46b6      	mov	lr, r6
 800409c:	46d3      	mov	fp, sl
 800409e:	f850 2b04 	ldr.w	r2, [r0], #4
 80040a2:	b293      	uxth	r3, r2
 80040a4:	fb05 a303 	mla	r3, r5, r3, sl
 80040a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	ebab 0303 	sub.w	r3, fp, r3
 80040b2:	0c12      	lsrs	r2, r2, #16
 80040b4:	f8de b000 	ldr.w	fp, [lr]
 80040b8:	fb05 a202 	mla	r2, r5, r2, sl
 80040bc:	fa13 f38b 	uxtah	r3, r3, fp
 80040c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80040c4:	fa1f fb82 	uxth.w	fp, r2
 80040c8:	f8de 2000 	ldr.w	r2, [lr]
 80040cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80040d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040da:	4581      	cmp	r9, r0
 80040dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80040e0:	f84e 3b04 	str.w	r3, [lr], #4
 80040e4:	d2db      	bcs.n	800409e <quorem+0x42>
 80040e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80040ea:	b933      	cbnz	r3, 80040fa <quorem+0x9e>
 80040ec:	9b01      	ldr	r3, [sp, #4]
 80040ee:	3b04      	subs	r3, #4
 80040f0:	429e      	cmp	r6, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	d330      	bcc.n	8004158 <quorem+0xfc>
 80040f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80040fa:	4640      	mov	r0, r8
 80040fc:	f001 f9fe 	bl	80054fc <__mcmp>
 8004100:	2800      	cmp	r0, #0
 8004102:	db25      	blt.n	8004150 <quorem+0xf4>
 8004104:	3501      	adds	r5, #1
 8004106:	4630      	mov	r0, r6
 8004108:	f04f 0c00 	mov.w	ip, #0
 800410c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004110:	f8d0 e000 	ldr.w	lr, [r0]
 8004114:	b293      	uxth	r3, r2
 8004116:	ebac 0303 	sub.w	r3, ip, r3
 800411a:	0c12      	lsrs	r2, r2, #16
 800411c:	fa13 f38e 	uxtah	r3, r3, lr
 8004120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004128:	b29b      	uxth	r3, r3
 800412a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800412e:	45b9      	cmp	r9, r7
 8004130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004134:	f840 3b04 	str.w	r3, [r0], #4
 8004138:	d2e8      	bcs.n	800410c <quorem+0xb0>
 800413a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800413e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004142:	b92a      	cbnz	r2, 8004150 <quorem+0xf4>
 8004144:	3b04      	subs	r3, #4
 8004146:	429e      	cmp	r6, r3
 8004148:	461a      	mov	r2, r3
 800414a:	d30b      	bcc.n	8004164 <quorem+0x108>
 800414c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004150:	4628      	mov	r0, r5
 8004152:	b003      	add	sp, #12
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	3b04      	subs	r3, #4
 800415c:	2a00      	cmp	r2, #0
 800415e:	d1ca      	bne.n	80040f6 <quorem+0x9a>
 8004160:	3c01      	subs	r4, #1
 8004162:	e7c5      	b.n	80040f0 <quorem+0x94>
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	3b04      	subs	r3, #4
 8004168:	2a00      	cmp	r2, #0
 800416a:	d1ef      	bne.n	800414c <quorem+0xf0>
 800416c:	3c01      	subs	r4, #1
 800416e:	e7ea      	b.n	8004146 <quorem+0xea>
 8004170:	2000      	movs	r0, #0
 8004172:	e7ee      	b.n	8004152 <quorem+0xf6>
 8004174:	0000      	movs	r0, r0
	...

08004178 <_dtoa_r>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	ec57 6b10 	vmov	r6, r7, d0
 8004180:	b097      	sub	sp, #92	; 0x5c
 8004182:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004184:	9106      	str	r1, [sp, #24]
 8004186:	4604      	mov	r4, r0
 8004188:	920b      	str	r2, [sp, #44]	; 0x2c
 800418a:	9312      	str	r3, [sp, #72]	; 0x48
 800418c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004190:	e9cd 6700 	strd	r6, r7, [sp]
 8004194:	b93d      	cbnz	r5, 80041a6 <_dtoa_r+0x2e>
 8004196:	2010      	movs	r0, #16
 8004198:	f000 ff92 	bl	80050c0 <malloc>
 800419c:	6260      	str	r0, [r4, #36]	; 0x24
 800419e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041a2:	6005      	str	r5, [r0, #0]
 80041a4:	60c5      	str	r5, [r0, #12]
 80041a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	b151      	cbz	r1, 80041c2 <_dtoa_r+0x4a>
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	604a      	str	r2, [r1, #4]
 80041b0:	2301      	movs	r3, #1
 80041b2:	4093      	lsls	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 ffbe 	bl	8005138 <_Bfree>
 80041bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	1e3b      	subs	r3, r7, #0
 80041c4:	bfbb      	ittet	lt
 80041c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	9301      	strlt	r3, [sp, #4]
 80041cc:	2300      	movge	r3, #0
 80041ce:	2201      	movlt	r2, #1
 80041d0:	bfac      	ite	ge
 80041d2:	f8c8 3000 	strge.w	r3, [r8]
 80041d6:	f8c8 2000 	strlt.w	r2, [r8]
 80041da:	4baf      	ldr	r3, [pc, #700]	; (8004498 <_dtoa_r+0x320>)
 80041dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80041e0:	ea33 0308 	bics.w	r3, r3, r8
 80041e4:	d114      	bne.n	8004210 <_dtoa_r+0x98>
 80041e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	9b00      	ldr	r3, [sp, #0]
 80041f0:	b923      	cbnz	r3, 80041fc <_dtoa_r+0x84>
 80041f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f000 8542 	beq.w	8004c80 <_dtoa_r+0xb08>
 80041fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80044ac <_dtoa_r+0x334>
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8544 	beq.w	8004c90 <_dtoa_r+0xb18>
 8004208:	f10b 0303 	add.w	r3, fp, #3
 800420c:	f000 bd3e 	b.w	8004c8c <_dtoa_r+0xb14>
 8004210:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004214:	2200      	movs	r2, #0
 8004216:	2300      	movs	r3, #0
 8004218:	4630      	mov	r0, r6
 800421a:	4639      	mov	r1, r7
 800421c:	f7fc fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004220:	4681      	mov	r9, r0
 8004222:	b168      	cbz	r0, 8004240 <_dtoa_r+0xc8>
 8004224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004226:	2301      	movs	r3, #1
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8524 	beq.w	8004c7a <_dtoa_r+0xb02>
 8004232:	4b9a      	ldr	r3, [pc, #616]	; (800449c <_dtoa_r+0x324>)
 8004234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004236:	f103 3bff 	add.w	fp, r3, #4294967295
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	f000 bd28 	b.w	8004c90 <_dtoa_r+0xb18>
 8004240:	aa14      	add	r2, sp, #80	; 0x50
 8004242:	a915      	add	r1, sp, #84	; 0x54
 8004244:	ec47 6b10 	vmov	d0, r6, r7
 8004248:	4620      	mov	r0, r4
 800424a:	f001 f9ce 	bl	80055ea <__d2b>
 800424e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004252:	9004      	str	r0, [sp, #16]
 8004254:	2d00      	cmp	r5, #0
 8004256:	d07c      	beq.n	8004352 <_dtoa_r+0x1da>
 8004258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800425c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004260:	46b2      	mov	sl, r6
 8004262:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800426a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800426e:	2200      	movs	r2, #0
 8004270:	4b8b      	ldr	r3, [pc, #556]	; (80044a0 <_dtoa_r+0x328>)
 8004272:	4650      	mov	r0, sl
 8004274:	4659      	mov	r1, fp
 8004276:	f7fc f80f 	bl	8000298 <__aeabi_dsub>
 800427a:	a381      	add	r3, pc, #516	; (adr r3, 8004480 <_dtoa_r+0x308>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f7fc f9c2 	bl	8000608 <__aeabi_dmul>
 8004284:	a380      	add	r3, pc, #512	; (adr r3, 8004488 <_dtoa_r+0x310>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f7fc f807 	bl	800029c <__adddf3>
 800428e:	4606      	mov	r6, r0
 8004290:	4628      	mov	r0, r5
 8004292:	460f      	mov	r7, r1
 8004294:	f7fc f94e 	bl	8000534 <__aeabi_i2d>
 8004298:	a37d      	add	r3, pc, #500	; (adr r3, 8004490 <_dtoa_r+0x318>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f7fc f9b3 	bl	8000608 <__aeabi_dmul>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4630      	mov	r0, r6
 80042a8:	4639      	mov	r1, r7
 80042aa:	f7fb fff7 	bl	800029c <__adddf3>
 80042ae:	4606      	mov	r6, r0
 80042b0:	460f      	mov	r7, r1
 80042b2:	f7fc fc59 	bl	8000b68 <__aeabi_d2iz>
 80042b6:	2200      	movs	r2, #0
 80042b8:	4682      	mov	sl, r0
 80042ba:	2300      	movs	r3, #0
 80042bc:	4630      	mov	r0, r6
 80042be:	4639      	mov	r1, r7
 80042c0:	f7fc fc14 	bl	8000aec <__aeabi_dcmplt>
 80042c4:	b148      	cbz	r0, 80042da <_dtoa_r+0x162>
 80042c6:	4650      	mov	r0, sl
 80042c8:	f7fc f934 	bl	8000534 <__aeabi_i2d>
 80042cc:	4632      	mov	r2, r6
 80042ce:	463b      	mov	r3, r7
 80042d0:	f7fc fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80042d4:	b908      	cbnz	r0, 80042da <_dtoa_r+0x162>
 80042d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042da:	f1ba 0f16 	cmp.w	sl, #22
 80042de:	d859      	bhi.n	8004394 <_dtoa_r+0x21c>
 80042e0:	4970      	ldr	r1, [pc, #448]	; (80044a4 <_dtoa_r+0x32c>)
 80042e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80042e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ee:	f7fc fc1b 	bl	8000b28 <__aeabi_dcmpgt>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d050      	beq.n	8004398 <_dtoa_r+0x220>
 80042f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042fa:	2300      	movs	r3, #0
 80042fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80042fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004300:	1b5d      	subs	r5, r3, r5
 8004302:	f1b5 0801 	subs.w	r8, r5, #1
 8004306:	bf49      	itett	mi
 8004308:	f1c5 0301 	rsbmi	r3, r5, #1
 800430c:	2300      	movpl	r3, #0
 800430e:	9305      	strmi	r3, [sp, #20]
 8004310:	f04f 0800 	movmi.w	r8, #0
 8004314:	bf58      	it	pl
 8004316:	9305      	strpl	r3, [sp, #20]
 8004318:	f1ba 0f00 	cmp.w	sl, #0
 800431c:	db3e      	blt.n	800439c <_dtoa_r+0x224>
 800431e:	2300      	movs	r3, #0
 8004320:	44d0      	add	r8, sl
 8004322:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004326:	9307      	str	r3, [sp, #28]
 8004328:	9b06      	ldr	r3, [sp, #24]
 800432a:	2b09      	cmp	r3, #9
 800432c:	f200 8090 	bhi.w	8004450 <_dtoa_r+0x2d8>
 8004330:	2b05      	cmp	r3, #5
 8004332:	bfc4      	itt	gt
 8004334:	3b04      	subgt	r3, #4
 8004336:	9306      	strgt	r3, [sp, #24]
 8004338:	9b06      	ldr	r3, [sp, #24]
 800433a:	f1a3 0302 	sub.w	r3, r3, #2
 800433e:	bfcc      	ite	gt
 8004340:	2500      	movgt	r5, #0
 8004342:	2501      	movle	r5, #1
 8004344:	2b03      	cmp	r3, #3
 8004346:	f200 808f 	bhi.w	8004468 <_dtoa_r+0x2f0>
 800434a:	e8df f003 	tbb	[pc, r3]
 800434e:	7f7d      	.short	0x7f7d
 8004350:	7131      	.short	0x7131
 8004352:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004356:	441d      	add	r5, r3
 8004358:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800435c:	2820      	cmp	r0, #32
 800435e:	dd13      	ble.n	8004388 <_dtoa_r+0x210>
 8004360:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004364:	9b00      	ldr	r3, [sp, #0]
 8004366:	fa08 f800 	lsl.w	r8, r8, r0
 800436a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800436e:	fa23 f000 	lsr.w	r0, r3, r0
 8004372:	ea48 0000 	orr.w	r0, r8, r0
 8004376:	f7fc f8cd 	bl	8000514 <__aeabi_ui2d>
 800437a:	2301      	movs	r3, #1
 800437c:	4682      	mov	sl, r0
 800437e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004382:	3d01      	subs	r5, #1
 8004384:	9313      	str	r3, [sp, #76]	; 0x4c
 8004386:	e772      	b.n	800426e <_dtoa_r+0xf6>
 8004388:	9b00      	ldr	r3, [sp, #0]
 800438a:	f1c0 0020 	rsb	r0, r0, #32
 800438e:	fa03 f000 	lsl.w	r0, r3, r0
 8004392:	e7f0      	b.n	8004376 <_dtoa_r+0x1fe>
 8004394:	2301      	movs	r3, #1
 8004396:	e7b1      	b.n	80042fc <_dtoa_r+0x184>
 8004398:	900f      	str	r0, [sp, #60]	; 0x3c
 800439a:	e7b0      	b.n	80042fe <_dtoa_r+0x186>
 800439c:	9b05      	ldr	r3, [sp, #20]
 800439e:	eba3 030a 	sub.w	r3, r3, sl
 80043a2:	9305      	str	r3, [sp, #20]
 80043a4:	f1ca 0300 	rsb	r3, sl, #0
 80043a8:	9307      	str	r3, [sp, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	930e      	str	r3, [sp, #56]	; 0x38
 80043ae:	e7bb      	b.n	8004328 <_dtoa_r+0x1b0>
 80043b0:	2301      	movs	r3, #1
 80043b2:	930a      	str	r3, [sp, #40]	; 0x28
 80043b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dd59      	ble.n	800446e <_dtoa_r+0x2f6>
 80043ba:	9302      	str	r3, [sp, #8]
 80043bc:	4699      	mov	r9, r3
 80043be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80043c0:	2200      	movs	r2, #0
 80043c2:	6072      	str	r2, [r6, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	f102 0014 	add.w	r0, r2, #20
 80043ca:	4298      	cmp	r0, r3
 80043cc:	6871      	ldr	r1, [r6, #4]
 80043ce:	d953      	bls.n	8004478 <_dtoa_r+0x300>
 80043d0:	4620      	mov	r0, r4
 80043d2:	f000 fe7d 	bl	80050d0 <_Balloc>
 80043d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d8:	6030      	str	r0, [r6, #0]
 80043da:	f1b9 0f0e 	cmp.w	r9, #14
 80043de:	f8d3 b000 	ldr.w	fp, [r3]
 80043e2:	f200 80e6 	bhi.w	80045b2 <_dtoa_r+0x43a>
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	f000 80e3 	beq.w	80045b2 <_dtoa_r+0x43a>
 80043ec:	ed9d 7b00 	vldr	d7, [sp]
 80043f0:	f1ba 0f00 	cmp.w	sl, #0
 80043f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80043f8:	dd74      	ble.n	80044e4 <_dtoa_r+0x36c>
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <_dtoa_r+0x32c>)
 80043fc:	f00a 030f 	and.w	r3, sl, #15
 8004400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004404:	ed93 7b00 	vldr	d7, [r3]
 8004408:	ea4f 162a 	mov.w	r6, sl, asr #4
 800440c:	06f0      	lsls	r0, r6, #27
 800440e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004412:	d565      	bpl.n	80044e0 <_dtoa_r+0x368>
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <_dtoa_r+0x330>)
 8004416:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800441a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800441e:	f7fc fa1d 	bl	800085c <__aeabi_ddiv>
 8004422:	e9cd 0100 	strd	r0, r1, [sp]
 8004426:	f006 060f 	and.w	r6, r6, #15
 800442a:	2503      	movs	r5, #3
 800442c:	4f1e      	ldr	r7, [pc, #120]	; (80044a8 <_dtoa_r+0x330>)
 800442e:	e04c      	b.n	80044ca <_dtoa_r+0x352>
 8004430:	2301      	movs	r3, #1
 8004432:	930a      	str	r3, [sp, #40]	; 0x28
 8004434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004436:	4453      	add	r3, sl
 8004438:	f103 0901 	add.w	r9, r3, #1
 800443c:	9302      	str	r3, [sp, #8]
 800443e:	464b      	mov	r3, r9
 8004440:	2b01      	cmp	r3, #1
 8004442:	bfb8      	it	lt
 8004444:	2301      	movlt	r3, #1
 8004446:	e7ba      	b.n	80043be <_dtoa_r+0x246>
 8004448:	2300      	movs	r3, #0
 800444a:	e7b2      	b.n	80043b2 <_dtoa_r+0x23a>
 800444c:	2300      	movs	r3, #0
 800444e:	e7f0      	b.n	8004432 <_dtoa_r+0x2ba>
 8004450:	2501      	movs	r5, #1
 8004452:	2300      	movs	r3, #0
 8004454:	9306      	str	r3, [sp, #24]
 8004456:	950a      	str	r5, [sp, #40]	; 0x28
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
 800445c:	9302      	str	r3, [sp, #8]
 800445e:	4699      	mov	r9, r3
 8004460:	2200      	movs	r2, #0
 8004462:	2312      	movs	r3, #18
 8004464:	920b      	str	r2, [sp, #44]	; 0x2c
 8004466:	e7aa      	b.n	80043be <_dtoa_r+0x246>
 8004468:	2301      	movs	r3, #1
 800446a:	930a      	str	r3, [sp, #40]	; 0x28
 800446c:	e7f4      	b.n	8004458 <_dtoa_r+0x2e0>
 800446e:	2301      	movs	r3, #1
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	4699      	mov	r9, r3
 8004474:	461a      	mov	r2, r3
 8004476:	e7f5      	b.n	8004464 <_dtoa_r+0x2ec>
 8004478:	3101      	adds	r1, #1
 800447a:	6071      	str	r1, [r6, #4]
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	e7a2      	b.n	80043c6 <_dtoa_r+0x24e>
 8004480:	636f4361 	.word	0x636f4361
 8004484:	3fd287a7 	.word	0x3fd287a7
 8004488:	8b60c8b3 	.word	0x8b60c8b3
 800448c:	3fc68a28 	.word	0x3fc68a28
 8004490:	509f79fb 	.word	0x509f79fb
 8004494:	3fd34413 	.word	0x3fd34413
 8004498:	7ff00000 	.word	0x7ff00000
 800449c:	08005e15 	.word	0x08005e15
 80044a0:	3ff80000 	.word	0x3ff80000
 80044a4:	08005ed0 	.word	0x08005ed0
 80044a8:	08005ea8 	.word	0x08005ea8
 80044ac:	08005e41 	.word	0x08005e41
 80044b0:	07f1      	lsls	r1, r6, #31
 80044b2:	d508      	bpl.n	80044c6 <_dtoa_r+0x34e>
 80044b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044bc:	f7fc f8a4 	bl	8000608 <__aeabi_dmul>
 80044c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80044c4:	3501      	adds	r5, #1
 80044c6:	1076      	asrs	r6, r6, #1
 80044c8:	3708      	adds	r7, #8
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d1f0      	bne.n	80044b0 <_dtoa_r+0x338>
 80044ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044d6:	f7fc f9c1 	bl	800085c <__aeabi_ddiv>
 80044da:	e9cd 0100 	strd	r0, r1, [sp]
 80044de:	e01a      	b.n	8004516 <_dtoa_r+0x39e>
 80044e0:	2502      	movs	r5, #2
 80044e2:	e7a3      	b.n	800442c <_dtoa_r+0x2b4>
 80044e4:	f000 80a0 	beq.w	8004628 <_dtoa_r+0x4b0>
 80044e8:	f1ca 0600 	rsb	r6, sl, #0
 80044ec:	4b9f      	ldr	r3, [pc, #636]	; (800476c <_dtoa_r+0x5f4>)
 80044ee:	4fa0      	ldr	r7, [pc, #640]	; (8004770 <_dtoa_r+0x5f8>)
 80044f0:	f006 020f 	and.w	r2, r6, #15
 80044f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004500:	f7fc f882 	bl	8000608 <__aeabi_dmul>
 8004504:	e9cd 0100 	strd	r0, r1, [sp]
 8004508:	1136      	asrs	r6, r6, #4
 800450a:	2300      	movs	r3, #0
 800450c:	2502      	movs	r5, #2
 800450e:	2e00      	cmp	r6, #0
 8004510:	d17f      	bne.n	8004612 <_dtoa_r+0x49a>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e1      	bne.n	80044da <_dtoa_r+0x362>
 8004516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8087 	beq.w	800462c <_dtoa_r+0x4b4>
 800451e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004522:	2200      	movs	r2, #0
 8004524:	4b93      	ldr	r3, [pc, #588]	; (8004774 <_dtoa_r+0x5fc>)
 8004526:	4630      	mov	r0, r6
 8004528:	4639      	mov	r1, r7
 800452a:	f7fc fadf 	bl	8000aec <__aeabi_dcmplt>
 800452e:	2800      	cmp	r0, #0
 8004530:	d07c      	beq.n	800462c <_dtoa_r+0x4b4>
 8004532:	f1b9 0f00 	cmp.w	r9, #0
 8004536:	d079      	beq.n	800462c <_dtoa_r+0x4b4>
 8004538:	9b02      	ldr	r3, [sp, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	dd35      	ble.n	80045aa <_dtoa_r+0x432>
 800453e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004542:	9308      	str	r3, [sp, #32]
 8004544:	4639      	mov	r1, r7
 8004546:	2200      	movs	r2, #0
 8004548:	4b8b      	ldr	r3, [pc, #556]	; (8004778 <_dtoa_r+0x600>)
 800454a:	4630      	mov	r0, r6
 800454c:	f7fc f85c 	bl	8000608 <__aeabi_dmul>
 8004550:	e9cd 0100 	strd	r0, r1, [sp]
 8004554:	9f02      	ldr	r7, [sp, #8]
 8004556:	3501      	adds	r5, #1
 8004558:	4628      	mov	r0, r5
 800455a:	f7fb ffeb 	bl	8000534 <__aeabi_i2d>
 800455e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004562:	f7fc f851 	bl	8000608 <__aeabi_dmul>
 8004566:	2200      	movs	r2, #0
 8004568:	4b84      	ldr	r3, [pc, #528]	; (800477c <_dtoa_r+0x604>)
 800456a:	f7fb fe97 	bl	800029c <__adddf3>
 800456e:	4605      	mov	r5, r0
 8004570:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004574:	2f00      	cmp	r7, #0
 8004576:	d15d      	bne.n	8004634 <_dtoa_r+0x4bc>
 8004578:	2200      	movs	r2, #0
 800457a:	4b81      	ldr	r3, [pc, #516]	; (8004780 <_dtoa_r+0x608>)
 800457c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004580:	f7fb fe8a 	bl	8000298 <__aeabi_dsub>
 8004584:	462a      	mov	r2, r5
 8004586:	4633      	mov	r3, r6
 8004588:	e9cd 0100 	strd	r0, r1, [sp]
 800458c:	f7fc facc 	bl	8000b28 <__aeabi_dcmpgt>
 8004590:	2800      	cmp	r0, #0
 8004592:	f040 8288 	bne.w	8004aa6 <_dtoa_r+0x92e>
 8004596:	462a      	mov	r2, r5
 8004598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800459c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045a0:	f7fc faa4 	bl	8000aec <__aeabi_dcmplt>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	f040 827c 	bne.w	8004aa2 <_dtoa_r+0x92a>
 80045aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045ae:	e9cd 2300 	strd	r2, r3, [sp]
 80045b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f2c0 8150 	blt.w	800485a <_dtoa_r+0x6e2>
 80045ba:	f1ba 0f0e 	cmp.w	sl, #14
 80045be:	f300 814c 	bgt.w	800485a <_dtoa_r+0x6e2>
 80045c2:	4b6a      	ldr	r3, [pc, #424]	; (800476c <_dtoa_r+0x5f4>)
 80045c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045c8:	ed93 7b00 	vldr	d7, [r3]
 80045cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045d4:	f280 80d8 	bge.w	8004788 <_dtoa_r+0x610>
 80045d8:	f1b9 0f00 	cmp.w	r9, #0
 80045dc:	f300 80d4 	bgt.w	8004788 <_dtoa_r+0x610>
 80045e0:	f040 825e 	bne.w	8004aa0 <_dtoa_r+0x928>
 80045e4:	2200      	movs	r2, #0
 80045e6:	4b66      	ldr	r3, [pc, #408]	; (8004780 <_dtoa_r+0x608>)
 80045e8:	ec51 0b17 	vmov	r0, r1, d7
 80045ec:	f7fc f80c 	bl	8000608 <__aeabi_dmul>
 80045f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045f4:	f7fc fa8e 	bl	8000b14 <__aeabi_dcmpge>
 80045f8:	464f      	mov	r7, r9
 80045fa:	464e      	mov	r6, r9
 80045fc:	2800      	cmp	r0, #0
 80045fe:	f040 8234 	bne.w	8004a6a <_dtoa_r+0x8f2>
 8004602:	2331      	movs	r3, #49	; 0x31
 8004604:	f10b 0501 	add.w	r5, fp, #1
 8004608:	f88b 3000 	strb.w	r3, [fp]
 800460c:	f10a 0a01 	add.w	sl, sl, #1
 8004610:	e22f      	b.n	8004a72 <_dtoa_r+0x8fa>
 8004612:	07f2      	lsls	r2, r6, #31
 8004614:	d505      	bpl.n	8004622 <_dtoa_r+0x4aa>
 8004616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461a:	f7fb fff5 	bl	8000608 <__aeabi_dmul>
 800461e:	3501      	adds	r5, #1
 8004620:	2301      	movs	r3, #1
 8004622:	1076      	asrs	r6, r6, #1
 8004624:	3708      	adds	r7, #8
 8004626:	e772      	b.n	800450e <_dtoa_r+0x396>
 8004628:	2502      	movs	r5, #2
 800462a:	e774      	b.n	8004516 <_dtoa_r+0x39e>
 800462c:	f8cd a020 	str.w	sl, [sp, #32]
 8004630:	464f      	mov	r7, r9
 8004632:	e791      	b.n	8004558 <_dtoa_r+0x3e0>
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <_dtoa_r+0x5f4>)
 8004636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800463a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800463e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d047      	beq.n	80046d4 <_dtoa_r+0x55c>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	2000      	movs	r0, #0
 800464a:	494e      	ldr	r1, [pc, #312]	; (8004784 <_dtoa_r+0x60c>)
 800464c:	f7fc f906 	bl	800085c <__aeabi_ddiv>
 8004650:	462a      	mov	r2, r5
 8004652:	4633      	mov	r3, r6
 8004654:	f7fb fe20 	bl	8000298 <__aeabi_dsub>
 8004658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800465c:	465d      	mov	r5, fp
 800465e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004662:	f7fc fa81 	bl	8000b68 <__aeabi_d2iz>
 8004666:	4606      	mov	r6, r0
 8004668:	f7fb ff64 	bl	8000534 <__aeabi_i2d>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004674:	f7fb fe10 	bl	8000298 <__aeabi_dsub>
 8004678:	3630      	adds	r6, #48	; 0x30
 800467a:	f805 6b01 	strb.w	r6, [r5], #1
 800467e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004682:	e9cd 0100 	strd	r0, r1, [sp]
 8004686:	f7fc fa31 	bl	8000aec <__aeabi_dcmplt>
 800468a:	2800      	cmp	r0, #0
 800468c:	d163      	bne.n	8004756 <_dtoa_r+0x5de>
 800468e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004692:	2000      	movs	r0, #0
 8004694:	4937      	ldr	r1, [pc, #220]	; (8004774 <_dtoa_r+0x5fc>)
 8004696:	f7fb fdff 	bl	8000298 <__aeabi_dsub>
 800469a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800469e:	f7fc fa25 	bl	8000aec <__aeabi_dcmplt>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f040 80b7 	bne.w	8004816 <_dtoa_r+0x69e>
 80046a8:	eba5 030b 	sub.w	r3, r5, fp
 80046ac:	429f      	cmp	r7, r3
 80046ae:	f77f af7c 	ble.w	80045aa <_dtoa_r+0x432>
 80046b2:	2200      	movs	r2, #0
 80046b4:	4b30      	ldr	r3, [pc, #192]	; (8004778 <_dtoa_r+0x600>)
 80046b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046ba:	f7fb ffa5 	bl	8000608 <__aeabi_dmul>
 80046be:	2200      	movs	r2, #0
 80046c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <_dtoa_r+0x600>)
 80046c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046ca:	f7fb ff9d 	bl	8000608 <__aeabi_dmul>
 80046ce:	e9cd 0100 	strd	r0, r1, [sp]
 80046d2:	e7c4      	b.n	800465e <_dtoa_r+0x4e6>
 80046d4:	462a      	mov	r2, r5
 80046d6:	4633      	mov	r3, r6
 80046d8:	f7fb ff96 	bl	8000608 <__aeabi_dmul>
 80046dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80046e0:	eb0b 0507 	add.w	r5, fp, r7
 80046e4:	465e      	mov	r6, fp
 80046e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046ea:	f7fc fa3d 	bl	8000b68 <__aeabi_d2iz>
 80046ee:	4607      	mov	r7, r0
 80046f0:	f7fb ff20 	bl	8000534 <__aeabi_i2d>
 80046f4:	3730      	adds	r7, #48	; 0x30
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046fe:	f7fb fdcb 	bl	8000298 <__aeabi_dsub>
 8004702:	f806 7b01 	strb.w	r7, [r6], #1
 8004706:	42ae      	cmp	r6, r5
 8004708:	e9cd 0100 	strd	r0, r1, [sp]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	d126      	bne.n	8004760 <_dtoa_r+0x5e8>
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <_dtoa_r+0x60c>)
 8004714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004718:	f7fb fdc0 	bl	800029c <__adddf3>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004724:	f7fc fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8004728:	2800      	cmp	r0, #0
 800472a:	d174      	bne.n	8004816 <_dtoa_r+0x69e>
 800472c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004730:	2000      	movs	r0, #0
 8004732:	4914      	ldr	r1, [pc, #80]	; (8004784 <_dtoa_r+0x60c>)
 8004734:	f7fb fdb0 	bl	8000298 <__aeabi_dsub>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004740:	f7fc f9d4 	bl	8000aec <__aeabi_dcmplt>
 8004744:	2800      	cmp	r0, #0
 8004746:	f43f af30 	beq.w	80045aa <_dtoa_r+0x432>
 800474a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800474e:	2b30      	cmp	r3, #48	; 0x30
 8004750:	f105 32ff 	add.w	r2, r5, #4294967295
 8004754:	d002      	beq.n	800475c <_dtoa_r+0x5e4>
 8004756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800475a:	e04a      	b.n	80047f2 <_dtoa_r+0x67a>
 800475c:	4615      	mov	r5, r2
 800475e:	e7f4      	b.n	800474a <_dtoa_r+0x5d2>
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <_dtoa_r+0x600>)
 8004762:	f7fb ff51 	bl	8000608 <__aeabi_dmul>
 8004766:	e9cd 0100 	strd	r0, r1, [sp]
 800476a:	e7bc      	b.n	80046e6 <_dtoa_r+0x56e>
 800476c:	08005ed0 	.word	0x08005ed0
 8004770:	08005ea8 	.word	0x08005ea8
 8004774:	3ff00000 	.word	0x3ff00000
 8004778:	40240000 	.word	0x40240000
 800477c:	401c0000 	.word	0x401c0000
 8004780:	40140000 	.word	0x40140000
 8004784:	3fe00000 	.word	0x3fe00000
 8004788:	e9dd 6700 	ldrd	r6, r7, [sp]
 800478c:	465d      	mov	r5, fp
 800478e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004792:	4630      	mov	r0, r6
 8004794:	4639      	mov	r1, r7
 8004796:	f7fc f861 	bl	800085c <__aeabi_ddiv>
 800479a:	f7fc f9e5 	bl	8000b68 <__aeabi_d2iz>
 800479e:	4680      	mov	r8, r0
 80047a0:	f7fb fec8 	bl	8000534 <__aeabi_i2d>
 80047a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047a8:	f7fb ff2e 	bl	8000608 <__aeabi_dmul>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80047b8:	f7fb fd6e 	bl	8000298 <__aeabi_dsub>
 80047bc:	f805 6b01 	strb.w	r6, [r5], #1
 80047c0:	eba5 060b 	sub.w	r6, r5, fp
 80047c4:	45b1      	cmp	r9, r6
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	d139      	bne.n	8004840 <_dtoa_r+0x6c8>
 80047cc:	f7fb fd66 	bl	800029c <__adddf3>
 80047d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047d4:	4606      	mov	r6, r0
 80047d6:	460f      	mov	r7, r1
 80047d8:	f7fc f9a6 	bl	8000b28 <__aeabi_dcmpgt>
 80047dc:	b9c8      	cbnz	r0, 8004812 <_dtoa_r+0x69a>
 80047de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047e2:	4630      	mov	r0, r6
 80047e4:	4639      	mov	r1, r7
 80047e6:	f7fc f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80047ea:	b110      	cbz	r0, 80047f2 <_dtoa_r+0x67a>
 80047ec:	f018 0f01 	tst.w	r8, #1
 80047f0:	d10f      	bne.n	8004812 <_dtoa_r+0x69a>
 80047f2:	9904      	ldr	r1, [sp, #16]
 80047f4:	4620      	mov	r0, r4
 80047f6:	f000 fc9f 	bl	8005138 <_Bfree>
 80047fa:	2300      	movs	r3, #0
 80047fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047fe:	702b      	strb	r3, [r5, #0]
 8004800:	f10a 0301 	add.w	r3, sl, #1
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8241 	beq.w	8004c90 <_dtoa_r+0xb18>
 800480e:	601d      	str	r5, [r3, #0]
 8004810:	e23e      	b.n	8004c90 <_dtoa_r+0xb18>
 8004812:	f8cd a020 	str.w	sl, [sp, #32]
 8004816:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800481a:	2a39      	cmp	r2, #57	; 0x39
 800481c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004820:	d108      	bne.n	8004834 <_dtoa_r+0x6bc>
 8004822:	459b      	cmp	fp, r3
 8004824:	d10a      	bne.n	800483c <_dtoa_r+0x6c4>
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	3301      	adds	r3, #1
 800482a:	9308      	str	r3, [sp, #32]
 800482c:	2330      	movs	r3, #48	; 0x30
 800482e:	f88b 3000 	strb.w	r3, [fp]
 8004832:	465b      	mov	r3, fp
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	3201      	adds	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e78c      	b.n	8004756 <_dtoa_r+0x5de>
 800483c:	461d      	mov	r5, r3
 800483e:	e7ea      	b.n	8004816 <_dtoa_r+0x69e>
 8004840:	2200      	movs	r2, #0
 8004842:	4b9b      	ldr	r3, [pc, #620]	; (8004ab0 <_dtoa_r+0x938>)
 8004844:	f7fb fee0 	bl	8000608 <__aeabi_dmul>
 8004848:	2200      	movs	r2, #0
 800484a:	2300      	movs	r3, #0
 800484c:	4606      	mov	r6, r0
 800484e:	460f      	mov	r7, r1
 8004850:	f7fc f942 	bl	8000ad8 <__aeabi_dcmpeq>
 8004854:	2800      	cmp	r0, #0
 8004856:	d09a      	beq.n	800478e <_dtoa_r+0x616>
 8004858:	e7cb      	b.n	80047f2 <_dtoa_r+0x67a>
 800485a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485c:	2a00      	cmp	r2, #0
 800485e:	f000 808b 	beq.w	8004978 <_dtoa_r+0x800>
 8004862:	9a06      	ldr	r2, [sp, #24]
 8004864:	2a01      	cmp	r2, #1
 8004866:	dc6e      	bgt.n	8004946 <_dtoa_r+0x7ce>
 8004868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800486a:	2a00      	cmp	r2, #0
 800486c:	d067      	beq.n	800493e <_dtoa_r+0x7c6>
 800486e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004872:	9f07      	ldr	r7, [sp, #28]
 8004874:	9d05      	ldr	r5, [sp, #20]
 8004876:	9a05      	ldr	r2, [sp, #20]
 8004878:	2101      	movs	r1, #1
 800487a:	441a      	add	r2, r3
 800487c:	4620      	mov	r0, r4
 800487e:	9205      	str	r2, [sp, #20]
 8004880:	4498      	add	r8, r3
 8004882:	f000 fcf9 	bl	8005278 <__i2b>
 8004886:	4606      	mov	r6, r0
 8004888:	2d00      	cmp	r5, #0
 800488a:	dd0c      	ble.n	80048a6 <_dtoa_r+0x72e>
 800488c:	f1b8 0f00 	cmp.w	r8, #0
 8004890:	dd09      	ble.n	80048a6 <_dtoa_r+0x72e>
 8004892:	4545      	cmp	r5, r8
 8004894:	9a05      	ldr	r2, [sp, #20]
 8004896:	462b      	mov	r3, r5
 8004898:	bfa8      	it	ge
 800489a:	4643      	movge	r3, r8
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	9205      	str	r2, [sp, #20]
 80048a0:	1aed      	subs	r5, r5, r3
 80048a2:	eba8 0803 	sub.w	r8, r8, r3
 80048a6:	9b07      	ldr	r3, [sp, #28]
 80048a8:	b1eb      	cbz	r3, 80048e6 <_dtoa_r+0x76e>
 80048aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d067      	beq.n	8004980 <_dtoa_r+0x808>
 80048b0:	b18f      	cbz	r7, 80048d6 <_dtoa_r+0x75e>
 80048b2:	4631      	mov	r1, r6
 80048b4:	463a      	mov	r2, r7
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fd7e 	bl	80053b8 <__pow5mult>
 80048bc:	9a04      	ldr	r2, [sp, #16]
 80048be:	4601      	mov	r1, r0
 80048c0:	4606      	mov	r6, r0
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 fce1 	bl	800528a <__multiply>
 80048c8:	9904      	ldr	r1, [sp, #16]
 80048ca:	9008      	str	r0, [sp, #32]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 fc33 	bl	8005138 <_Bfree>
 80048d2:	9b08      	ldr	r3, [sp, #32]
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	9b07      	ldr	r3, [sp, #28]
 80048d8:	1bda      	subs	r2, r3, r7
 80048da:	d004      	beq.n	80048e6 <_dtoa_r+0x76e>
 80048dc:	9904      	ldr	r1, [sp, #16]
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 fd6a 	bl	80053b8 <__pow5mult>
 80048e4:	9004      	str	r0, [sp, #16]
 80048e6:	2101      	movs	r1, #1
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 fcc5 	bl	8005278 <__i2b>
 80048ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f0:	4607      	mov	r7, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 81d0 	beq.w	8004c98 <_dtoa_r+0xb20>
 80048f8:	461a      	mov	r2, r3
 80048fa:	4601      	mov	r1, r0
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 fd5b 	bl	80053b8 <__pow5mult>
 8004902:	9b06      	ldr	r3, [sp, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	4607      	mov	r7, r0
 8004908:	dc40      	bgt.n	800498c <_dtoa_r+0x814>
 800490a:	9b00      	ldr	r3, [sp, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d139      	bne.n	8004984 <_dtoa_r+0x80c>
 8004910:	9b01      	ldr	r3, [sp, #4]
 8004912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004916:	2b00      	cmp	r3, #0
 8004918:	d136      	bne.n	8004988 <_dtoa_r+0x810>
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	051b      	lsls	r3, r3, #20
 8004924:	b12b      	cbz	r3, 8004932 <_dtoa_r+0x7ba>
 8004926:	9b05      	ldr	r3, [sp, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	9305      	str	r3, [sp, #20]
 800492c:	f108 0801 	add.w	r8, r8, #1
 8004930:	2301      	movs	r3, #1
 8004932:	9307      	str	r3, [sp, #28]
 8004934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d12a      	bne.n	8004990 <_dtoa_r+0x818>
 800493a:	2001      	movs	r0, #1
 800493c:	e030      	b.n	80049a0 <_dtoa_r+0x828>
 800493e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004940:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004944:	e795      	b.n	8004872 <_dtoa_r+0x6fa>
 8004946:	9b07      	ldr	r3, [sp, #28]
 8004948:	f109 37ff 	add.w	r7, r9, #4294967295
 800494c:	42bb      	cmp	r3, r7
 800494e:	bfbf      	itttt	lt
 8004950:	9b07      	ldrlt	r3, [sp, #28]
 8004952:	9707      	strlt	r7, [sp, #28]
 8004954:	1afa      	sublt	r2, r7, r3
 8004956:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004958:	bfbb      	ittet	lt
 800495a:	189b      	addlt	r3, r3, r2
 800495c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800495e:	1bdf      	subge	r7, r3, r7
 8004960:	2700      	movlt	r7, #0
 8004962:	f1b9 0f00 	cmp.w	r9, #0
 8004966:	bfb5      	itete	lt
 8004968:	9b05      	ldrlt	r3, [sp, #20]
 800496a:	9d05      	ldrge	r5, [sp, #20]
 800496c:	eba3 0509 	sublt.w	r5, r3, r9
 8004970:	464b      	movge	r3, r9
 8004972:	bfb8      	it	lt
 8004974:	2300      	movlt	r3, #0
 8004976:	e77e      	b.n	8004876 <_dtoa_r+0x6fe>
 8004978:	9f07      	ldr	r7, [sp, #28]
 800497a:	9d05      	ldr	r5, [sp, #20]
 800497c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800497e:	e783      	b.n	8004888 <_dtoa_r+0x710>
 8004980:	9a07      	ldr	r2, [sp, #28]
 8004982:	e7ab      	b.n	80048dc <_dtoa_r+0x764>
 8004984:	2300      	movs	r3, #0
 8004986:	e7d4      	b.n	8004932 <_dtoa_r+0x7ba>
 8004988:	9b00      	ldr	r3, [sp, #0]
 800498a:	e7d2      	b.n	8004932 <_dtoa_r+0x7ba>
 800498c:	2300      	movs	r3, #0
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004996:	6918      	ldr	r0, [r3, #16]
 8004998:	f000 fc20 	bl	80051dc <__hi0bits>
 800499c:	f1c0 0020 	rsb	r0, r0, #32
 80049a0:	4440      	add	r0, r8
 80049a2:	f010 001f 	ands.w	r0, r0, #31
 80049a6:	d047      	beq.n	8004a38 <_dtoa_r+0x8c0>
 80049a8:	f1c0 0320 	rsb	r3, r0, #32
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	dd3b      	ble.n	8004a28 <_dtoa_r+0x8b0>
 80049b0:	9b05      	ldr	r3, [sp, #20]
 80049b2:	f1c0 001c 	rsb	r0, r0, #28
 80049b6:	4403      	add	r3, r0
 80049b8:	9305      	str	r3, [sp, #20]
 80049ba:	4405      	add	r5, r0
 80049bc:	4480      	add	r8, r0
 80049be:	9b05      	ldr	r3, [sp, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	dd05      	ble.n	80049d0 <_dtoa_r+0x858>
 80049c4:	461a      	mov	r2, r3
 80049c6:	9904      	ldr	r1, [sp, #16]
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fd43 	bl	8005454 <__lshift>
 80049ce:	9004      	str	r0, [sp, #16]
 80049d0:	f1b8 0f00 	cmp.w	r8, #0
 80049d4:	dd05      	ble.n	80049e2 <_dtoa_r+0x86a>
 80049d6:	4639      	mov	r1, r7
 80049d8:	4642      	mov	r2, r8
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 fd3a 	bl	8005454 <__lshift>
 80049e0:	4607      	mov	r7, r0
 80049e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049e4:	b353      	cbz	r3, 8004a3c <_dtoa_r+0x8c4>
 80049e6:	4639      	mov	r1, r7
 80049e8:	9804      	ldr	r0, [sp, #16]
 80049ea:	f000 fd87 	bl	80054fc <__mcmp>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	da24      	bge.n	8004a3c <_dtoa_r+0x8c4>
 80049f2:	2300      	movs	r3, #0
 80049f4:	220a      	movs	r2, #10
 80049f6:	9904      	ldr	r1, [sp, #16]
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 fbb4 	bl	8005166 <__multadd>
 80049fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a00:	9004      	str	r0, [sp, #16]
 8004a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 814d 	beq.w	8004ca6 <_dtoa_r+0xb2e>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4631      	mov	r1, r6
 8004a10:	220a      	movs	r2, #10
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 fba7 	bl	8005166 <__multadd>
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	dc4f      	bgt.n	8004ac0 <_dtoa_r+0x948>
 8004a20:	9b06      	ldr	r3, [sp, #24]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	dd4c      	ble.n	8004ac0 <_dtoa_r+0x948>
 8004a26:	e011      	b.n	8004a4c <_dtoa_r+0x8d4>
 8004a28:	d0c9      	beq.n	80049be <_dtoa_r+0x846>
 8004a2a:	9a05      	ldr	r2, [sp, #20]
 8004a2c:	331c      	adds	r3, #28
 8004a2e:	441a      	add	r2, r3
 8004a30:	9205      	str	r2, [sp, #20]
 8004a32:	441d      	add	r5, r3
 8004a34:	4498      	add	r8, r3
 8004a36:	e7c2      	b.n	80049be <_dtoa_r+0x846>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	e7f6      	b.n	8004a2a <_dtoa_r+0x8b2>
 8004a3c:	f1b9 0f00 	cmp.w	r9, #0
 8004a40:	dc38      	bgt.n	8004ab4 <_dtoa_r+0x93c>
 8004a42:	9b06      	ldr	r3, [sp, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	dd35      	ble.n	8004ab4 <_dtoa_r+0x93c>
 8004a48:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a4c:	9b02      	ldr	r3, [sp, #8]
 8004a4e:	b963      	cbnz	r3, 8004a6a <_dtoa_r+0x8f2>
 8004a50:	4639      	mov	r1, r7
 8004a52:	2205      	movs	r2, #5
 8004a54:	4620      	mov	r0, r4
 8004a56:	f000 fb86 	bl	8005166 <__multadd>
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	9804      	ldr	r0, [sp, #16]
 8004a60:	f000 fd4c 	bl	80054fc <__mcmp>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f73f adcc 	bgt.w	8004602 <_dtoa_r+0x48a>
 8004a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a6c:	465d      	mov	r5, fp
 8004a6e:	ea6f 0a03 	mvn.w	sl, r3
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	4639      	mov	r1, r7
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fb5d 	bl	8005138 <_Bfree>
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	f43f aeb7 	beq.w	80047f2 <_dtoa_r+0x67a>
 8004a84:	f1b9 0f00 	cmp.w	r9, #0
 8004a88:	d005      	beq.n	8004a96 <_dtoa_r+0x91e>
 8004a8a:	45b1      	cmp	r9, r6
 8004a8c:	d003      	beq.n	8004a96 <_dtoa_r+0x91e>
 8004a8e:	4649      	mov	r1, r9
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fb51 	bl	8005138 <_Bfree>
 8004a96:	4631      	mov	r1, r6
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 fb4d 	bl	8005138 <_Bfree>
 8004a9e:	e6a8      	b.n	80047f2 <_dtoa_r+0x67a>
 8004aa0:	2700      	movs	r7, #0
 8004aa2:	463e      	mov	r6, r7
 8004aa4:	e7e1      	b.n	8004a6a <_dtoa_r+0x8f2>
 8004aa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004aaa:	463e      	mov	r6, r7
 8004aac:	e5a9      	b.n	8004602 <_dtoa_r+0x48a>
 8004aae:	bf00      	nop
 8004ab0:	40240000 	.word	0x40240000
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab6:	f8cd 9008 	str.w	r9, [sp, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80fa 	beq.w	8004cb4 <_dtoa_r+0xb3c>
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	dd05      	ble.n	8004ad0 <_dtoa_r+0x958>
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fcc3 	bl	8005454 <__lshift>
 8004ace:	4606      	mov	r6, r0
 8004ad0:	9b07      	ldr	r3, [sp, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04c      	beq.n	8004b70 <_dtoa_r+0x9f8>
 8004ad6:	6871      	ldr	r1, [r6, #4]
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f000 faf9 	bl	80050d0 <_Balloc>
 8004ade:	6932      	ldr	r2, [r6, #16]
 8004ae0:	3202      	adds	r2, #2
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	f106 010c 	add.w	r1, r6, #12
 8004aea:	300c      	adds	r0, #12
 8004aec:	f7fe fcf6 	bl	80034dc <memcpy>
 8004af0:	2201      	movs	r2, #1
 8004af2:	4629      	mov	r1, r5
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 fcad 	bl	8005454 <__lshift>
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	f8cd b014 	str.w	fp, [sp, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	46b1      	mov	r9, r6
 8004b06:	9307      	str	r3, [sp, #28]
 8004b08:	4606      	mov	r6, r0
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	9804      	ldr	r0, [sp, #16]
 8004b0e:	f7ff faa5 	bl	800405c <quorem>
 8004b12:	4649      	mov	r1, r9
 8004b14:	4605      	mov	r5, r0
 8004b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004b1a:	9804      	ldr	r0, [sp, #16]
 8004b1c:	f000 fcee 	bl	80054fc <__mcmp>
 8004b20:	4632      	mov	r2, r6
 8004b22:	9000      	str	r0, [sp, #0]
 8004b24:	4639      	mov	r1, r7
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fd02 	bl	8005530 <__mdiff>
 8004b2c:	68c3      	ldr	r3, [r0, #12]
 8004b2e:	4602      	mov	r2, r0
 8004b30:	bb03      	cbnz	r3, 8004b74 <_dtoa_r+0x9fc>
 8004b32:	4601      	mov	r1, r0
 8004b34:	9008      	str	r0, [sp, #32]
 8004b36:	9804      	ldr	r0, [sp, #16]
 8004b38:	f000 fce0 	bl	80054fc <__mcmp>
 8004b3c:	9a08      	ldr	r2, [sp, #32]
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4611      	mov	r1, r2
 8004b42:	4620      	mov	r0, r4
 8004b44:	9308      	str	r3, [sp, #32]
 8004b46:	f000 faf7 	bl	8005138 <_Bfree>
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	b9a3      	cbnz	r3, 8004b78 <_dtoa_r+0xa00>
 8004b4e:	9a06      	ldr	r2, [sp, #24]
 8004b50:	b992      	cbnz	r2, 8004b78 <_dtoa_r+0xa00>
 8004b52:	9a07      	ldr	r2, [sp, #28]
 8004b54:	b982      	cbnz	r2, 8004b78 <_dtoa_r+0xa00>
 8004b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b5a:	d029      	beq.n	8004bb0 <_dtoa_r+0xa38>
 8004b5c:	9b00      	ldr	r3, [sp, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dd01      	ble.n	8004b66 <_dtoa_r+0x9ee>
 8004b62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004b66:	9b05      	ldr	r3, [sp, #20]
 8004b68:	1c5d      	adds	r5, r3, #1
 8004b6a:	f883 8000 	strb.w	r8, [r3]
 8004b6e:	e782      	b.n	8004a76 <_dtoa_r+0x8fe>
 8004b70:	4630      	mov	r0, r6
 8004b72:	e7c2      	b.n	8004afa <_dtoa_r+0x982>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e7e3      	b.n	8004b40 <_dtoa_r+0x9c8>
 8004b78:	9a00      	ldr	r2, [sp, #0]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	db04      	blt.n	8004b88 <_dtoa_r+0xa10>
 8004b7e:	d125      	bne.n	8004bcc <_dtoa_r+0xa54>
 8004b80:	9a06      	ldr	r2, [sp, #24]
 8004b82:	bb1a      	cbnz	r2, 8004bcc <_dtoa_r+0xa54>
 8004b84:	9a07      	ldr	r2, [sp, #28]
 8004b86:	bb0a      	cbnz	r2, 8004bcc <_dtoa_r+0xa54>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	ddec      	ble.n	8004b66 <_dtoa_r+0x9ee>
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	9904      	ldr	r1, [sp, #16]
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 fc5f 	bl	8005454 <__lshift>
 8004b96:	4639      	mov	r1, r7
 8004b98:	9004      	str	r0, [sp, #16]
 8004b9a:	f000 fcaf 	bl	80054fc <__mcmp>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	dc03      	bgt.n	8004baa <_dtoa_r+0xa32>
 8004ba2:	d1e0      	bne.n	8004b66 <_dtoa_r+0x9ee>
 8004ba4:	f018 0f01 	tst.w	r8, #1
 8004ba8:	d0dd      	beq.n	8004b66 <_dtoa_r+0x9ee>
 8004baa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004bae:	d1d8      	bne.n	8004b62 <_dtoa_r+0x9ea>
 8004bb0:	9b05      	ldr	r3, [sp, #20]
 8004bb2:	9a05      	ldr	r2, [sp, #20]
 8004bb4:	1c5d      	adds	r5, r3, #1
 8004bb6:	2339      	movs	r3, #57	; 0x39
 8004bb8:	7013      	strb	r3, [r2, #0]
 8004bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bbe:	2b39      	cmp	r3, #57	; 0x39
 8004bc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8004bc4:	d04f      	beq.n	8004c66 <_dtoa_r+0xaee>
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	7013      	strb	r3, [r2, #0]
 8004bca:	e754      	b.n	8004a76 <_dtoa_r+0x8fe>
 8004bcc:	9a05      	ldr	r2, [sp, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f102 0501 	add.w	r5, r2, #1
 8004bd4:	dd06      	ble.n	8004be4 <_dtoa_r+0xa6c>
 8004bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004bda:	d0e9      	beq.n	8004bb0 <_dtoa_r+0xa38>
 8004bdc:	f108 0801 	add.w	r8, r8, #1
 8004be0:	9b05      	ldr	r3, [sp, #20]
 8004be2:	e7c2      	b.n	8004b6a <_dtoa_r+0x9f2>
 8004be4:	9a02      	ldr	r2, [sp, #8]
 8004be6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004bea:	eba5 030b 	sub.w	r3, r5, fp
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d021      	beq.n	8004c36 <_dtoa_r+0xabe>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	220a      	movs	r2, #10
 8004bf6:	9904      	ldr	r1, [sp, #16]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fab4 	bl	8005166 <__multadd>
 8004bfe:	45b1      	cmp	r9, r6
 8004c00:	9004      	str	r0, [sp, #16]
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f04f 020a 	mov.w	r2, #10
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	d105      	bne.n	8004c1c <_dtoa_r+0xaa4>
 8004c10:	f000 faa9 	bl	8005166 <__multadd>
 8004c14:	4681      	mov	r9, r0
 8004c16:	4606      	mov	r6, r0
 8004c18:	9505      	str	r5, [sp, #20]
 8004c1a:	e776      	b.n	8004b0a <_dtoa_r+0x992>
 8004c1c:	f000 faa3 	bl	8005166 <__multadd>
 8004c20:	4631      	mov	r1, r6
 8004c22:	4681      	mov	r9, r0
 8004c24:	2300      	movs	r3, #0
 8004c26:	220a      	movs	r2, #10
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 fa9c 	bl	8005166 <__multadd>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	e7f2      	b.n	8004c18 <_dtoa_r+0xaa0>
 8004c32:	f04f 0900 	mov.w	r9, #0
 8004c36:	2201      	movs	r2, #1
 8004c38:	9904      	ldr	r1, [sp, #16]
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fc0a 	bl	8005454 <__lshift>
 8004c40:	4639      	mov	r1, r7
 8004c42:	9004      	str	r0, [sp, #16]
 8004c44:	f000 fc5a 	bl	80054fc <__mcmp>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	dcb6      	bgt.n	8004bba <_dtoa_r+0xa42>
 8004c4c:	d102      	bne.n	8004c54 <_dtoa_r+0xadc>
 8004c4e:	f018 0f01 	tst.w	r8, #1
 8004c52:	d1b2      	bne.n	8004bba <_dtoa_r+0xa42>
 8004c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c58:	2b30      	cmp	r3, #48	; 0x30
 8004c5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8004c5e:	f47f af0a 	bne.w	8004a76 <_dtoa_r+0x8fe>
 8004c62:	4615      	mov	r5, r2
 8004c64:	e7f6      	b.n	8004c54 <_dtoa_r+0xadc>
 8004c66:	4593      	cmp	fp, r2
 8004c68:	d105      	bne.n	8004c76 <_dtoa_r+0xafe>
 8004c6a:	2331      	movs	r3, #49	; 0x31
 8004c6c:	f10a 0a01 	add.w	sl, sl, #1
 8004c70:	f88b 3000 	strb.w	r3, [fp]
 8004c74:	e6ff      	b.n	8004a76 <_dtoa_r+0x8fe>
 8004c76:	4615      	mov	r5, r2
 8004c78:	e79f      	b.n	8004bba <_dtoa_r+0xa42>
 8004c7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004ce0 <_dtoa_r+0xb68>
 8004c7e:	e007      	b.n	8004c90 <_dtoa_r+0xb18>
 8004c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004ce4 <_dtoa_r+0xb6c>
 8004c86:	b11b      	cbz	r3, 8004c90 <_dtoa_r+0xb18>
 8004c88:	f10b 0308 	add.w	r3, fp, #8
 8004c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4658      	mov	r0, fp
 8004c92:	b017      	add	sp, #92	; 0x5c
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	9b06      	ldr	r3, [sp, #24]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	f77f ae35 	ble.w	800490a <_dtoa_r+0x792>
 8004ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca2:	9307      	str	r3, [sp, #28]
 8004ca4:	e649      	b.n	800493a <_dtoa_r+0x7c2>
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dc03      	bgt.n	8004cb4 <_dtoa_r+0xb3c>
 8004cac:	9b06      	ldr	r3, [sp, #24]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	f73f aecc 	bgt.w	8004a4c <_dtoa_r+0x8d4>
 8004cb4:	465d      	mov	r5, fp
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	9804      	ldr	r0, [sp, #16]
 8004cba:	f7ff f9cf 	bl	800405c <quorem>
 8004cbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004cc2:	f805 8b01 	strb.w	r8, [r5], #1
 8004cc6:	9a02      	ldr	r2, [sp, #8]
 8004cc8:	eba5 030b 	sub.w	r3, r5, fp
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	ddb0      	ble.n	8004c32 <_dtoa_r+0xaba>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	220a      	movs	r2, #10
 8004cd4:	9904      	ldr	r1, [sp, #16]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 fa45 	bl	8005166 <__multadd>
 8004cdc:	9004      	str	r0, [sp, #16]
 8004cde:	e7ea      	b.n	8004cb6 <_dtoa_r+0xb3e>
 8004ce0:	08005e14 	.word	0x08005e14
 8004ce4:	08005e38 	.word	0x08005e38

08004ce8 <__sflush_r>:
 8004ce8:	898a      	ldrh	r2, [r1, #12]
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	4605      	mov	r5, r0
 8004cf0:	0710      	lsls	r0, r2, #28
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	d458      	bmi.n	8004da8 <__sflush_r+0xc0>
 8004cf6:	684b      	ldr	r3, [r1, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dc05      	bgt.n	8004d08 <__sflush_r+0x20>
 8004cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dc02      	bgt.n	8004d08 <__sflush_r+0x20>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d0f9      	beq.n	8004d02 <__sflush_r+0x1a>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d14:	682f      	ldr	r7, [r5, #0]
 8004d16:	6a21      	ldr	r1, [r4, #32]
 8004d18:	602b      	str	r3, [r5, #0]
 8004d1a:	d032      	beq.n	8004d82 <__sflush_r+0x9a>
 8004d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	075a      	lsls	r2, r3, #29
 8004d22:	d505      	bpl.n	8004d30 <__sflush_r+0x48>
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	1ac0      	subs	r0, r0, r3
 8004d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d2a:	b10b      	cbz	r3, 8004d30 <__sflush_r+0x48>
 8004d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d2e:	1ac0      	subs	r0, r0, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	4602      	mov	r2, r0
 8004d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d36:	6a21      	ldr	r1, [r4, #32]
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b0      	blx	r6
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	d106      	bne.n	8004d50 <__sflush_r+0x68>
 8004d42:	6829      	ldr	r1, [r5, #0]
 8004d44:	291d      	cmp	r1, #29
 8004d46:	d848      	bhi.n	8004dda <__sflush_r+0xf2>
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <__sflush_r+0x108>)
 8004d4a:	40ca      	lsrs	r2, r1
 8004d4c:	07d6      	lsls	r6, r2, #31
 8004d4e:	d544      	bpl.n	8004dda <__sflush_r+0xf2>
 8004d50:	2200      	movs	r2, #0
 8004d52:	6062      	str	r2, [r4, #4]
 8004d54:	04d9      	lsls	r1, r3, #19
 8004d56:	6922      	ldr	r2, [r4, #16]
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	d504      	bpl.n	8004d66 <__sflush_r+0x7e>
 8004d5c:	1c42      	adds	r2, r0, #1
 8004d5e:	d101      	bne.n	8004d64 <__sflush_r+0x7c>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b903      	cbnz	r3, 8004d66 <__sflush_r+0x7e>
 8004d64:	6560      	str	r0, [r4, #84]	; 0x54
 8004d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d68:	602f      	str	r7, [r5, #0]
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	d0c9      	beq.n	8004d02 <__sflush_r+0x1a>
 8004d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d72:	4299      	cmp	r1, r3
 8004d74:	d002      	beq.n	8004d7c <__sflush_r+0x94>
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fc94 	bl	80056a4 <_free_r>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8004d80:	e7c0      	b.n	8004d04 <__sflush_r+0x1c>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b0      	blx	r6
 8004d88:	1c41      	adds	r1, r0, #1
 8004d8a:	d1c8      	bne.n	8004d1e <__sflush_r+0x36>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0c5      	beq.n	8004d1e <__sflush_r+0x36>
 8004d92:	2b1d      	cmp	r3, #29
 8004d94:	d001      	beq.n	8004d9a <__sflush_r+0xb2>
 8004d96:	2b16      	cmp	r3, #22
 8004d98:	d101      	bne.n	8004d9e <__sflush_r+0xb6>
 8004d9a:	602f      	str	r7, [r5, #0]
 8004d9c:	e7b1      	b.n	8004d02 <__sflush_r+0x1a>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	e7ad      	b.n	8004d04 <__sflush_r+0x1c>
 8004da8:	690f      	ldr	r7, [r1, #16]
 8004daa:	2f00      	cmp	r7, #0
 8004dac:	d0a9      	beq.n	8004d02 <__sflush_r+0x1a>
 8004dae:	0793      	lsls	r3, r2, #30
 8004db0:	680e      	ldr	r6, [r1, #0]
 8004db2:	bf08      	it	eq
 8004db4:	694b      	ldreq	r3, [r1, #20]
 8004db6:	600f      	str	r7, [r1, #0]
 8004db8:	bf18      	it	ne
 8004dba:	2300      	movne	r3, #0
 8004dbc:	eba6 0807 	sub.w	r8, r6, r7
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	f1b8 0f00 	cmp.w	r8, #0
 8004dc6:	dd9c      	ble.n	8004d02 <__sflush_r+0x1a>
 8004dc8:	4643      	mov	r3, r8
 8004dca:	463a      	mov	r2, r7
 8004dcc:	6a21      	ldr	r1, [r4, #32]
 8004dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b0      	blx	r6
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	dc06      	bgt.n	8004de6 <__sflush_r+0xfe>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e78e      	b.n	8004d04 <__sflush_r+0x1c>
 8004de6:	4407      	add	r7, r0
 8004de8:	eba8 0800 	sub.w	r8, r8, r0
 8004dec:	e7e9      	b.n	8004dc2 <__sflush_r+0xda>
 8004dee:	bf00      	nop
 8004df0:	20400001 	.word	0x20400001

08004df4 <_fflush_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	b1db      	cbz	r3, 8004e36 <_fflush_r+0x42>
 8004dfe:	b118      	cbz	r0, 8004e08 <_fflush_r+0x14>
 8004e00:	6983      	ldr	r3, [r0, #24]
 8004e02:	b90b      	cbnz	r3, 8004e08 <_fflush_r+0x14>
 8004e04:	f000 f860 	bl	8004ec8 <__sinit>
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <_fflush_r+0x48>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d109      	bne.n	8004e22 <_fflush_r+0x2e>
 8004e0e:	686c      	ldr	r4, [r5, #4]
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	b17b      	cbz	r3, 8004e36 <_fflush_r+0x42>
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e1e:	f7ff bf63 	b.w	8004ce8 <__sflush_r>
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <_fflush_r+0x4c>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	d101      	bne.n	8004e2c <_fflush_r+0x38>
 8004e28:	68ac      	ldr	r4, [r5, #8]
 8004e2a:	e7f1      	b.n	8004e10 <_fflush_r+0x1c>
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <_fflush_r+0x50>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	bf08      	it	eq
 8004e32:	68ec      	ldreq	r4, [r5, #12]
 8004e34:	e7ec      	b.n	8004e10 <_fflush_r+0x1c>
 8004e36:	2000      	movs	r0, #0
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	08005e68 	.word	0x08005e68
 8004e40:	08005e88 	.word	0x08005e88
 8004e44:	08005e48 	.word	0x08005e48

08004e48 <std>:
 8004e48:	2300      	movs	r3, #0
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	8181      	strh	r1, [r0, #12]
 8004e56:	6643      	str	r3, [r0, #100]	; 0x64
 8004e58:	81c2      	strh	r2, [r0, #14]
 8004e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e5e:	6183      	str	r3, [r0, #24]
 8004e60:	4619      	mov	r1, r3
 8004e62:	2208      	movs	r2, #8
 8004e64:	305c      	adds	r0, #92	; 0x5c
 8004e66:	f7fe fb44 	bl	80034f2 <memset>
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <std+0x38>)
 8004e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x3c>)
 8004e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <std+0x40>)
 8004e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <std+0x44>)
 8004e78:	6224      	str	r4, [r4, #32]
 8004e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	bf00      	nop
 8004e80:	08005b01 	.word	0x08005b01
 8004e84:	08005b23 	.word	0x08005b23
 8004e88:	08005b5b 	.word	0x08005b5b
 8004e8c:	08005b7f 	.word	0x08005b7f

08004e90 <_cleanup_r>:
 8004e90:	4901      	ldr	r1, [pc, #4]	; (8004e98 <_cleanup_r+0x8>)
 8004e92:	f000 b885 	b.w	8004fa0 <_fwalk_reent>
 8004e96:	bf00      	nop
 8004e98:	08004df5 	.word	0x08004df5

08004e9c <__sfmoreglue>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	1e4a      	subs	r2, r1, #1
 8004ea0:	2568      	movs	r5, #104	; 0x68
 8004ea2:	4355      	muls	r5, r2
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eaa:	f000 fc49 	bl	8005740 <_malloc_r>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	b140      	cbz	r0, 8004ec4 <__sfmoreglue+0x28>
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8004eb8:	300c      	adds	r0, #12
 8004eba:	60a0      	str	r0, [r4, #8]
 8004ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ec0:	f7fe fb17 	bl	80034f2 <memset>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}

08004ec8 <__sinit>:
 8004ec8:	6983      	ldr	r3, [r0, #24]
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	4604      	mov	r4, r0
 8004ece:	bb33      	cbnz	r3, 8004f1e <__sinit+0x56>
 8004ed0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ed4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <__sinit+0x58>)
 8004ed8:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <__sinit+0x5c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6282      	str	r2, [r0, #40]	; 0x28
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	bf04      	itt	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	6183      	streq	r3, [r0, #24]
 8004ee6:	f000 f81f 	bl	8004f28 <__sfp>
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 f81b 	bl	8004f28 <__sfp>
 8004ef2:	60a0      	str	r0, [r4, #8]
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 f817 	bl	8004f28 <__sfp>
 8004efa:	2200      	movs	r2, #0
 8004efc:	60e0      	str	r0, [r4, #12]
 8004efe:	2104      	movs	r1, #4
 8004f00:	6860      	ldr	r0, [r4, #4]
 8004f02:	f7ff ffa1 	bl	8004e48 <std>
 8004f06:	2201      	movs	r2, #1
 8004f08:	2109      	movs	r1, #9
 8004f0a:	68a0      	ldr	r0, [r4, #8]
 8004f0c:	f7ff ff9c 	bl	8004e48 <std>
 8004f10:	2202      	movs	r2, #2
 8004f12:	2112      	movs	r1, #18
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	f7ff ff97 	bl	8004e48 <std>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61a3      	str	r3, [r4, #24]
 8004f1e:	bd10      	pop	{r4, pc}
 8004f20:	08005e00 	.word	0x08005e00
 8004f24:	08004e91 	.word	0x08004e91

08004f28 <__sfp>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <__sfp+0x70>)
 8004f2c:	681e      	ldr	r6, [r3, #0]
 8004f2e:	69b3      	ldr	r3, [r6, #24]
 8004f30:	4607      	mov	r7, r0
 8004f32:	b913      	cbnz	r3, 8004f3a <__sfp+0x12>
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff ffc7 	bl	8004ec8 <__sinit>
 8004f3a:	3648      	adds	r6, #72	; 0x48
 8004f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	d503      	bpl.n	8004f4c <__sfp+0x24>
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	b133      	cbz	r3, 8004f56 <__sfp+0x2e>
 8004f48:	6836      	ldr	r6, [r6, #0]
 8004f4a:	e7f7      	b.n	8004f3c <__sfp+0x14>
 8004f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f50:	b16d      	cbz	r5, 8004f6e <__sfp+0x46>
 8004f52:	3468      	adds	r4, #104	; 0x68
 8004f54:	e7f4      	b.n	8004f40 <__sfp+0x18>
 8004f56:	2104      	movs	r1, #4
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ff9f 	bl	8004e9c <__sfmoreglue>
 8004f5e:	6030      	str	r0, [r6, #0]
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1f1      	bne.n	8004f48 <__sfp+0x20>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <__sfp+0x74>)
 8004f70:	6665      	str	r5, [r4, #100]	; 0x64
 8004f72:	e9c4 5500 	strd	r5, r5, [r4]
 8004f76:	60a5      	str	r5, [r4, #8]
 8004f78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4629      	mov	r1, r5
 8004f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f88:	f7fe fab3 	bl	80034f2 <memset>
 8004f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f94:	e7e9      	b.n	8004f6a <__sfp+0x42>
 8004f96:	bf00      	nop
 8004f98:	08005e00 	.word	0x08005e00
 8004f9c:	ffff0001 	.word	0xffff0001

08004fa0 <_fwalk_reent>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	4689      	mov	r9, r1
 8004fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fac:	2600      	movs	r6, #0
 8004fae:	b914      	cbnz	r4, 8004fb6 <_fwalk_reent+0x16>
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fba:	3f01      	subs	r7, #1
 8004fbc:	d501      	bpl.n	8004fc2 <_fwalk_reent+0x22>
 8004fbe:	6824      	ldr	r4, [r4, #0]
 8004fc0:	e7f5      	b.n	8004fae <_fwalk_reent+0xe>
 8004fc2:	89ab      	ldrh	r3, [r5, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d907      	bls.n	8004fd8 <_fwalk_reent+0x38>
 8004fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	d003      	beq.n	8004fd8 <_fwalk_reent+0x38>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	47c8      	blx	r9
 8004fd6:	4306      	orrs	r6, r0
 8004fd8:	3568      	adds	r5, #104	; 0x68
 8004fda:	e7ee      	b.n	8004fba <_fwalk_reent+0x1a>

08004fdc <_localeconv_r>:
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <_localeconv_r+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a18      	ldr	r0, [r3, #32]
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <_localeconv_r+0x18>)
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	bf08      	it	eq
 8004fe8:	4618      	moveq	r0, r3
 8004fea:	30f0      	adds	r0, #240	; 0xf0
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000010 	.word	0x20000010
 8004ff4:	20000074 	.word	0x20000074

08004ff8 <__swhatbuf_r>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	460e      	mov	r6, r1
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	2900      	cmp	r1, #0
 8005002:	b096      	sub	sp, #88	; 0x58
 8005004:	4614      	mov	r4, r2
 8005006:	461d      	mov	r5, r3
 8005008:	da07      	bge.n	800501a <__swhatbuf_r+0x22>
 800500a:	2300      	movs	r3, #0
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	89b3      	ldrh	r3, [r6, #12]
 8005010:	061a      	lsls	r2, r3, #24
 8005012:	d410      	bmi.n	8005036 <__swhatbuf_r+0x3e>
 8005014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005018:	e00e      	b.n	8005038 <__swhatbuf_r+0x40>
 800501a:	466a      	mov	r2, sp
 800501c:	f000 fdd6 	bl	8005bcc <_fstat_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	dbf2      	blt.n	800500a <__swhatbuf_r+0x12>
 8005024:	9a01      	ldr	r2, [sp, #4]
 8005026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800502a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800502e:	425a      	negs	r2, r3
 8005030:	415a      	adcs	r2, r3
 8005032:	602a      	str	r2, [r5, #0]
 8005034:	e7ee      	b.n	8005014 <__swhatbuf_r+0x1c>
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	2000      	movs	r0, #0
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	b016      	add	sp, #88	; 0x58
 800503e:	bd70      	pop	{r4, r5, r6, pc}

08005040 <__smakebuf_r>:
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005044:	079d      	lsls	r5, r3, #30
 8005046:	4606      	mov	r6, r0
 8005048:	460c      	mov	r4, r1
 800504a:	d507      	bpl.n	800505c <__smakebuf_r+0x1c>
 800504c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2301      	movs	r3, #1
 8005056:	6163      	str	r3, [r4, #20]
 8005058:	b002      	add	sp, #8
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	ab01      	add	r3, sp, #4
 800505e:	466a      	mov	r2, sp
 8005060:	f7ff ffca 	bl	8004ff8 <__swhatbuf_r>
 8005064:	9900      	ldr	r1, [sp, #0]
 8005066:	4605      	mov	r5, r0
 8005068:	4630      	mov	r0, r6
 800506a:	f000 fb69 	bl	8005740 <_malloc_r>
 800506e:	b948      	cbnz	r0, 8005084 <__smakebuf_r+0x44>
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	059a      	lsls	r2, r3, #22
 8005076:	d4ef      	bmi.n	8005058 <__smakebuf_r+0x18>
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	e7e3      	b.n	800504c <__smakebuf_r+0xc>
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <__smakebuf_r+0x7c>)
 8005086:	62b3      	str	r3, [r6, #40]	; 0x28
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	6020      	str	r0, [r4, #0]
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	6163      	str	r3, [r4, #20]
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	6120      	str	r0, [r4, #16]
 800509a:	b15b      	cbz	r3, 80050b4 <__smakebuf_r+0x74>
 800509c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 fda5 	bl	8005bf0 <_isatty_r>
 80050a6:	b128      	cbz	r0, 80050b4 <__smakebuf_r+0x74>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	431d      	orrs	r5, r3
 80050b8:	81a5      	strh	r5, [r4, #12]
 80050ba:	e7cd      	b.n	8005058 <__smakebuf_r+0x18>
 80050bc:	08004e91 	.word	0x08004e91

080050c0 <malloc>:
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <malloc+0xc>)
 80050c2:	4601      	mov	r1, r0
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f000 bb3b 	b.w	8005740 <_malloc_r>
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010

080050d0 <_Balloc>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050d4:	4604      	mov	r4, r0
 80050d6:	460e      	mov	r6, r1
 80050d8:	b93d      	cbnz	r5, 80050ea <_Balloc+0x1a>
 80050da:	2010      	movs	r0, #16
 80050dc:	f7ff fff0 	bl	80050c0 <malloc>
 80050e0:	6260      	str	r0, [r4, #36]	; 0x24
 80050e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050e6:	6005      	str	r5, [r0, #0]
 80050e8:	60c5      	str	r5, [r0, #12]
 80050ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80050ec:	68eb      	ldr	r3, [r5, #12]
 80050ee:	b183      	cbz	r3, 8005112 <_Balloc+0x42>
 80050f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050f8:	b9b8      	cbnz	r0, 800512a <_Balloc+0x5a>
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f506 	lsl.w	r5, r1, r6
 8005100:	1d6a      	adds	r2, r5, #5
 8005102:	0092      	lsls	r2, r2, #2
 8005104:	4620      	mov	r0, r4
 8005106:	f000 fabf 	bl	8005688 <_calloc_r>
 800510a:	b160      	cbz	r0, 8005126 <_Balloc+0x56>
 800510c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005110:	e00e      	b.n	8005130 <_Balloc+0x60>
 8005112:	2221      	movs	r2, #33	; 0x21
 8005114:	2104      	movs	r1, #4
 8005116:	4620      	mov	r0, r4
 8005118:	f000 fab6 	bl	8005688 <_calloc_r>
 800511c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800511e:	60e8      	str	r0, [r5, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <_Balloc+0x20>
 8005126:	2000      	movs	r0, #0
 8005128:	bd70      	pop	{r4, r5, r6, pc}
 800512a:	6802      	ldr	r2, [r0, #0]
 800512c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005130:	2300      	movs	r3, #0
 8005132:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005136:	e7f7      	b.n	8005128 <_Balloc+0x58>

08005138 <_Bfree>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800513c:	4606      	mov	r6, r0
 800513e:	460d      	mov	r5, r1
 8005140:	b93c      	cbnz	r4, 8005152 <_Bfree+0x1a>
 8005142:	2010      	movs	r0, #16
 8005144:	f7ff ffbc 	bl	80050c0 <malloc>
 8005148:	6270      	str	r0, [r6, #36]	; 0x24
 800514a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800514e:	6004      	str	r4, [r0, #0]
 8005150:	60c4      	str	r4, [r0, #12]
 8005152:	b13d      	cbz	r5, 8005164 <_Bfree+0x2c>
 8005154:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005156:	686a      	ldr	r2, [r5, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800515e:	6029      	str	r1, [r5, #0]
 8005160:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005164:	bd70      	pop	{r4, r5, r6, pc}

08005166 <__multadd>:
 8005166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	690d      	ldr	r5, [r1, #16]
 800516c:	461f      	mov	r7, r3
 800516e:	4606      	mov	r6, r0
 8005170:	460c      	mov	r4, r1
 8005172:	f101 0c14 	add.w	ip, r1, #20
 8005176:	2300      	movs	r3, #0
 8005178:	f8dc 0000 	ldr.w	r0, [ip]
 800517c:	b281      	uxth	r1, r0
 800517e:	fb02 7101 	mla	r1, r2, r1, r7
 8005182:	0c0f      	lsrs	r7, r1, #16
 8005184:	0c00      	lsrs	r0, r0, #16
 8005186:	fb02 7000 	mla	r0, r2, r0, r7
 800518a:	b289      	uxth	r1, r1
 800518c:	3301      	adds	r3, #1
 800518e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005192:	429d      	cmp	r5, r3
 8005194:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005198:	f84c 1b04 	str.w	r1, [ip], #4
 800519c:	dcec      	bgt.n	8005178 <__multadd+0x12>
 800519e:	b1d7      	cbz	r7, 80051d6 <__multadd+0x70>
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	42ab      	cmp	r3, r5
 80051a4:	dc12      	bgt.n	80051cc <__multadd+0x66>
 80051a6:	6861      	ldr	r1, [r4, #4]
 80051a8:	4630      	mov	r0, r6
 80051aa:	3101      	adds	r1, #1
 80051ac:	f7ff ff90 	bl	80050d0 <_Balloc>
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	3202      	adds	r2, #2
 80051b4:	f104 010c 	add.w	r1, r4, #12
 80051b8:	4680      	mov	r8, r0
 80051ba:	0092      	lsls	r2, r2, #2
 80051bc:	300c      	adds	r0, #12
 80051be:	f7fe f98d 	bl	80034dc <memcpy>
 80051c2:	4621      	mov	r1, r4
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff ffb7 	bl	8005138 <_Bfree>
 80051ca:	4644      	mov	r4, r8
 80051cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051d0:	3501      	adds	r5, #1
 80051d2:	615f      	str	r7, [r3, #20]
 80051d4:	6125      	str	r5, [r4, #16]
 80051d6:	4620      	mov	r0, r4
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051dc <__hi0bits>:
 80051dc:	0c02      	lsrs	r2, r0, #16
 80051de:	0412      	lsls	r2, r2, #16
 80051e0:	4603      	mov	r3, r0
 80051e2:	b9b2      	cbnz	r2, 8005212 <__hi0bits+0x36>
 80051e4:	0403      	lsls	r3, r0, #16
 80051e6:	2010      	movs	r0, #16
 80051e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80051ec:	bf04      	itt	eq
 80051ee:	021b      	lsleq	r3, r3, #8
 80051f0:	3008      	addeq	r0, #8
 80051f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051f6:	bf04      	itt	eq
 80051f8:	011b      	lsleq	r3, r3, #4
 80051fa:	3004      	addeq	r0, #4
 80051fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005200:	bf04      	itt	eq
 8005202:	009b      	lsleq	r3, r3, #2
 8005204:	3002      	addeq	r0, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	db06      	blt.n	8005218 <__hi0bits+0x3c>
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	d503      	bpl.n	8005216 <__hi0bits+0x3a>
 800520e:	3001      	adds	r0, #1
 8005210:	4770      	bx	lr
 8005212:	2000      	movs	r0, #0
 8005214:	e7e8      	b.n	80051e8 <__hi0bits+0xc>
 8005216:	2020      	movs	r0, #32
 8005218:	4770      	bx	lr

0800521a <__lo0bits>:
 800521a:	6803      	ldr	r3, [r0, #0]
 800521c:	f013 0207 	ands.w	r2, r3, #7
 8005220:	4601      	mov	r1, r0
 8005222:	d00b      	beq.n	800523c <__lo0bits+0x22>
 8005224:	07da      	lsls	r2, r3, #31
 8005226:	d423      	bmi.n	8005270 <__lo0bits+0x56>
 8005228:	0798      	lsls	r0, r3, #30
 800522a:	bf49      	itett	mi
 800522c:	085b      	lsrmi	r3, r3, #1
 800522e:	089b      	lsrpl	r3, r3, #2
 8005230:	2001      	movmi	r0, #1
 8005232:	600b      	strmi	r3, [r1, #0]
 8005234:	bf5c      	itt	pl
 8005236:	600b      	strpl	r3, [r1, #0]
 8005238:	2002      	movpl	r0, #2
 800523a:	4770      	bx	lr
 800523c:	b298      	uxth	r0, r3
 800523e:	b9a8      	cbnz	r0, 800526c <__lo0bits+0x52>
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	2010      	movs	r0, #16
 8005244:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005248:	bf04      	itt	eq
 800524a:	0a1b      	lsreq	r3, r3, #8
 800524c:	3008      	addeq	r0, #8
 800524e:	071a      	lsls	r2, r3, #28
 8005250:	bf04      	itt	eq
 8005252:	091b      	lsreq	r3, r3, #4
 8005254:	3004      	addeq	r0, #4
 8005256:	079a      	lsls	r2, r3, #30
 8005258:	bf04      	itt	eq
 800525a:	089b      	lsreq	r3, r3, #2
 800525c:	3002      	addeq	r0, #2
 800525e:	07da      	lsls	r2, r3, #31
 8005260:	d402      	bmi.n	8005268 <__lo0bits+0x4e>
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	d006      	beq.n	8005274 <__lo0bits+0x5a>
 8005266:	3001      	adds	r0, #1
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	4770      	bx	lr
 800526c:	4610      	mov	r0, r2
 800526e:	e7e9      	b.n	8005244 <__lo0bits+0x2a>
 8005270:	2000      	movs	r0, #0
 8005272:	4770      	bx	lr
 8005274:	2020      	movs	r0, #32
 8005276:	4770      	bx	lr

08005278 <__i2b>:
 8005278:	b510      	push	{r4, lr}
 800527a:	460c      	mov	r4, r1
 800527c:	2101      	movs	r1, #1
 800527e:	f7ff ff27 	bl	80050d0 <_Balloc>
 8005282:	2201      	movs	r2, #1
 8005284:	6144      	str	r4, [r0, #20]
 8005286:	6102      	str	r2, [r0, #16]
 8005288:	bd10      	pop	{r4, pc}

0800528a <__multiply>:
 800528a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528e:	4614      	mov	r4, r2
 8005290:	690a      	ldr	r2, [r1, #16]
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	bfb8      	it	lt
 8005298:	460b      	movlt	r3, r1
 800529a:	4688      	mov	r8, r1
 800529c:	bfbc      	itt	lt
 800529e:	46a0      	movlt	r8, r4
 80052a0:	461c      	movlt	r4, r3
 80052a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80052a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052b2:	eb07 0609 	add.w	r6, r7, r9
 80052b6:	42b3      	cmp	r3, r6
 80052b8:	bfb8      	it	lt
 80052ba:	3101      	addlt	r1, #1
 80052bc:	f7ff ff08 	bl	80050d0 <_Balloc>
 80052c0:	f100 0514 	add.w	r5, r0, #20
 80052c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80052c8:	462b      	mov	r3, r5
 80052ca:	2200      	movs	r2, #0
 80052cc:	4573      	cmp	r3, lr
 80052ce:	d316      	bcc.n	80052fe <__multiply+0x74>
 80052d0:	f104 0214 	add.w	r2, r4, #20
 80052d4:	f108 0114 	add.w	r1, r8, #20
 80052d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80052dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	9201      	str	r2, [sp, #4]
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d80c      	bhi.n	8005304 <__multiply+0x7a>
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	dd03      	ble.n	80052f6 <__multiply+0x6c>
 80052ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d05d      	beq.n	80053b2 <__multiply+0x128>
 80052f6:	6106      	str	r6, [r0, #16]
 80052f8:	b003      	add	sp, #12
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	f843 2b04 	str.w	r2, [r3], #4
 8005302:	e7e3      	b.n	80052cc <__multiply+0x42>
 8005304:	f8b2 b000 	ldrh.w	fp, [r2]
 8005308:	f1bb 0f00 	cmp.w	fp, #0
 800530c:	d023      	beq.n	8005356 <__multiply+0xcc>
 800530e:	4689      	mov	r9, r1
 8005310:	46ac      	mov	ip, r5
 8005312:	f04f 0800 	mov.w	r8, #0
 8005316:	f859 4b04 	ldr.w	r4, [r9], #4
 800531a:	f8dc a000 	ldr.w	sl, [ip]
 800531e:	b2a3      	uxth	r3, r4
 8005320:	fa1f fa8a 	uxth.w	sl, sl
 8005324:	fb0b a303 	mla	r3, fp, r3, sl
 8005328:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800532c:	f8dc 4000 	ldr.w	r4, [ip]
 8005330:	4443      	add	r3, r8
 8005332:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005336:	fb0b 840a 	mla	r4, fp, sl, r8
 800533a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800533e:	46e2      	mov	sl, ip
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005346:	454f      	cmp	r7, r9
 8005348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800534c:	f84a 3b04 	str.w	r3, [sl], #4
 8005350:	d82b      	bhi.n	80053aa <__multiply+0x120>
 8005352:	f8cc 8004 	str.w	r8, [ip, #4]
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800535c:	3204      	adds	r2, #4
 800535e:	f1ba 0f00 	cmp.w	sl, #0
 8005362:	d020      	beq.n	80053a6 <__multiply+0x11c>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	4689      	mov	r9, r1
 8005368:	46a8      	mov	r8, r5
 800536a:	f04f 0b00 	mov.w	fp, #0
 800536e:	f8b9 c000 	ldrh.w	ip, [r9]
 8005372:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005376:	fb0a 440c 	mla	r4, sl, ip, r4
 800537a:	445c      	add	r4, fp
 800537c:	46c4      	mov	ip, r8
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005384:	f84c 3b04 	str.w	r3, [ip], #4
 8005388:	f859 3b04 	ldr.w	r3, [r9], #4
 800538c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	fb0a b303 	mla	r3, sl, r3, fp
 8005396:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800539a:	454f      	cmp	r7, r9
 800539c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80053a0:	d805      	bhi.n	80053ae <__multiply+0x124>
 80053a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80053a6:	3504      	adds	r5, #4
 80053a8:	e79b      	b.n	80052e2 <__multiply+0x58>
 80053aa:	46d4      	mov	ip, sl
 80053ac:	e7b3      	b.n	8005316 <__multiply+0x8c>
 80053ae:	46e0      	mov	r8, ip
 80053b0:	e7dd      	b.n	800536e <__multiply+0xe4>
 80053b2:	3e01      	subs	r6, #1
 80053b4:	e799      	b.n	80052ea <__multiply+0x60>
	...

080053b8 <__pow5mult>:
 80053b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053bc:	4615      	mov	r5, r2
 80053be:	f012 0203 	ands.w	r2, r2, #3
 80053c2:	4606      	mov	r6, r0
 80053c4:	460f      	mov	r7, r1
 80053c6:	d007      	beq.n	80053d8 <__pow5mult+0x20>
 80053c8:	3a01      	subs	r2, #1
 80053ca:	4c21      	ldr	r4, [pc, #132]	; (8005450 <__pow5mult+0x98>)
 80053cc:	2300      	movs	r3, #0
 80053ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053d2:	f7ff fec8 	bl	8005166 <__multadd>
 80053d6:	4607      	mov	r7, r0
 80053d8:	10ad      	asrs	r5, r5, #2
 80053da:	d035      	beq.n	8005448 <__pow5mult+0x90>
 80053dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053de:	b93c      	cbnz	r4, 80053f0 <__pow5mult+0x38>
 80053e0:	2010      	movs	r0, #16
 80053e2:	f7ff fe6d 	bl	80050c0 <malloc>
 80053e6:	6270      	str	r0, [r6, #36]	; 0x24
 80053e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053ec:	6004      	str	r4, [r0, #0]
 80053ee:	60c4      	str	r4, [r0, #12]
 80053f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053f8:	b94c      	cbnz	r4, 800540e <__pow5mult+0x56>
 80053fa:	f240 2171 	movw	r1, #625	; 0x271
 80053fe:	4630      	mov	r0, r6
 8005400:	f7ff ff3a 	bl	8005278 <__i2b>
 8005404:	2300      	movs	r3, #0
 8005406:	f8c8 0008 	str.w	r0, [r8, #8]
 800540a:	4604      	mov	r4, r0
 800540c:	6003      	str	r3, [r0, #0]
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	07eb      	lsls	r3, r5, #31
 8005414:	d50a      	bpl.n	800542c <__pow5mult+0x74>
 8005416:	4639      	mov	r1, r7
 8005418:	4622      	mov	r2, r4
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ff35 	bl	800528a <__multiply>
 8005420:	4639      	mov	r1, r7
 8005422:	4681      	mov	r9, r0
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff fe87 	bl	8005138 <_Bfree>
 800542a:	464f      	mov	r7, r9
 800542c:	106d      	asrs	r5, r5, #1
 800542e:	d00b      	beq.n	8005448 <__pow5mult+0x90>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	b938      	cbnz	r0, 8005444 <__pow5mult+0x8c>
 8005434:	4622      	mov	r2, r4
 8005436:	4621      	mov	r1, r4
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff ff26 	bl	800528a <__multiply>
 800543e:	6020      	str	r0, [r4, #0]
 8005440:	f8c0 8000 	str.w	r8, [r0]
 8005444:	4604      	mov	r4, r0
 8005446:	e7e4      	b.n	8005412 <__pow5mult+0x5a>
 8005448:	4638      	mov	r0, r7
 800544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544e:	bf00      	nop
 8005450:	08005f98 	.word	0x08005f98

08005454 <__lshift>:
 8005454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	460c      	mov	r4, r1
 800545a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	6849      	ldr	r1, [r1, #4]
 8005462:	eb0a 0903 	add.w	r9, sl, r3
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	4607      	mov	r7, r0
 800546a:	4616      	mov	r6, r2
 800546c:	f109 0501 	add.w	r5, r9, #1
 8005470:	42ab      	cmp	r3, r5
 8005472:	db32      	blt.n	80054da <__lshift+0x86>
 8005474:	4638      	mov	r0, r7
 8005476:	f7ff fe2b 	bl	80050d0 <_Balloc>
 800547a:	2300      	movs	r3, #0
 800547c:	4680      	mov	r8, r0
 800547e:	f100 0114 	add.w	r1, r0, #20
 8005482:	461a      	mov	r2, r3
 8005484:	4553      	cmp	r3, sl
 8005486:	db2b      	blt.n	80054e0 <__lshift+0x8c>
 8005488:	6920      	ldr	r0, [r4, #16]
 800548a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800548e:	f104 0314 	add.w	r3, r4, #20
 8005492:	f016 021f 	ands.w	r2, r6, #31
 8005496:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800549a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800549e:	d025      	beq.n	80054ec <__lshift+0x98>
 80054a0:	f1c2 0e20 	rsb	lr, r2, #32
 80054a4:	2000      	movs	r0, #0
 80054a6:	681e      	ldr	r6, [r3, #0]
 80054a8:	468a      	mov	sl, r1
 80054aa:	4096      	lsls	r6, r2
 80054ac:	4330      	orrs	r0, r6
 80054ae:	f84a 0b04 	str.w	r0, [sl], #4
 80054b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80054b6:	459c      	cmp	ip, r3
 80054b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80054bc:	d814      	bhi.n	80054e8 <__lshift+0x94>
 80054be:	6048      	str	r0, [r1, #4]
 80054c0:	b108      	cbz	r0, 80054c6 <__lshift+0x72>
 80054c2:	f109 0502 	add.w	r5, r9, #2
 80054c6:	3d01      	subs	r5, #1
 80054c8:	4638      	mov	r0, r7
 80054ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80054ce:	4621      	mov	r1, r4
 80054d0:	f7ff fe32 	bl	8005138 <_Bfree>
 80054d4:	4640      	mov	r0, r8
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	3101      	adds	r1, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	e7c7      	b.n	8005470 <__lshift+0x1c>
 80054e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80054e4:	3301      	adds	r3, #1
 80054e6:	e7cd      	b.n	8005484 <__lshift+0x30>
 80054e8:	4651      	mov	r1, sl
 80054ea:	e7dc      	b.n	80054a6 <__lshift+0x52>
 80054ec:	3904      	subs	r1, #4
 80054ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80054f6:	459c      	cmp	ip, r3
 80054f8:	d8f9      	bhi.n	80054ee <__lshift+0x9a>
 80054fa:	e7e4      	b.n	80054c6 <__lshift+0x72>

080054fc <__mcmp>:
 80054fc:	6903      	ldr	r3, [r0, #16]
 80054fe:	690a      	ldr	r2, [r1, #16]
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	b530      	push	{r4, r5, lr}
 8005504:	d10c      	bne.n	8005520 <__mcmp+0x24>
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	3014      	adds	r0, #20
 800550a:	3114      	adds	r1, #20
 800550c:	1884      	adds	r4, r0, r2
 800550e:	4411      	add	r1, r2
 8005510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005518:	4295      	cmp	r5, r2
 800551a:	d003      	beq.n	8005524 <__mcmp+0x28>
 800551c:	d305      	bcc.n	800552a <__mcmp+0x2e>
 800551e:	2301      	movs	r3, #1
 8005520:	4618      	mov	r0, r3
 8005522:	bd30      	pop	{r4, r5, pc}
 8005524:	42a0      	cmp	r0, r4
 8005526:	d3f3      	bcc.n	8005510 <__mcmp+0x14>
 8005528:	e7fa      	b.n	8005520 <__mcmp+0x24>
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	e7f7      	b.n	8005520 <__mcmp+0x24>

08005530 <__mdiff>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	460d      	mov	r5, r1
 8005536:	4607      	mov	r7, r0
 8005538:	4611      	mov	r1, r2
 800553a:	4628      	mov	r0, r5
 800553c:	4614      	mov	r4, r2
 800553e:	f7ff ffdd 	bl	80054fc <__mcmp>
 8005542:	1e06      	subs	r6, r0, #0
 8005544:	d108      	bne.n	8005558 <__mdiff+0x28>
 8005546:	4631      	mov	r1, r6
 8005548:	4638      	mov	r0, r7
 800554a:	f7ff fdc1 	bl	80050d0 <_Balloc>
 800554e:	2301      	movs	r3, #1
 8005550:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005558:	bfa4      	itt	ge
 800555a:	4623      	movge	r3, r4
 800555c:	462c      	movge	r4, r5
 800555e:	4638      	mov	r0, r7
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	bfa6      	itte	ge
 8005564:	461d      	movge	r5, r3
 8005566:	2600      	movge	r6, #0
 8005568:	2601      	movlt	r6, #1
 800556a:	f7ff fdb1 	bl	80050d0 <_Balloc>
 800556e:	692b      	ldr	r3, [r5, #16]
 8005570:	60c6      	str	r6, [r0, #12]
 8005572:	6926      	ldr	r6, [r4, #16]
 8005574:	f105 0914 	add.w	r9, r5, #20
 8005578:	f104 0214 	add.w	r2, r4, #20
 800557c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005580:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005584:	f100 0514 	add.w	r5, r0, #20
 8005588:	f04f 0e00 	mov.w	lr, #0
 800558c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005590:	f859 4b04 	ldr.w	r4, [r9], #4
 8005594:	fa1e f18a 	uxtah	r1, lr, sl
 8005598:	b2a3      	uxth	r3, r4
 800559a:	1ac9      	subs	r1, r1, r3
 800559c:	0c23      	lsrs	r3, r4, #16
 800559e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80055a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055a6:	b289      	uxth	r1, r1
 80055a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80055ac:	45c8      	cmp	r8, r9
 80055ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80055b2:	4694      	mov	ip, r2
 80055b4:	f845 3b04 	str.w	r3, [r5], #4
 80055b8:	d8e8      	bhi.n	800558c <__mdiff+0x5c>
 80055ba:	45bc      	cmp	ip, r7
 80055bc:	d304      	bcc.n	80055c8 <__mdiff+0x98>
 80055be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80055c2:	b183      	cbz	r3, 80055e6 <__mdiff+0xb6>
 80055c4:	6106      	str	r6, [r0, #16]
 80055c6:	e7c5      	b.n	8005554 <__mdiff+0x24>
 80055c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055cc:	fa1e f381 	uxtah	r3, lr, r1
 80055d0:	141a      	asrs	r2, r3, #16
 80055d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80055e0:	f845 3b04 	str.w	r3, [r5], #4
 80055e4:	e7e9      	b.n	80055ba <__mdiff+0x8a>
 80055e6:	3e01      	subs	r6, #1
 80055e8:	e7e9      	b.n	80055be <__mdiff+0x8e>

080055ea <__d2b>:
 80055ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055ee:	460e      	mov	r6, r1
 80055f0:	2101      	movs	r1, #1
 80055f2:	ec59 8b10 	vmov	r8, r9, d0
 80055f6:	4615      	mov	r5, r2
 80055f8:	f7ff fd6a 	bl	80050d0 <_Balloc>
 80055fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005600:	4607      	mov	r7, r0
 8005602:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005606:	bb34      	cbnz	r4, 8005656 <__d2b+0x6c>
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	f1b8 0300 	subs.w	r3, r8, #0
 800560e:	d027      	beq.n	8005660 <__d2b+0x76>
 8005610:	a802      	add	r0, sp, #8
 8005612:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005616:	f7ff fe00 	bl	800521a <__lo0bits>
 800561a:	9900      	ldr	r1, [sp, #0]
 800561c:	b1f0      	cbz	r0, 800565c <__d2b+0x72>
 800561e:	9a01      	ldr	r2, [sp, #4]
 8005620:	f1c0 0320 	rsb	r3, r0, #32
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	430b      	orrs	r3, r1
 800562a:	40c2      	lsrs	r2, r0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	9201      	str	r2, [sp, #4]
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf14      	ite	ne
 8005638:	2102      	movne	r1, #2
 800563a:	2101      	moveq	r1, #1
 800563c:	6139      	str	r1, [r7, #16]
 800563e:	b1c4      	cbz	r4, 8005672 <__d2b+0x88>
 8005640:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005644:	4404      	add	r4, r0
 8005646:	6034      	str	r4, [r6, #0]
 8005648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800564c:	6028      	str	r0, [r5, #0]
 800564e:	4638      	mov	r0, r7
 8005650:	b003      	add	sp, #12
 8005652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565a:	e7d5      	b.n	8005608 <__d2b+0x1e>
 800565c:	6179      	str	r1, [r7, #20]
 800565e:	e7e7      	b.n	8005630 <__d2b+0x46>
 8005660:	a801      	add	r0, sp, #4
 8005662:	f7ff fdda 	bl	800521a <__lo0bits>
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	2101      	movs	r1, #1
 800566c:	6139      	str	r1, [r7, #16]
 800566e:	3020      	adds	r0, #32
 8005670:	e7e5      	b.n	800563e <__d2b+0x54>
 8005672:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005676:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800567a:	6030      	str	r0, [r6, #0]
 800567c:	6918      	ldr	r0, [r3, #16]
 800567e:	f7ff fdad 	bl	80051dc <__hi0bits>
 8005682:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005686:	e7e1      	b.n	800564c <__d2b+0x62>

08005688 <_calloc_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	fb02 f401 	mul.w	r4, r2, r1
 800568e:	4621      	mov	r1, r4
 8005690:	f000 f856 	bl	8005740 <_malloc_r>
 8005694:	4605      	mov	r5, r0
 8005696:	b118      	cbz	r0, 80056a0 <_calloc_r+0x18>
 8005698:	4622      	mov	r2, r4
 800569a:	2100      	movs	r1, #0
 800569c:	f7fd ff29 	bl	80034f2 <memset>
 80056a0:	4628      	mov	r0, r5
 80056a2:	bd38      	pop	{r3, r4, r5, pc}

080056a4 <_free_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4605      	mov	r5, r0
 80056a8:	2900      	cmp	r1, #0
 80056aa:	d045      	beq.n	8005738 <_free_r+0x94>
 80056ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b0:	1f0c      	subs	r4, r1, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bfb8      	it	lt
 80056b6:	18e4      	addlt	r4, r4, r3
 80056b8:	f000 face 	bl	8005c58 <__malloc_lock>
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <_free_r+0x98>)
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	4610      	mov	r0, r2
 80056c2:	b933      	cbnz	r3, 80056d2 <_free_r+0x2e>
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6014      	str	r4, [r2, #0]
 80056c8:	4628      	mov	r0, r5
 80056ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ce:	f000 bac4 	b.w	8005c5a <__malloc_unlock>
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	d90c      	bls.n	80056f0 <_free_r+0x4c>
 80056d6:	6821      	ldr	r1, [r4, #0]
 80056d8:	1862      	adds	r2, r4, r1
 80056da:	4293      	cmp	r3, r2
 80056dc:	bf04      	itt	eq
 80056de:	681a      	ldreq	r2, [r3, #0]
 80056e0:	685b      	ldreq	r3, [r3, #4]
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	bf04      	itt	eq
 80056e6:	1852      	addeq	r2, r2, r1
 80056e8:	6022      	streq	r2, [r4, #0]
 80056ea:	6004      	str	r4, [r0, #0]
 80056ec:	e7ec      	b.n	80056c8 <_free_r+0x24>
 80056ee:	4613      	mov	r3, r2
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	b10a      	cbz	r2, 80056f8 <_free_r+0x54>
 80056f4:	42a2      	cmp	r2, r4
 80056f6:	d9fa      	bls.n	80056ee <_free_r+0x4a>
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	1858      	adds	r0, r3, r1
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d10b      	bne.n	8005718 <_free_r+0x74>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	4401      	add	r1, r0
 8005704:	1858      	adds	r0, r3, r1
 8005706:	4282      	cmp	r2, r0
 8005708:	6019      	str	r1, [r3, #0]
 800570a:	d1dd      	bne.n	80056c8 <_free_r+0x24>
 800570c:	6810      	ldr	r0, [r2, #0]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	4401      	add	r1, r0
 8005714:	6019      	str	r1, [r3, #0]
 8005716:	e7d7      	b.n	80056c8 <_free_r+0x24>
 8005718:	d902      	bls.n	8005720 <_free_r+0x7c>
 800571a:	230c      	movs	r3, #12
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	e7d3      	b.n	80056c8 <_free_r+0x24>
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	1821      	adds	r1, r4, r0
 8005724:	428a      	cmp	r2, r1
 8005726:	bf04      	itt	eq
 8005728:	6811      	ldreq	r1, [r2, #0]
 800572a:	6852      	ldreq	r2, [r2, #4]
 800572c:	6062      	str	r2, [r4, #4]
 800572e:	bf04      	itt	eq
 8005730:	1809      	addeq	r1, r1, r0
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	605c      	str	r4, [r3, #4]
 8005736:	e7c7      	b.n	80056c8 <_free_r+0x24>
 8005738:	bd38      	pop	{r3, r4, r5, pc}
 800573a:	bf00      	nop
 800573c:	20000328 	.word	0x20000328

08005740 <_malloc_r>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	1ccd      	adds	r5, r1, #3
 8005744:	f025 0503 	bic.w	r5, r5, #3
 8005748:	3508      	adds	r5, #8
 800574a:	2d0c      	cmp	r5, #12
 800574c:	bf38      	it	cc
 800574e:	250c      	movcc	r5, #12
 8005750:	2d00      	cmp	r5, #0
 8005752:	4606      	mov	r6, r0
 8005754:	db01      	blt.n	800575a <_malloc_r+0x1a>
 8005756:	42a9      	cmp	r1, r5
 8005758:	d903      	bls.n	8005762 <_malloc_r+0x22>
 800575a:	230c      	movs	r3, #12
 800575c:	6033      	str	r3, [r6, #0]
 800575e:	2000      	movs	r0, #0
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	f000 fa79 	bl	8005c58 <__malloc_lock>
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <_malloc_r+0xac>)
 8005768:	6814      	ldr	r4, [r2, #0]
 800576a:	4621      	mov	r1, r4
 800576c:	b991      	cbnz	r1, 8005794 <_malloc_r+0x54>
 800576e:	4c20      	ldr	r4, [pc, #128]	; (80057f0 <_malloc_r+0xb0>)
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	b91b      	cbnz	r3, 800577c <_malloc_r+0x3c>
 8005774:	4630      	mov	r0, r6
 8005776:	f000 f9b3 	bl	8005ae0 <_sbrk_r>
 800577a:	6020      	str	r0, [r4, #0]
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f000 f9ae 	bl	8005ae0 <_sbrk_r>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d124      	bne.n	80057d2 <_malloc_r+0x92>
 8005788:	230c      	movs	r3, #12
 800578a:	6033      	str	r3, [r6, #0]
 800578c:	4630      	mov	r0, r6
 800578e:	f000 fa64 	bl	8005c5a <__malloc_unlock>
 8005792:	e7e4      	b.n	800575e <_malloc_r+0x1e>
 8005794:	680b      	ldr	r3, [r1, #0]
 8005796:	1b5b      	subs	r3, r3, r5
 8005798:	d418      	bmi.n	80057cc <_malloc_r+0x8c>
 800579a:	2b0b      	cmp	r3, #11
 800579c:	d90f      	bls.n	80057be <_malloc_r+0x7e>
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	50cd      	str	r5, [r1, r3]
 80057a2:	18cc      	adds	r4, r1, r3
 80057a4:	4630      	mov	r0, r6
 80057a6:	f000 fa58 	bl	8005c5a <__malloc_unlock>
 80057aa:	f104 000b 	add.w	r0, r4, #11
 80057ae:	1d23      	adds	r3, r4, #4
 80057b0:	f020 0007 	bic.w	r0, r0, #7
 80057b4:	1ac3      	subs	r3, r0, r3
 80057b6:	d0d3      	beq.n	8005760 <_malloc_r+0x20>
 80057b8:	425a      	negs	r2, r3
 80057ba:	50e2      	str	r2, [r4, r3]
 80057bc:	e7d0      	b.n	8005760 <_malloc_r+0x20>
 80057be:	428c      	cmp	r4, r1
 80057c0:	684b      	ldr	r3, [r1, #4]
 80057c2:	bf16      	itet	ne
 80057c4:	6063      	strne	r3, [r4, #4]
 80057c6:	6013      	streq	r3, [r2, #0]
 80057c8:	460c      	movne	r4, r1
 80057ca:	e7eb      	b.n	80057a4 <_malloc_r+0x64>
 80057cc:	460c      	mov	r4, r1
 80057ce:	6849      	ldr	r1, [r1, #4]
 80057d0:	e7cc      	b.n	800576c <_malloc_r+0x2c>
 80057d2:	1cc4      	adds	r4, r0, #3
 80057d4:	f024 0403 	bic.w	r4, r4, #3
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d005      	beq.n	80057e8 <_malloc_r+0xa8>
 80057dc:	1a21      	subs	r1, r4, r0
 80057de:	4630      	mov	r0, r6
 80057e0:	f000 f97e 	bl	8005ae0 <_sbrk_r>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d0cf      	beq.n	8005788 <_malloc_r+0x48>
 80057e8:	6025      	str	r5, [r4, #0]
 80057ea:	e7db      	b.n	80057a4 <_malloc_r+0x64>
 80057ec:	20000328 	.word	0x20000328
 80057f0:	2000032c 	.word	0x2000032c

080057f4 <__sfputc_r>:
 80057f4:	6893      	ldr	r3, [r2, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	b410      	push	{r4}
 80057fc:	6093      	str	r3, [r2, #8]
 80057fe:	da08      	bge.n	8005812 <__sfputc_r+0x1e>
 8005800:	6994      	ldr	r4, [r2, #24]
 8005802:	42a3      	cmp	r3, r4
 8005804:	db01      	blt.n	800580a <__sfputc_r+0x16>
 8005806:	290a      	cmp	r1, #10
 8005808:	d103      	bne.n	8005812 <__sfputc_r+0x1e>
 800580a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580e:	f7fe bb65 	b.w	8003edc <__swbuf_r>
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	1c58      	adds	r0, r3, #1
 8005816:	6010      	str	r0, [r2, #0]
 8005818:	7019      	strb	r1, [r3, #0]
 800581a:	4608      	mov	r0, r1
 800581c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005820:	4770      	bx	lr

08005822 <__sfputs_r>:
 8005822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	4614      	mov	r4, r2
 800582a:	18d5      	adds	r5, r2, r3
 800582c:	42ac      	cmp	r4, r5
 800582e:	d101      	bne.n	8005834 <__sfputs_r+0x12>
 8005830:	2000      	movs	r0, #0
 8005832:	e007      	b.n	8005844 <__sfputs_r+0x22>
 8005834:	463a      	mov	r2, r7
 8005836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff ffda 	bl	80057f4 <__sfputc_r>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d1f3      	bne.n	800582c <__sfputs_r+0xa>
 8005844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005848 <_vfiprintf_r>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	b09d      	sub	sp, #116	; 0x74
 8005850:	4617      	mov	r7, r2
 8005852:	461d      	mov	r5, r3
 8005854:	4606      	mov	r6, r0
 8005856:	b118      	cbz	r0, 8005860 <_vfiprintf_r+0x18>
 8005858:	6983      	ldr	r3, [r0, #24]
 800585a:	b90b      	cbnz	r3, 8005860 <_vfiprintf_r+0x18>
 800585c:	f7ff fb34 	bl	8004ec8 <__sinit>
 8005860:	4b7c      	ldr	r3, [pc, #496]	; (8005a54 <_vfiprintf_r+0x20c>)
 8005862:	429c      	cmp	r4, r3
 8005864:	d158      	bne.n	8005918 <_vfiprintf_r+0xd0>
 8005866:	6874      	ldr	r4, [r6, #4]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	0718      	lsls	r0, r3, #28
 800586c:	d55e      	bpl.n	800592c <_vfiprintf_r+0xe4>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05b      	beq.n	800592c <_vfiprintf_r+0xe4>
 8005874:	2300      	movs	r3, #0
 8005876:	9309      	str	r3, [sp, #36]	; 0x24
 8005878:	2320      	movs	r3, #32
 800587a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800587e:	2330      	movs	r3, #48	; 0x30
 8005880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005884:	9503      	str	r5, [sp, #12]
 8005886:	f04f 0b01 	mov.w	fp, #1
 800588a:	46b8      	mov	r8, r7
 800588c:	4645      	mov	r5, r8
 800588e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005892:	b10b      	cbz	r3, 8005898 <_vfiprintf_r+0x50>
 8005894:	2b25      	cmp	r3, #37	; 0x25
 8005896:	d154      	bne.n	8005942 <_vfiprintf_r+0xfa>
 8005898:	ebb8 0a07 	subs.w	sl, r8, r7
 800589c:	d00b      	beq.n	80058b6 <_vfiprintf_r+0x6e>
 800589e:	4653      	mov	r3, sl
 80058a0:	463a      	mov	r2, r7
 80058a2:	4621      	mov	r1, r4
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ffbc 	bl	8005822 <__sfputs_r>
 80058aa:	3001      	adds	r0, #1
 80058ac:	f000 80c2 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	4453      	add	r3, sl
 80058b4:	9309      	str	r3, [sp, #36]	; 0x24
 80058b6:	f898 3000 	ldrb.w	r3, [r8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80ba 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058c0:	2300      	movs	r3, #0
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	9307      	str	r3, [sp, #28]
 80058ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058d2:	931a      	str	r3, [sp, #104]	; 0x68
 80058d4:	46a8      	mov	r8, r5
 80058d6:	2205      	movs	r2, #5
 80058d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80058dc:	485e      	ldr	r0, [pc, #376]	; (8005a58 <_vfiprintf_r+0x210>)
 80058de:	f7fa fc87 	bl	80001f0 <memchr>
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	bb78      	cbnz	r0, 8005946 <_vfiprintf_r+0xfe>
 80058e6:	06d9      	lsls	r1, r3, #27
 80058e8:	bf44      	itt	mi
 80058ea:	2220      	movmi	r2, #32
 80058ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058f0:	071a      	lsls	r2, r3, #28
 80058f2:	bf44      	itt	mi
 80058f4:	222b      	movmi	r2, #43	; 0x2b
 80058f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058fa:	782a      	ldrb	r2, [r5, #0]
 80058fc:	2a2a      	cmp	r2, #42	; 0x2a
 80058fe:	d02a      	beq.n	8005956 <_vfiprintf_r+0x10e>
 8005900:	9a07      	ldr	r2, [sp, #28]
 8005902:	46a8      	mov	r8, r5
 8005904:	2000      	movs	r0, #0
 8005906:	250a      	movs	r5, #10
 8005908:	4641      	mov	r1, r8
 800590a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590e:	3b30      	subs	r3, #48	; 0x30
 8005910:	2b09      	cmp	r3, #9
 8005912:	d969      	bls.n	80059e8 <_vfiprintf_r+0x1a0>
 8005914:	b360      	cbz	r0, 8005970 <_vfiprintf_r+0x128>
 8005916:	e024      	b.n	8005962 <_vfiprintf_r+0x11a>
 8005918:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <_vfiprintf_r+0x214>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d101      	bne.n	8005922 <_vfiprintf_r+0xda>
 800591e:	68b4      	ldr	r4, [r6, #8]
 8005920:	e7a2      	b.n	8005868 <_vfiprintf_r+0x20>
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <_vfiprintf_r+0x218>)
 8005924:	429c      	cmp	r4, r3
 8005926:	bf08      	it	eq
 8005928:	68f4      	ldreq	r4, [r6, #12]
 800592a:	e79d      	b.n	8005868 <_vfiprintf_r+0x20>
 800592c:	4621      	mov	r1, r4
 800592e:	4630      	mov	r0, r6
 8005930:	f7fe fb26 	bl	8003f80 <__swsetup_r>
 8005934:	2800      	cmp	r0, #0
 8005936:	d09d      	beq.n	8005874 <_vfiprintf_r+0x2c>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	b01d      	add	sp, #116	; 0x74
 800593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005942:	46a8      	mov	r8, r5
 8005944:	e7a2      	b.n	800588c <_vfiprintf_r+0x44>
 8005946:	4a44      	ldr	r2, [pc, #272]	; (8005a58 <_vfiprintf_r+0x210>)
 8005948:	1a80      	subs	r0, r0, r2
 800594a:	fa0b f000 	lsl.w	r0, fp, r0
 800594e:	4318      	orrs	r0, r3
 8005950:	9004      	str	r0, [sp, #16]
 8005952:	4645      	mov	r5, r8
 8005954:	e7be      	b.n	80058d4 <_vfiprintf_r+0x8c>
 8005956:	9a03      	ldr	r2, [sp, #12]
 8005958:	1d11      	adds	r1, r2, #4
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	9103      	str	r1, [sp, #12]
 800595e:	2a00      	cmp	r2, #0
 8005960:	db01      	blt.n	8005966 <_vfiprintf_r+0x11e>
 8005962:	9207      	str	r2, [sp, #28]
 8005964:	e004      	b.n	8005970 <_vfiprintf_r+0x128>
 8005966:	4252      	negs	r2, r2
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	9207      	str	r2, [sp, #28]
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	f898 3000 	ldrb.w	r3, [r8]
 8005974:	2b2e      	cmp	r3, #46	; 0x2e
 8005976:	d10e      	bne.n	8005996 <_vfiprintf_r+0x14e>
 8005978:	f898 3001 	ldrb.w	r3, [r8, #1]
 800597c:	2b2a      	cmp	r3, #42	; 0x2a
 800597e:	d138      	bne.n	80059f2 <_vfiprintf_r+0x1aa>
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	9203      	str	r2, [sp, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfb8      	it	lt
 800598c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005990:	f108 0802 	add.w	r8, r8, #2
 8005994:	9305      	str	r3, [sp, #20]
 8005996:	4d33      	ldr	r5, [pc, #204]	; (8005a64 <_vfiprintf_r+0x21c>)
 8005998:	f898 1000 	ldrb.w	r1, [r8]
 800599c:	2203      	movs	r2, #3
 800599e:	4628      	mov	r0, r5
 80059a0:	f7fa fc26 	bl	80001f0 <memchr>
 80059a4:	b140      	cbz	r0, 80059b8 <_vfiprintf_r+0x170>
 80059a6:	2340      	movs	r3, #64	; 0x40
 80059a8:	1b40      	subs	r0, r0, r5
 80059aa:	fa03 f000 	lsl.w	r0, r3, r0
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	4303      	orrs	r3, r0
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	f898 1000 	ldrb.w	r1, [r8]
 80059bc:	482a      	ldr	r0, [pc, #168]	; (8005a68 <_vfiprintf_r+0x220>)
 80059be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c2:	2206      	movs	r2, #6
 80059c4:	f108 0701 	add.w	r7, r8, #1
 80059c8:	f7fa fc12 	bl	80001f0 <memchr>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d037      	beq.n	8005a40 <_vfiprintf_r+0x1f8>
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <_vfiprintf_r+0x224>)
 80059d2:	bb1b      	cbnz	r3, 8005a1c <_vfiprintf_r+0x1d4>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	3307      	adds	r3, #7
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	3308      	adds	r3, #8
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	444b      	add	r3, r9
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	e750      	b.n	800588a <_vfiprintf_r+0x42>
 80059e8:	fb05 3202 	mla	r2, r5, r2, r3
 80059ec:	2001      	movs	r0, #1
 80059ee:	4688      	mov	r8, r1
 80059f0:	e78a      	b.n	8005908 <_vfiprintf_r+0xc0>
 80059f2:	2300      	movs	r3, #0
 80059f4:	f108 0801 	add.w	r8, r8, #1
 80059f8:	9305      	str	r3, [sp, #20]
 80059fa:	4619      	mov	r1, r3
 80059fc:	250a      	movs	r5, #10
 80059fe:	4640      	mov	r0, r8
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_vfiprintf_r+0x1ca>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c3      	beq.n	8005996 <_vfiprintf_r+0x14e>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c1      	b.n	8005996 <_vfiprintf_r+0x14e>
 8005a12:	fb05 2101 	mla	r1, r5, r1, r2
 8005a16:	2301      	movs	r3, #1
 8005a18:	4680      	mov	r8, r0
 8005a1a:	e7f0      	b.n	80059fe <_vfiprintf_r+0x1b6>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4622      	mov	r2, r4
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <_vfiprintf_r+0x228>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7fd fe00 	bl	800362c <_printf_float>
 8005a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a30:	4681      	mov	r9, r0
 8005a32:	d1d5      	bne.n	80059e0 <_vfiprintf_r+0x198>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	065b      	lsls	r3, r3, #25
 8005a38:	f53f af7e 	bmi.w	8005938 <_vfiprintf_r+0xf0>
 8005a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3e:	e77d      	b.n	800593c <_vfiprintf_r+0xf4>
 8005a40:	ab03      	add	r3, sp, #12
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	4622      	mov	r2, r4
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <_vfiprintf_r+0x228>)
 8005a48:	a904      	add	r1, sp, #16
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7fe f8a4 	bl	8003b98 <_printf_i>
 8005a50:	e7ec      	b.n	8005a2c <_vfiprintf_r+0x1e4>
 8005a52:	bf00      	nop
 8005a54:	08005e68 	.word	0x08005e68
 8005a58:	08005fa4 	.word	0x08005fa4
 8005a5c:	08005e88 	.word	0x08005e88
 8005a60:	08005e48 	.word	0x08005e48
 8005a64:	08005faa 	.word	0x08005faa
 8005a68:	08005fae 	.word	0x08005fae
 8005a6c:	0800362d 	.word	0x0800362d
 8005a70:	08005823 	.word	0x08005823

08005a74 <_putc_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	460d      	mov	r5, r1
 8005a78:	4614      	mov	r4, r2
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	b118      	cbz	r0, 8005a86 <_putc_r+0x12>
 8005a7e:	6983      	ldr	r3, [r0, #24]
 8005a80:	b90b      	cbnz	r3, 8005a86 <_putc_r+0x12>
 8005a82:	f7ff fa21 	bl	8004ec8 <__sinit>
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <_putc_r+0x60>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	d112      	bne.n	8005ab2 <_putc_r+0x3e>
 8005a8c:	6874      	ldr	r4, [r6, #4]
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	da16      	bge.n	8005ac6 <_putc_r+0x52>
 8005a98:	69a2      	ldr	r2, [r4, #24]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	db02      	blt.n	8005aa4 <_putc_r+0x30>
 8005a9e:	b2eb      	uxtb	r3, r5
 8005aa0:	2b0a      	cmp	r3, #10
 8005aa2:	d110      	bne.n	8005ac6 <_putc_r+0x52>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005aae:	f7fe ba15 	b.w	8003edc <__swbuf_r>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <_putc_r+0x64>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	d101      	bne.n	8005abc <_putc_r+0x48>
 8005ab8:	68b4      	ldr	r4, [r6, #8]
 8005aba:	e7e8      	b.n	8005a8e <_putc_r+0x1a>
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <_putc_r+0x68>)
 8005abe:	429c      	cmp	r4, r3
 8005ac0:	bf08      	it	eq
 8005ac2:	68f4      	ldreq	r4, [r6, #12]
 8005ac4:	e7e3      	b.n	8005a8e <_putc_r+0x1a>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	701d      	strb	r5, [r3, #0]
 8005ace:	b2e8      	uxtb	r0, r5
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08005e68 	.word	0x08005e68
 8005ad8:	08005e88 	.word	0x08005e88
 8005adc:	08005e48 	.word	0x08005e48

08005ae0 <_sbrk_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4c06      	ldr	r4, [pc, #24]	; (8005afc <_sbrk_r+0x1c>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	f7fb ff80 	bl	80019f0 <_sbrk>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_sbrk_r+0x1a>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_sbrk_r+0x1a>
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	2000048c 	.word	0x2000048c

08005b00 <__sread>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	460c      	mov	r4, r1
 8005b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b08:	f000 f8a8 	bl	8005c5c <_read_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	bfab      	itete	ge
 8005b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b12:	89a3      	ldrhlt	r3, [r4, #12]
 8005b14:	181b      	addge	r3, r3, r0
 8005b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b1a:	bfac      	ite	ge
 8005b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b1e:	81a3      	strhlt	r3, [r4, #12]
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <__swrite>:
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	461f      	mov	r7, r3
 8005b28:	898b      	ldrh	r3, [r1, #12]
 8005b2a:	05db      	lsls	r3, r3, #23
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	4616      	mov	r6, r2
 8005b32:	d505      	bpl.n	8005b40 <__swrite+0x1e>
 8005b34:	2302      	movs	r3, #2
 8005b36:	2200      	movs	r2, #0
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	f000 f868 	bl	8005c10 <_lseek_r>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	4628      	mov	r0, r5
 8005b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	f000 b817 	b.w	8005b88 <_write_r>

08005b5a <__sseek>:
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b62:	f000 f855 	bl	8005c10 <_lseek_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	bf15      	itete	ne
 8005b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b76:	81a3      	strheq	r3, [r4, #12]
 8005b78:	bf18      	it	ne
 8005b7a:	81a3      	strhne	r3, [r4, #12]
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <__sclose>:
 8005b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b82:	f000 b813 	b.w	8005bac <_close_r>
	...

08005b88 <_write_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4c07      	ldr	r4, [pc, #28]	; (8005ba8 <_write_r+0x20>)
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4611      	mov	r1, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fb ff10 	bl	80019bc <_write>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_write_r+0x1e>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_write_r+0x1e>
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	2000048c 	.word	0x2000048c

08005bac <_close_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4c06      	ldr	r4, [pc, #24]	; (8005bc8 <_close_r+0x1c>)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	f7fb ff0e 	bl	80019d8 <_close>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_close_r+0x1a>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_close_r+0x1a>
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	2000048c 	.word	0x2000048c

08005bcc <_fstat_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4c07      	ldr	r4, [pc, #28]	; (8005bec <_fstat_r+0x20>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	f7fb ff00 	bl	80019de <_fstat>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d102      	bne.n	8005be8 <_fstat_r+0x1c>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	b103      	cbz	r3, 8005be8 <_fstat_r+0x1c>
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	bd38      	pop	{r3, r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	2000048c 	.word	0x2000048c

08005bf0 <_isatty_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4c06      	ldr	r4, [pc, #24]	; (8005c0c <_isatty_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	f7fb fef4 	bl	80019e8 <_isatty>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_isatty_r+0x1a>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_isatty_r+0x1a>
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	2000048c 	.word	0x2000048c

08005c10 <_lseek_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4c07      	ldr	r4, [pc, #28]	; (8005c30 <_lseek_r+0x20>)
 8005c14:	4605      	mov	r5, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fee4 	bl	80019ec <_lseek>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_lseek_r+0x1e>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_lseek_r+0x1e>
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	2000048c 	.word	0x2000048c

08005c34 <__ascii_mbtowc>:
 8005c34:	b082      	sub	sp, #8
 8005c36:	b901      	cbnz	r1, 8005c3a <__ascii_mbtowc+0x6>
 8005c38:	a901      	add	r1, sp, #4
 8005c3a:	b142      	cbz	r2, 8005c4e <__ascii_mbtowc+0x1a>
 8005c3c:	b14b      	cbz	r3, 8005c52 <__ascii_mbtowc+0x1e>
 8005c3e:	7813      	ldrb	r3, [r2, #0]
 8005c40:	600b      	str	r3, [r1, #0]
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	1c10      	adds	r0, r2, #0
 8005c46:	bf18      	it	ne
 8005c48:	2001      	movne	r0, #1
 8005c4a:	b002      	add	sp, #8
 8005c4c:	4770      	bx	lr
 8005c4e:	4610      	mov	r0, r2
 8005c50:	e7fb      	b.n	8005c4a <__ascii_mbtowc+0x16>
 8005c52:	f06f 0001 	mvn.w	r0, #1
 8005c56:	e7f8      	b.n	8005c4a <__ascii_mbtowc+0x16>

08005c58 <__malloc_lock>:
 8005c58:	4770      	bx	lr

08005c5a <__malloc_unlock>:
 8005c5a:	4770      	bx	lr

08005c5c <_read_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4c07      	ldr	r4, [pc, #28]	; (8005c7c <_read_r+0x20>)
 8005c60:	4605      	mov	r5, r0
 8005c62:	4608      	mov	r0, r1
 8005c64:	4611      	mov	r1, r2
 8005c66:	2200      	movs	r2, #0
 8005c68:	6022      	str	r2, [r4, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f7fb fe98 	bl	80019a0 <_read>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d102      	bne.n	8005c7a <_read_r+0x1e>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	b103      	cbz	r3, 8005c7a <_read_r+0x1e>
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	2000048c 	.word	0x2000048c

08005c80 <__ascii_wctomb>:
 8005c80:	b149      	cbz	r1, 8005c96 <__ascii_wctomb+0x16>
 8005c82:	2aff      	cmp	r2, #255	; 0xff
 8005c84:	bf85      	ittet	hi
 8005c86:	238a      	movhi	r3, #138	; 0x8a
 8005c88:	6003      	strhi	r3, [r0, #0]
 8005c8a:	700a      	strbls	r2, [r1, #0]
 8005c8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005c90:	bf98      	it	ls
 8005c92:	2001      	movls	r0, #1
 8005c94:	4770      	bx	lr
 8005c96:	4608      	mov	r0, r1
 8005c98:	4770      	bx	lr
	...

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
